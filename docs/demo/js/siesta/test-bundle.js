(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @module siesta
 */

var collection = require('./src/collection');
var util = require('./src/util');

var CollectionRegistry = require('./src/collectionRegistry').CollectionRegistry,
    Collection = collection.Collection,
    cache = require('./src/cache'),
    Mapping = require('./src/mapping').Mapping,
    notificationCentre = require('./src/notificationCentre').notificationCentre,
    Operation = require('./vendor/operations.js/src/operation').Operation,
    OperationQueue = require('./vendor/operations.js/src/queue').OperationQueue,
    RelationshipType = require('./src/relationship').RelationshipType,
    log = require('./vendor/operations.js/src/log'),
    q = require('q'),
    _ = util._;


Operation.logLevel = log.Level.warn;
OperationQueue.logLevel = log.Level.warn;


var siesta;
if (typeof module != 'undefined') {
    siesta = module.exports;
} else {
    siesta = {};
}

// siesta.save = function save(callback) {
//     var deferred = q.defer();
//     callback = util.constructCallbackAndPromiseHandler(callback, deferred);
//     if (siesta.ext.storageEnabled) {
//         util.next(function() {
//             var mergeChanges = siesta.ext.storage.changes.mergeChanges;
//             mergeChanges(callback);
//         });
//     } else {
//         callback('Storage module not installed');
//     }
//     return deferred.promise;
// };

/**
 * Wipe everything!
 */
siesta.reset = function() {
    cache.reset();
    CollectionRegistry.reset();
    siesta.ext.http.DescriptorRegistry.reset();
    //noinspection JSAccessibilityCheck
};


/**
 * Listen to notificatons.
 * @param {String} notificationName
 * @param {Function} handler
 */
siesta.on = _.bind(notificationCentre.on, notificationCentre);

/**
 * Listen to notificatons.
 * @param {String} notificationName
 * @param {Function} handler
 */
siesta.addListener = siesta.on;

/**
 * Stop listening to a particular notification
 * 
 * @param {String} notificationName
 * @param {Function} handler
 */
siesta.off = _.bind(notificationCentre.removeListener, notificationCentre);

/**
 * Stop listening to a particular notification
 * 
 * @param {String} notificationName
 * @param {Function} handler
 */
siesta.removeListener = siesta.off;

/**
 * Listen to one and only one notification.
 * 
 * @param {String} notificationName
 * @param {Function} handler
 */
siesta.once = _.bind(notificationCentre.once, notificationCentre);

/**
 * Removes all listeners.
 */
siesta.removeAllListeners = _.bind(notificationCentre.removeAllListeners, notificationCentre);

siesta.Collection = Collection;
siesta.RelationshipType = RelationshipType;

// Used by modules.
var coreChanges = require('./src/changes');

// Make available modules to extensions.
siesta._internal = {
    log: log,
    Mapping: Mapping,
    mapping: require('./src/mapping'),
    error: require('./src/error'),
    ChangeType: coreChanges.ChangeType,
    object: require('./src/object'),
    extend: require('extend'),
    notificationCentre: require('./src/notificationCentre'),
    cache: require('./src/cache'),
    misc: require('./src/misc'),
    Operation: Operation,
    OperationQueue: OperationQueue,
    coreChanges: coreChanges,
    CollectionRegistry: require('./src/collectionRegistry').CollectionRegistry,
    Collection: collection.Collection,
    collection: collection,
    utils: util,
    util: util,
    _: util._,
    query: require('./src/query'),
    store: require('./src/store'),
    q: require('q')
};

siesta.performanceMonitoringEnabled = false;
siesta.httpEnabled = false;
siesta.storageEnabled = false;

siesta.ext = {};

// Object.defineProperty(siesta, 'setPouch', {
//     get: function() {
//         if (siesta.ext.storageEnabled) {
//             return siesta.ext.storage.pouch.setPouch;
//         }
//         return null;
//     }
// });

// Object.defineProperty(siesta.ext, 'storageEnabled', {
//     get: function() {
//         if (siesta.ext._storageEnabled !== undefined) {
//             return siesta.ext._storageEnabled;
//         }
//         return !!siesta.ext.storage;
//     },
//     set: function(v) {
//         siesta.ext._storageEnabled = v;
//     }
// });

/**
 * True if siesta.http.js is installed correctly (or siesta.bundle.js is being used instead).
 */
Object.defineProperty(siesta.ext, 'httpEnabled', {
    get: function() {
        if (siesta.ext._httpEnabled !== undefined) {
            return siesta.ext._httpEnabled;
        }
        return !!siesta.ext.http;
    },
    set: function(v) {
        siesta.ext._httpEnabled = v;
    }
});

/**
 * Creates and registers a new Collection.
 * @param  {[type]} name
 * @param  {[type]} opts
 * @return {Collection}
 */
siesta.collection = function(name, opts) {
    return new Collection(name, opts);
};

/**
 * Sets the ajax function to use e.g. $.ajax
 * @param {Function} ajax
 * @example
 * // Use zepto instead of jQuery for http ajax requests.
 * siesta.setAjax(zepto.ajax);
 */
siesta.setAjax = function(ajax) {
    if (siesta.ext.httpEnabled) {
        siesta.ext.http.ajax = ajax;
    } else {
        throw new Error('http module not installed correctly (have you included siesta.http.js?)');
    }
};

/**
 * Returns the ajax function being used.
 * @return {Function}
 */
siesta.getAjax = function() {
    return siesta.ext.http.ajax;
};

siesta.notify = util.next;

/**
 * Returns an object whos keys map onto string constants used for log levels.
 * @type {Object}
 */
siesta.LogLevel = log.Level;

/**
 * Sets the log level for the named logger
 * @param {String} loggerName
 * @param {String} level
 *
 * @example
 * // Logger used by HTTP request/response descriptors.
 * siesta.setLogLevel('Descriptor', siesta.LogLevel.trace);
 * // Logger used by request descriptors specifically.
 * siesta.setLogLevel('RequestDescriptor', siesta.LogLevel.trace);
 * // Logger used by response descriptors specifically.
 * siesta.setLogLevel('ResponseDescriptor', siesta.LogLevel.trace);
 * // All descriptors are registered in the DescriptorRegistry.
 * siesta.setLogLevel('DescriptorRegistry', siesta.LogLevel.trace);
 * // Logger used by HTTP requests/responses.
 * siesta.setLogLevel('HTTP', siesta.LogLevel.trace);
 * // Objects are cached by local id (_id) or their remote id. This logger is used by the local object cache.
 * siesta.setLogLevel('LocalCache', siesta.LogLevel.trace);
 * // Objects are cached by local id (_id) or their remote id. This logger is used by the remote object cache.
 * siesta.setLogLevel('RemoteCache', siesta.LogLevel.trace);
 * // The logger used by change notifications.
 * siesta.setLogLevel('changes', siesta.LogLevel.trace);
 * // The logger used by the Collection class, which is used to describe a set of mappings.
 * siesta.setLogLevel('Collection', siesta.LogLevel.trace);
 * // The logger used by the Mapping class.
 * siesta.setLogLevel('Mapping', siesta.LogLevel.trace);
 * // The logger used during mapping operations, i.e. mapping data onto the object graph.
 * siesta.setLogLevel('MappingOperation', siesta.LogLevel.trace);
 * // The logger used by the SiestaModel class, which makes up the individual nodes of the object graph.
 * siesta.setLogLevel('SiestaModel', siesta.LogLevel.trace);
 * // The logger used by the performance monitoring extension (siesta.perf.js)
 * siesta.setLogLevel('Performance', siesta.LogLevel.trace);
 * // The logger used during local queries against the object graph.
 * siesta.setLogLevel('Query', siesta.LogLevel.trace);
 * siesta.setLogLevel('Store', siesta.LogLevel.trace);
 * // Much logic in Siesta is tied up in 'Operations'.
 * siesta.setLogLevel('Operation', siesta.LogLevel.trace);
 * // Siesta makes use of queues of operations for managing concurrency and concurrent operation limits.
 * siesta.setLogLevel('OperationQueue', siesta.LogLevel.trace);
 */
siesta.setLogLevel = function(loggerName, level) {
    var Logger = log.loggerWithName(loggerName);
    Logger.setLevel(level);
};



siesta.serialisers = {};
siesta.serializers = siesta.serialisers;

Object.defineProperty(siesta.serialisers, 'id', {
    get: function() {
        if (siesta.ext.httpEnabled) {
            return siesta.ext.http.Serialiser.idSerialiser;
        }
        return null;
    }
});

Object.defineProperty(siesta.serialisers, 'depth', {
    get: function() {
        if (siesta.ext.httpEnabled) {
            return siesta.ext.http.Serialiser.depthSerializer;
        }
        return null;
    }
});

// * `siesta.map` is equivalent to [_.map](http://underscorejs.org/#map)
// * `siesta.each` is equivalent to [_.each](http://underscorejs.org/#each)
// * `siesta.partial` is equivalent to [_.partial](http://underscorejs.org/#partial)
// * `siesta.bind` is equivalent to [_.bind](http://underscorejs.org/#bind)
// * `siesta.pluck` is equivalent to [_.pluck](http://underscorejs.org/#pluck)
// * `siesta.property` is equivalent to [_.property](http://underscorejs.org/#property)
// * `siesta.sortBy` is equivalent to [_.sortBy](http://underscorejs.org/#sortBy)
// * `siesta.parallel` is equivalent to [async.parallel](https://github.com/caolan/async#parallel)
// * `siesta.series` is equivalent to [async.series](https://github.com/caolan/async#series)
// * `siesta.q` is the entire [q promises library](https://github.com/kriskowal/q)

siesta.map = util._.map;
siesta.each = util._.each;
siesta.partial = util._.partial;
siesta.bind = util._.bind;
siesta.pluck = util._.pluck;
siesta.property = util._.pluck;
siesta.sortBy = util._.sortBy;
siesta.series = util.series;
siesta.parallel = util.parallel;
siesta.q = q;

// Object.defineProperty(siesta, 'isDirty', {
//     get: function() {
//         return Collection.isDirty
//     },
//     configurable: true,
//     enumerable: true
// });

if (typeof window != 'undefined') {
    window.siesta = siesta;
}

exports.siesta = siesta;
},{"./src/cache":43,"./src/changes":44,"./src/collection":45,"./src/collectionRegistry":46,"./src/error":47,"./src/mapping":49,"./src/misc":51,"./src/notificationCentre":52,"./src/object":53,"./src/query":57,"./src/relationship":58,"./src/store":59,"./src/util":60,"./vendor/operations.js/src/log":107,"./vendor/operations.js/src/operation":108,"./vendor/operations.js/src/queue":109,"extend":41,"q":42}],2:[function(require,module,exports){
(function (process){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
/*jshint onevar: false, indent:4 */
/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    var _each = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    }
    else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = function (fn) {
              // not a direct alias for IE10 compatibility
              setImmediate(fn);
            };
        }
        else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(done) );
        });
        function done(err) {
          if (err) {
              callback(err);
              callback = function () {};
          }
          else {
              completed += 1;
              if (completed >= arr.length) {
                  callback();
              }
          }
        }
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback();
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        if (!callback) {
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err) {
                    callback(err);
                });
            });
        } else {
            var results = [];
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err, v) {
                    results[x.index] = v;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        var remainingTasks = keys.length
        if (!remainingTasks) {
            return callback();
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            remainingTasks--
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (!remainingTasks) {
                var theCallback = callback;
                // prevent final callback from calling itself if it errors
                callback = function () {};

                theCallback(null, results);
            }
        });

        _each(keys, function (k) {
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var attempts = [];
        // Use defaults if times not passed
        if (typeof times === 'function') {
            callback = task;
            task = times;
            times = DEFAULT_TIMES;
        }
        // Make sure times is a number
        times = parseInt(times, 10) || DEFAULT_TIMES;
        var wrappedTask = function(wrappedCallback, wrappedResults) {
            var retryAttempt = function(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            };
            while (times) {
                attempts.push(retryAttempt(task, !(times-=1)));
            }
            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || callback)(data.err, data.result);
            });
        }
        // If a callback is passed, run this as a controll flow
        return callback ? wrappedTask() : wrappedTask
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!_isArray(tasks)) {
          var err = new Error('First argument to waterfall must be an array of functions');
          return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (test.apply(null, args)) {
                async.doWhilst(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (!test.apply(null, args)) {
                async.doUntil(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            started: false,
            paused: false,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            kill: function () {
              q.drain = null;
              q.tasks = [];
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (!q.paused && workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                if (q.paused === true) { return; }
                q.paused = true;
                q.process();
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                q.process();
            }
        };
        return q;
    };
    
    async.priorityQueue = function (worker, concurrency) {
        
        function _compareTasks(a, b){
          return a.priority - b.priority;
        };
        
        function _binarySearch(sequence, item, compare) {
          var beg = -1,
              end = sequence.length - 1;
          while (beg < end) {
            var mid = beg + ((end - beg + 1) >>> 1);
            if (compare(item, sequence[mid]) >= 0) {
              beg = mid;
            } else {
              end = mid - 1;
            }
          }
          return beg;
        }
        
        function _insert(q, data, priority, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  priority: priority,
                  callback: typeof callback === 'function' ? callback : null
              };
              
              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }
        
        // Start with a normal queue
        var q = async.queue(worker, concurrency);
        
        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
          _insert(q, data, priority, callback);
        };
        
        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            drained: true,
            push: function (data, callback) {
                if (!_isArray(data)) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    cargo.drained = false;
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain && !cargo.drained) cargo.drain();
                    cargo.drained = true;
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0, tasks.length);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                async.nextTick(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    async.compose = function (/* functions... */) {
      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };

    var _applyEach = function (eachfn, fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // Node.js
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define !== 'undefined' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

}).call(this,require('_process'))
},{"_process":8}],3:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":4,"ieee754":5,"is-array":6}],4:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],5:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],6:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],9:[function(require,module,exports){
module.exports = require('./lib/chai');

},{"./lib/chai":10}],10:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = []
  , exports = module.exports = {};

/*!
 * Chai version
 */

exports.version = '1.9.2';

/*!
 * Assertion Error
 */

exports.AssertionError = require('assertion-error');

/*!
 * Utils for plugins (not exported)
 */

var util = require('./chai/utils');

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(this, util);
    used.push(fn);
  }

  return this;
};

/*!
 * Configuration
 */

var config = require('./chai/config');
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = require('./chai/assertion');
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = require('./chai/core/assertions');
exports.use(core);

/*!
 * Expect interface
 */

var expect = require('./chai/interface/expect');
exports.use(expect);

/*!
 * Should interface
 */

var should = require('./chai/interface/should');
exports.use(should);

/*!
 * Assert interface
 */

var assert = require('./chai/interface/assert');
exports.use(assert);

},{"./chai/assertion":11,"./chai/config":12,"./chai/core/assertions":13,"./chai/interface/assert":14,"./chai/interface/expect":15,"./chai/interface/should":16,"./chai/utils":27,"assertion-error":36}],11:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('./config');

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * @api private
   */

  function Assertion (obj, msg, stack) {
    flag(this, 'ssfi', stack || arguments.callee);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /*!
   * ### .assert(expression, message, negateMessage, expected, actual)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String or Function} message or function that returns message to display if fails
   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (true !== showDiff) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      var msg = util.getMessage(this, arguments)
        , actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};

},{"./config":12}],12:[function(require,module,exports){
module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

   includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded,
   * the value is truncated.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40

};

},{}],13:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , toString = Object.prototype.toString
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to
   * improve the readability of your assertions. They
   * do not provide testing capabilities unless they
   * have been overwritten by a plugin.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   *
   * @name language chains
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'at'
  , 'of', 'same' ].forEach(function (chain) {
    Assertion.addProperty(chain, function () {
      return this;
    });
  });

  /**
   * ### .not
   *
   * Negates any of assertions following in the chain.
   *
   *     expect(foo).to.not.equal('bar');
   *     expect(goodFn).to.not.throw(Error);
   *     expect({ foo: 'baz' }).to.have.property('foo')
   *       .and.not.equal('bar');
   *
   * @name not
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Sets the `deep` flag, later used by the `equal` and
   * `property` assertions.
   *
   *     expect(foo).to.deep.equal({ bar: 'baz' });
   *     expect({ foo: { bar: { baz: 'quux' } } })
   *       .to.have.deep.property('foo.bar.baz', 'quux');
   *
   * @name deep
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .a(type)
   *
   * The `a` and `an` assertions are aliases that can be
   * used either as language chains or to assert a value's
   * type.
   *
   *     // typeof
   *     expect('test').to.be.a('string');
   *     expect({ foo: 'bar' }).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *
   *     // language chain
   *     expect(foo).to.be.an.instanceof(Foo);
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} message _optional_
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj)
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(value)
   *
   * The `include` and `contain` assertions can be used as either property
   * based language chains or as methods to assert the inclusion of an object
   * in an array or a substring in a string. When used as language chains,
   * they toggle the `contain` flag for the `keys` assertion.
   *
   *     expect([1,2,3]).to.include(2);
   *     expect('foobar').to.contain('foo');
   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
   *
   * @name include
   * @alias contain
   * @param {Object|String|Number} obj
   * @param {String} message _optional_
   * @api public
   */

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var expected = false;
    if (_.type(obj) === 'array' && _.type(val) === 'object') {
      for (var i in obj) {
        if (_.eql(obj[i], val)) {
          expected = true;
          break;
        }
      }
    } else if (_.type(val) === 'object') {
      if (!flag(this, 'negate')) {
        for (var k in val) new Assertion(obj).property(k, val[k]);
        return;
      }
      var subset = {}
      for (var k in val) subset[k] = obj[k]
      expected = _.eql(subset, val);
    } else {
      expected = obj && ~obj.indexOf(val)
    }
    this.assert(
        expected
      , 'expected #{this} to include ' + _.inspect(val)
      , 'expected #{this} to not include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is truthy.
   *
   *     expect('everthing').to.be.ok;
   *     expect(1).to.be.ok;
   *     expect(false).to.not.be.ok;
   *     expect(undefined).to.not.be.ok;
   *     expect(null).to.not.be.ok;
   *
   * @name ok
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is `true`.
   *
   *     expect(true).to.be.true;
   *     expect(1).to.not.be.true;
   *
   * @name true
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , this.negate ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is `false`.
   *
   *     expect(false).to.be.false;
   *     expect(0).to.not.be.false;
   *
   * @name false
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , this.negate ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is `null`.
   *
   *     expect(null).to.be.null;
   *     expect(undefined).not.to.be.null;
   *
   * @name null
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *     expect(null).to.not.be.undefined;
   *
   * @name undefined
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi'
   *       , bar = null
   *       , baz;
   *
   *     expect(foo).to.exist;
   *     expect(bar).to.not.exist;
   *     expect(baz).to.not.exist;
   *
   * @name exist
   * @api public
   */

  Assertion.addProperty('exist', function () {
    this.assert(
        null != flag(this, 'object')
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });


  /**
   * ### .empty
   *
   * Asserts that the target's length is `0`. For arrays, it checks
   * the `length` property. For objects, it gets the count of
   * enumerable keys.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *     expect({}).to.be.empty;
   *
   * @name empty
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var obj = flag(this, 'object')
      , expected = obj;

    if (Array.isArray(obj) || 'string' === typeof object) {
      expected = obj.length;
    } else if (typeof obj === 'object') {
      expected = Object.keys(obj).length;
    }

    this.assert(
        !expected
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an arguments object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   * @name arguments
   * @alias Arguments
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = Object.prototype.toString.call(obj);
    this.assert(
        '[object Arguments]' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(value)
   *
   * Asserts that the target is strictly equal (`===`) to `value`.
   * Alternately, if the `deep` flag is set, asserts that
   * the target is deeply equal to `value`.
   *
   *     expect('hello').to.equal('hello');
   *     expect(42).to.equal(42);
   *     expect(1).to.not.equal(true);
   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @alias deep.equal
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(value)
   *
   * Asserts that the target is deeply equal to `value`.
   *
   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(value)
   *
   * Asserts that the target is greater than `value`.
   *
   *     expect(10).to.be.above(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above ' + n
        , 'expected #{this} to be at most ' + n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(value)
   *
   * Asserts that the target is greater than or equal to `value`.
   *
   *     expect(10).to.be.at.least(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.least(2);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
   *
   * @name least
   * @alias gte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least ' + n
        , 'expected #{this} to be below ' + n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(value)
   *
   * Asserts that the target is less than `value`.
   *
   *     expect(5).to.be.below(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below ' + n
        , 'expected #{this} to be at least ' + n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(value)
   *
   * Asserts that the target is less than or equal to `value`.
   *
   *     expect(5).to.be.at.most(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.most(4);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
   *
   * @name most
   * @alias lte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most ' + n
        , 'expected #{this} to be above ' + n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish)
   *
   * Asserts that the target is within a range.
   *
   *     expect(7).to.be.within(5,10);
   *
   * Can also be used in conjunction with `length` to
   * assert a length range. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name within
   * @param {Number} start lowerbound inclusive
   * @param {Number} finish upperbound inclusive
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , range = start + '..' + finish;
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor)
   *
   * Asserts that the target is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , Chai = new Tea('chai');
   *
   *     expect(Chai).to.be.an.instanceof(Tea);
   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} message _optional_
   * @alias instanceOf
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var name = _.getName(constructor);
    this.assert(
        flag(this, 'object') instanceof constructor
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name, [value])
   *
   * Asserts that the target has a property `name`, optionally asserting that
   * the value of that property is strictly equal to  `value`.
   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
   * references into objects and arrays.
   *
   *     // simple referencing
   *     var obj = { foo: 'bar' };
   *     expect(obj).to.have.property('foo');
   *     expect(obj).to.have.property('foo', 'bar');
   *
   *     // deep referencing
   *     var deepObj = {
   *         green: { tea: 'matcha' }
   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
   *     };

   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
   *
   * You can also use an array as the starting point of a `deep.property`
   * assertion, or traverse nested arrays.
   *
   *     var arr = [
   *         [ 'chai', 'matcha', 'konacha' ]
   *       , [ { tea: 'chai' }
   *         , { tea: 'matcha' }
   *         , { tea: 'konacha' } ]
   *     ];
   *
   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
   *
   * Furthermore, `property` changes the subject of the assertion
   * to be the value of that property from the original object. This
   * permits for further chainable assertions on that property.
   *
   *     expect(obj).to.have.property('foo')
   *       .that.is.a('string');
   *     expect(deepObj).to.have.property('green')
   *       .that.is.an('object')
   *       .that.deep.equals({ tea: 'matcha' });
   *     expect(deepObj).to.have.property('teas')
   *       .that.is.an('array')
   *       .with.deep.property('[2]')
   *         .that.deep.equals({ tea: 'konacha' });
   *
   * @name property
   * @alias deep.property
   * @param {String} name
   * @param {Mixed} value (optional)
   * @param {String} message _optional_
   * @returns value of property for chaining
   * @api public
   */

  Assertion.addMethod('property', function (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '
      , negate = flag(this, 'negate')
      , obj = flag(this, 'object')
      , value = flag(this, 'deep')
        ? _.getPathValue(name, obj)
        : obj[name];

    if (negate && undefined !== val) {
      if (undefined === value) {
        msg = (msg != null) ? msg + ': ' : '';
        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
      }
    } else {
      this.assert(
          undefined !== value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (undefined !== val) {
      this.assert(
          val === value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  });


  /**
   * ### .ownProperty(name)
   *
   * Asserts that the target has an own property `name`.
   *
   *     expect('test').to.have.ownProperty('length');
   *
   * @name ownProperty
   * @alias haveOwnProperty
   * @param {String} name
   * @param {String} message _optional_
   * @api public
   */

  function assertOwnProperty (name, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        obj.hasOwnProperty(name)
      , 'expected #{this} to have own property ' + _.inspect(name)
      , 'expected #{this} to not have own property ' + _.inspect(name)
    );
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .length(value)
   *
   * Asserts that the target's `length` property has
   * the expected value.
   *
   *     expect([ 1, 2, 3]).to.have.length(3);
   *     expect('foobar').to.have.length(6);
   *
   * Can also be used as a chain precursor to a value
   * comparison for the length property.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name length
   * @alias lengthOf
   * @param {Number} length
   * @param {String} message _optional_
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addMethod('lengthOf', assertLength);

  /**
   * ### .match(regexp)
   *
   * Asserts that the target matches a regular expression.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * @name match
   * @param {RegExp} RegularExpression
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('match', function (re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  });

  /**
   * ### .string(string)
   *
   * Asserts that the string target contains another string.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * @name string
   * @param {String} string
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });


  /**
   * ### .keys(key1, [key2], [...])
   *
   * Asserts that the target has exactly the given keys, or
   * asserts the inclusion of some keys when using the
   * `include` or `contain` modifiers.
   *
   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');
   *
   * @name keys
   * @alias key
   * @param {String...|Array} keys
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , str
      , ok = true;

    keys = keys instanceof Array
      ? keys
      : Array.prototype.slice.call(arguments);

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(obj)
      , expected = keys
      , len = keys.length;

    // Inclusion
    ok = keys.every(function(key){
      return ~actual.indexOf(key);
    });

    // Strict
    if (!flag(this, 'negate') && !flag(this, 'contains')) {
      ok = ok && keys.length == actual.length;
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key){
        return _.inspect(key);
      });
      var last = keys.pop();
      str = keys.join(', ') + ', and ' + last;
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + str
      , 'expected #{this} to not ' + str
      , expected.sort()
      , actual.sort()
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw(constructor)
   *
   * Asserts that the function target will throw a specific error, or specific type of error
   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
   * for the error's message.
   *
   *     var err = new ReferenceError('This is a bad function.');
   *     var fn = function () { throw err; }
   *     expect(fn).to.throw(ReferenceError);
   *     expect(fn).to.throw(Error);
   *     expect(fn).to.throw(/bad function/);
   *     expect(fn).to.not.throw('good function');
   *     expect(fn).to.throw(ReferenceError, /bad function/);
   *     expect(fn).to.throw(err);
   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
   *
   * Please note that when a throw expectation is negated, it will check each
   * parameter independently, starting with error constructor type. The appropriate way
   * to check for the existence of a type of error but for a message that does not match
   * is to use `and`.
   *
   *     expect(fn).to.throw(ReferenceError)
   *        .and.not.throw(/good function/);
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {ErrorConstructor} constructor
   * @param {String|RegExp} expected error message
   * @param {String} message _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @api public
   */

  function assertThrows (constructor, errMsg, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('function');

    var thrown = false
      , desiredError = null
      , name = null
      , thrownError = null;

    if (arguments.length === 0) {
      errMsg = null;
      constructor = null;
    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
      errMsg = constructor;
      constructor = null;
    } else if (constructor && constructor instanceof Error) {
      desiredError = constructor;
      constructor = null;
      errMsg = null;
    } else if (typeof constructor === 'function') {
      name = constructor.prototype.name || constructor.name;
      if (name === 'Error' && constructor !== Error) {
        name = (new constructor()).name;
      }
    } else {
      constructor = null;
    }

    try {
      obj();
    } catch (err) {
      // first, check desired error
      if (desiredError) {
        this.assert(
            err === desiredError
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}'
          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
          , (err instanceof Error ? err.toString() : err)
        );

        flag(this, 'object', err);
        return this;
      }

      // next, check constructor
      if (constructor) {
        this.assert(
            err instanceof constructor
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
          , name
          , (err instanceof Error ? err.toString() : err)
        );

        if (!errMsg) {
          flag(this, 'object', err);
          return this;
        }
      }

      // next, check message
      var message = 'object' === _.type(err) && "message" in err
        ? err.message
        : '' + err;

      if ((message != null) && errMsg && errMsg instanceof RegExp) {
        this.assert(
            errMsg.exec(message)
          , 'expected #{this} to throw error matching #{exp} but got #{act}'
          , 'expected #{this} to throw error not matching #{exp}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
        this.assert(
            ~message.indexOf(errMsg)
          , 'expected #{this} to throw error including #{exp} but got #{act}'
          , 'expected #{this} to throw error not including #{act}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else {
        thrown = true;
        thrownError = err;
      }
    }

    var actuallyGot = ''
      , expectedThrown = name !== null
        ? name
        : desiredError
          ? '#{exp}' //_.inspect(desiredError)
          : 'an error';

    if (thrown) {
      actuallyGot = ' but #{act} was thrown'
    }

    this.assert(
        thrown === true
      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
    );

    flag(this, 'object', thrownError);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method)
   *
   * Asserts that the object or class target will respond to a method.
   *
   *     Klass.prototype.bar = function(){};
   *     expect(Klass).to.respondTo('bar');
   *     expect(obj).to.respondTo('bar');
   *
   * To check if a constructor will respond to a static function,
   * set the `itself` flag.
   *
   *     Klass.baz = function(){};
   *     expect(Klass).itself.to.respondTo('baz');
   *
   * @name respondTo
   * @param {String} method
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('respondTo', function (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === _.type(obj) && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  });

  /**
   * ### .itself
   *
   * Sets the `itself` flag, later used by the `respondTo` assertion.
   *
   *     function Foo() {}
   *     Foo.bar = function() {}
   *     Foo.prototype.baz = function() {}
   *
   *     expect(Foo).itself.to.respondTo('bar');
   *     expect(Foo).itself.not.to.respondTo('baz');
   *
   * @name itself
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(method)
   *
   * Asserts that the target passes a given truth test.
   *
   *     expect(1).to.satisfy(function(num) { return num > 0; });
   *
   * @name satisfy
   * @param {Function} matcher
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('satisfy', function (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , this.negate ? false : true
      , result
    );
  });

  /**
   * ### .closeTo(expected, delta)
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *
   * @name closeTo
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('closeTo', function (expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj, msg).is.a('number');
    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
      throw new Error('the arguments to closeTo must be numbers');
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  });

  function isSubsetOf(subset, superset, cmp) {
    return subset.every(function(elem) {
      if (!cmp) return superset.indexOf(elem) !== -1;

      return superset.some(function(elem2) {
        return cmp(elem, elem2);
      });
    })
  }

  /**
   * ### .members(set)
   *
   * Asserts that the target is a superset of `set`,
   * or that the target and `set` have the same strictly-equal (===) members.
   * Alternately, if the `deep` flag is set, set members are compared for deep
   * equality.
   *
   *     expect([1, 2, 3]).to.include.members([3, 2]);
   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
   *
   *     expect([4, 2]).to.have.members([2, 4]);
   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
   *
   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
   *
   * @name members
   * @param {Array} set
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj).to.be.an('array');
    new Assertion(subset).to.be.an('array');

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    if (flag(this, 'contains')) {
      return this.assert(
          isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to be a superset of #{act}'
        , 'expected #{this} to not be a superset of #{act}'
        , obj
        , subset
      );
    }

    this.assert(
        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to have the same members as #{act}'
        , 'expected #{this} to not have the same members as #{act}'
        , obj
        , subset
    );
  });
};

},{}],14:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .ok(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.ok('everything', 'everything is ok');
   *     assert.ok(false, 'this will fail');
   *
   * @name ok
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.ok = function (val, msg) {
    new Assertion(val, msg).is.ok;
  };

  /**
   * ### .notOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.notOk('everything', 'this will fail');
   *     assert.notOk(false, 'this will pass');
   *
   * @name notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.notOk = function (val, msg) {
    new Assertion(val, msg).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.deepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.eql(exp);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg).is['true'];
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg).is['false'];
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg).to.not.equal(null);
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object (as revealed by
   * `Object.prototype.toString`).
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object.
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('number');
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Works
   * for strings and arrays.
   *
   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Works
   * for strings and arrays.
   *i
   *     assert.notInclude('foobar', 'baz', 'string not include substring');
   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude).not.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.property(prop);
  };

  /**
   * ### .deepProperty(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`, which can be a
   * string using dot- and bracket-notation for deep reference.
   *
   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name deepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.deepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop);
  };

  /**
   * ### .notDeepProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for deep reference.
   *
   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notDeepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notDeepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`.
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.property(prop, val);
  };

  /**
   * ### .propertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`.
   *
   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
   *
   * @name propertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for deep
   * reference.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop, val);
  };

  /**
   * ### .deepPropertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`. `property` can use dot- and
   * bracket-notation for deep reference.
   *
   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *
   * @name deepPropertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
  };

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 5, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg).to.have.length(len);
  };

  /**
   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
   *
   * Asserts that `function` will throw an error that is an instance of
   * `constructor`, or alternately that it will throw an error with message
   * matching `regexp`.
   *
   *     assert.throw(fn, 'function throws a reference error');
   *     assert.throw(fn, /function throws a reference error/);
   *     assert.throw(fn, ReferenceError);
   *     assert.throw(fn, ReferenceError, 'function throws a reference error');
   *     assert.throw(fn, ReferenceError, /function throws a reference error/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.Throw = function (fn, errt, errs, msg) {
    if ('string' === typeof errt || errt instanceof RegExp) {
      errs = errt;
      errt = null;
    }

    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(function, [constructor/regexp], [message])
   *
   * Asserts that `function` will _not_ throw an error that is an instance of
   * `constructor`, or alternately that it will not throw an error with message
   * matching `regexp`.
   *
   *     assert.doesNotThrow(fn, Error, 'function does not throw');
   *
   * @name doesNotThrow
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.doesNotThrow = function (fn, type, msg) {
    if ('string' === typeof type) {
      msg = type;
      type = null;
    }

    new Assertion(fn, msg).to.not.Throw(type);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {
      throw new Error('Invalid operator "' + operator + '"');
    }
    var test = new Assertion(eval(val + operator + val2), msg);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.closeTo(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members.
   * Order is not taken into account.
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset`.
   * Order is not taken into account.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.members(subset);
  }

  /*!
   * Undocumented / untested
   */

  assert.ifError = function (val, msg) {
    new Assertion(val, msg).to.not.be.ok;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('Throw', 'throw')
  ('Throw', 'throws');
};

},{}],15:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };
};


},{}],16:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number) {
        return new Assertion(this.constructor(this), null, shouldGetter);
      } else if (this instanceof Boolean) {
        return new Assertion(this == true, null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};

},{}],17:[function(require,module,exports){
/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var transferFlags = require('./transferFlags');
var flag = require('./flag');
var config = require('../config');

/*!
 * Module variables
 */

// Check whether `__proto__` is supported
var hasProtoSupport = '__proto__' in Object;

// Without `__proto__` support, this module will need to add properties to a function.
// However, some Function.prototype methods cannot be overwritten,
// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
var excludeNames = /^(?:length|name|arguments|caller)$/;

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### addChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @name addChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function () {
        chainableBehavior.chainingBehavior.call(this);

        var assert = function assert() {
          var old_ssfi = flag(this, 'ssfi');
          if (old_ssfi && config.includeStack === false)
            flag(this, 'ssfi', assert);
          var result = chainableBehavior.method.apply(this, arguments);
          return result === undefined ? this : result;
        };

        // Use `__proto__` if available
        if (hasProtoSupport) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = assert.__proto__ = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (!excludeNames.test(asserterName)) {
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(assert, asserterName, pd);
            }
          });
        }

        transferFlags(this, assert);
        return assert;
      }
    , configurable: true
  });
};

},{"../config":12,"./flag":20,"./transferFlags":34}],18:[function(require,module,exports){
/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('../config');

/**
 * ### .addMethod (ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @name addMethod
 * @api public
 */
var flag = require('./flag');

module.exports = function (ctx, name, method) {
  ctx[name] = function () {
    var old_ssfi = flag(this, 'ssfi');
    if (old_ssfi && config.includeStack === false)
      flag(this, 'ssfi', ctx[name]);
    var result = method.apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{"../config":12,"./flag":20}],19:[function(require,module,exports){
/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### addProperty (ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @name addProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter.call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],20:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### flag(object ,key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object (constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @name flag
 * @api private
 */

module.exports = function (obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};

},{}],21:[function(require,module,exports){
/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};

},{}],22:[function(require,module,exports){
/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};

},{}],23:[function(require,module,exports){
/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag')
  , getActual = require('./getActual')
  , inspect = require('./inspect')
  , objDisplay = require('./objDisplay');

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @name getMessage
 * @api public
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#{this}/g, objDisplay(val))
    .replace(/#{act}/g, objDisplay(actual))
    .replace(/#{exp}/g, objDisplay(expected));

  return flagMsg ? flagMsg + ': ' + msg : msg;
};

},{"./flag":20,"./getActual":21,"./inspect":28,"./objDisplay":29}],24:[function(require,module,exports){
/*!
 * Chai - getName utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getName(func)
 *
 * Gets the name of a function, in a cross-browser way.
 *
 * @param {Function} a function (usually a constructor)
 */

module.exports = function (func) {
  if (func.name) return func.name;

  var match = /^\s?function ([^(]*)\(/.exec(func);
  return match && match[1] ? match[1] : "";
};

},{}],25:[function(require,module,exports){
/*!
 * Chai - getPathValue utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .getPathValue(path, object)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue('prop1.str', obj); // Hello
 *     getPathValue('prop1.att[2]', obj); // b
 *     getPathValue('prop2.arr[0].nested', obj); // Universe
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} value or `undefined`
 * @name getPathValue
 * @api public
 */

var getPathValue = module.exports = function (path, obj) {
  var parsed = parsePath(path);
  return _getPathValue(parsed, obj);
};

/*!
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `_getPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be as near infinitely deep and nested
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath (path) {
  var str = path.replace(/\[/g, '.[')
    , parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function (value) {
    var re = /\[(\d+)\]$/
      , mArr = re.exec(value)
    if (mArr) return { i: parseFloat(mArr[1]) };
    else return { p: value };
  });
};

/*!
 * ## _getPathValue(parsed, obj)
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(parsed, obj);
 *
 * @param {Object} parsed definition from `parsePath`.
 * @param {Object} object to search against
 * @returns {Object|Undefined} value
 * @api private
 */

function _getPathValue (parsed, obj) {
  var tmp = obj
    , res;
  for (var i = 0, l = parsed.length; i < l; i++) {
    var part = parsed[i];
    if (tmp) {
      if ('undefined' !== typeof part.p)
        tmp = tmp[part.p];
      else if ('undefined' !== typeof part.i)
        tmp = tmp[part.i];
      if (i == (l - 1)) res = tmp;
    } else {
      res = undefined;
    }
  }
  return res;
};

},{}],26:[function(require,module,exports){
/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(subject);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(subject);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};

},{}],27:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Main exports
 */

var exports = module.exports = {};

/*!
 * test utility
 */

exports.test = require('./test');

/*!
 * type utility
 */

exports.type = require('./type');

/*!
 * message utility
 */

exports.getMessage = require('./getMessage');

/*!
 * actual utility
 */

exports.getActual = require('./getActual');

/*!
 * Inspect util
 */

exports.inspect = require('./inspect');

/*!
 * Object Display util
 */

exports.objDisplay = require('./objDisplay');

/*!
 * Flag utility
 */

exports.flag = require('./flag');

/*!
 * Flag transferring utility
 */

exports.transferFlags = require('./transferFlags');

/*!
 * Deep equal utility
 */

exports.eql = require('deep-eql');

/*!
 * Deep path value
 */

exports.getPathValue = require('./getPathValue');

/*!
 * Function name
 */

exports.getName = require('./getName');

/*!
 * add Property
 */

exports.addProperty = require('./addProperty');

/*!
 * add Method
 */

exports.addMethod = require('./addMethod');

/*!
 * overwrite Property
 */

exports.overwriteProperty = require('./overwriteProperty');

/*!
 * overwrite Method
 */

exports.overwriteMethod = require('./overwriteMethod');

/*!
 * Add a chainable method
 */

exports.addChainableMethod = require('./addChainableMethod');

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = require('./overwriteChainableMethod');


},{"./addChainableMethod":17,"./addMethod":18,"./addProperty":19,"./flag":20,"./getActual":21,"./getMessage":23,"./getName":24,"./getPathValue":25,"./inspect":28,"./objDisplay":29,"./overwriteChainableMethod":30,"./overwriteMethod":31,"./overwriteProperty":32,"./test":33,"./transferFlags":34,"./type":35,"deep-eql":37}],28:[function(require,module,exports){
// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = require('./getName');
var getProperties = require('./getProperties');
var getEnumerableProperties = require('./getEnumerableProperties');

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      var name = getName(value);
      var nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    var name = getName(value);
    var nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str;
  if (value.__lookupGetter__) {
    if (value.__lookupGetter__(key)) {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"./getEnumerableProperties":22,"./getName":24,"./getProperties":26}],29:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = require('./inspect');
var config = require('../config');

/**
 * ### .objDisplay (object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @api public
 */

module.exports = function (obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};

},{"../config":12,"./inspect":28}],30:[function(require,module,exports){
/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteChainableMethod (ctx, name, fn)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.length(3);
 *     expect(myFoo).to.have.length.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function () {
    var result = chainingBehavior(_chainingBehavior).call(this);
    return result === undefined ? this : result;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function () {
    var result = method(_method).apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{}],31:[function(require,module,exports){
/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteMethod (ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @name overwriteMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  var _method = ctx[name]
    , _super = function () { return this; };

  if (_method && 'function' === typeof _method)
    _super = _method;

  ctx[name] = function () {
    var result = method(_super).apply(this, arguments);
    return result === undefined ? this : result;
  }
};

},{}],32:[function(require,module,exports){
/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteProperty (ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @name overwriteProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter(_super).call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],33:[function(require,module,exports){
/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag');

/**
 * # test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};

},{"./flag":20}],34:[function(require,module,exports){
/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, and `message`)
 * will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags too; usually a new assertion
 * @param {Boolean} includeAll
 * @name getAllFlags
 * @api private
 */

module.exports = function (assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};

},{}],35:[function(require,module,exports){
/*!
 * Chai - type utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Arguments]': 'arguments'
  , '[object Array]': 'array'
  , '[object Date]': 'date'
  , '[object Function]': 'function'
  , '[object Number]': 'number'
  , '[object RegExp]': 'regexp'
  , '[object String]': 'string'
};

/**
 * ### type(object)
 *
 * Better implementation of `typeof` detection that can
 * be used cross-browser. Handles the inconsistencies of
 * Array, `null`, and `undefined` detection.
 *
 *     utils.type({}) // 'object'
 *     utils.type(null) // `null'
 *     utils.type(undefined) // `undefined`
 *     utils.type([]) // `array`
 *
 * @param {Mixed} object to detect type of
 * @name type
 * @api private
 */

module.exports = function (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
};

},{}],36:[function(require,module,exports){
/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || arguments.callee;
  if (ssf && Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};

},{}],37:[function(require,module,exports){
module.exports = require('./lib/eql');

},{"./lib/eql":38}],38:[function(require,module,exports){
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var type = require('type-detect');

/*!
 * Buffer.isBuffer browser shim
 */

var Buffer;
try { Buffer = require('buffer').Buffer; }
catch(ex) {
  Buffer = {};
  Buffer.isBuffer = function() { return false; }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;

/**
 * Assert super-strict (egal) equality between
 * two objects of any type.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @param {Array} memoised (optional)
 * @return {Boolean} equal match
 */

function deepEqual(a, b, m) {
  if (sameValue(a, b)) {
    return true;
  } else if ('date' === type(a)) {
    return dateEqual(a, b);
  } else if ('regexp' === type(a)) {
    return regexpEqual(a, b);
  } else if (Buffer.isBuffer(a)) {
    return bufferEqual(a, b);
  } else if ('arguments' === type(a)) {
    return argumentsEqual(a, b, m);
  } else if (!typeEqual(a, b)) {
    return false;
  } else if (('object' !== type(a) && 'object' !== type(b))
  && ('array' !== type(a) && 'array' !== type(b))) {
    return sameValue(a, b);
  } else {
    return objectEqual(a, b, m);
  }
}

/*!
 * Strict (egal) equality test. Ensures that NaN always
 * equals NaN and `-0` does not equal `+0`.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} equal match
 */

function sameValue(a, b) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  return a !== a && b !== b;
}

/*!
 * Compare the types of two given objects and
 * return if they are equal. Note that an Array
 * has a type of `array` (not `object`) and arguments
 * have a type of `arguments` (not `array`/`object`).
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function typeEqual(a, b) {
  return type(a) === type(b);
}

/*!
 * Compare two Date objects by asserting that
 * the time values are equal using `saveValue`.
 *
 * @param {Date} a
 * @param {Date} b
 * @return {Boolean} result
 */

function dateEqual(a, b) {
  if ('date' !== type(b)) return false;
  return sameValue(a.getTime(), b.getTime());
}

/*!
 * Compare two regular expressions by converting them
 * to string and checking for `sameValue`.
 *
 * @param {RegExp} a
 * @param {RegExp} b
 * @return {Boolean} result
 */

function regexpEqual(a, b) {
  if ('regexp' !== type(b)) return false;
  return sameValue(a.toString(), b.toString());
}

/*!
 * Assert deep equality of two `arguments` objects.
 * Unfortunately, these must be sliced to arrays
 * prior to test to ensure no bad behavior.
 *
 * @param {Arguments} a
 * @param {Arguments} b
 * @param {Array} memoize (optional)
 * @return {Boolean} result
 */

function argumentsEqual(a, b, m) {
  if ('arguments' !== type(b)) return false;
  a = [].slice.call(a);
  b = [].slice.call(b);
  return deepEqual(a, b, m);
}

/*!
 * Get enumerable properties of a given object.
 *
 * @param {Object} a
 * @return {Array} property names
 */

function enumerable(a) {
  var res = [];
  for (var key in a) res.push(key);
  return res;
}

/*!
 * Simple equality for flat iterable objects
 * such as Arrays or Node.js buffers.
 *
 * @param {Iterable} a
 * @param {Iterable} b
 * @return {Boolean} result
 */

function iterableEqual(a, b) {
  if (a.length !==  b.length) return false;

  var i = 0;
  var match = true;

  for (; i < a.length; i++) {
    if (a[i] !== b[i]) {
      match = false;
      break;
    }
  }

  return match;
}

/*!
 * Extension to `iterableEqual` specifically
 * for Node.js Buffers.
 *
 * @param {Buffer} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function bufferEqual(a, b) {
  if (!Buffer.isBuffer(b)) return false;
  return iterableEqual(a, b);
}

/*!
 * Block for `objectEqual` ensuring non-existing
 * values don't get in.
 *
 * @param {Mixed} object
 * @return {Boolean} result
 */

function isValue(a) {
  return a !== null && a !== undefined;
}

/*!
 * Recursively check the equality of two objects.
 * Once basic sameness has been established it will
 * defer to `deepEqual` for each enumerable key
 * in the object.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function objectEqual(a, b, m) {
  if (!isValue(a) || !isValue(b)) {
    return false;
  }

  if (a.prototype !== b.prototype) {
    return false;
  }

  var i;
  if (m) {
    for (i = 0; i < m.length; i++) {
      if ((m[i][0] === a && m[i][1] === b)
      ||  (m[i][0] === b && m[i][1] === a)) {
        return true;
      }
    }
  } else {
    m = [];
  }

  try {
    var ka = enumerable(a);
    var kb = enumerable(b);
  } catch (ex) {
    return false;
  }

  ka.sort();
  kb.sort();

  if (!iterableEqual(ka, kb)) {
    return false;
  }

  m.push([ a, b ]);

  var key;
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], m)) {
      return false;
    }
  }

  return true;
}

},{"buffer":3,"type-detect":39}],39:[function(require,module,exports){
module.exports = require('./lib/type');

},{"./lib/type":40}],40:[function(require,module,exports){
/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Array]': 'array'
  , '[object RegExp]': 'regexp'
  , '[object Function]': 'function'
  , '[object Arguments]': 'arguments'
  , '[object Date]': 'date'
};

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */

function getType (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library () {
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function (type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function (obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};

},{}],41:[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
var undefined;

var isPlainObject = function isPlainObject(obj) {
	"use strict";
	if (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval) {
		return false;
	}

	var has_own_constructor = hasOwn.call(obj, 'constructor');
	var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {}

	return key === undefined || hasOwn.call(obj, key);
};

module.exports = function extend() {
	"use strict";
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === "boolean") {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if (typeof target !== "object" && typeof target !== "function" || target == undefined) {
			target = {};
	}

	for (; i < length; ++i) {
		// Only deal with non-null/undefined values
		if ((options = arguments[i]) != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target === copy) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
					if (copyIsArray) {
						copyIsArray = false;
						clone = src && Array.isArray(src) ? src : [];
					} else {
						clone = src && isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[name] = extend(deep, clone, copy);

				// Don't bring in undefined values
				} else if (copy !== undefined) {
					target[name] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};


},{}],42:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    // Turn off strict mode for this function so we can assign to global.Q
    /* jshint strict: false */

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else {
        Q = definition();
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;

    function flush() {
        /* jshint loopfunc: true */

        while (head.next) {
            head = head.next;
            var task = head.task;
            head.task = void 0;
            var domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }

            try {
                task();

            } catch (e) {
                if (isNodeJS) {
                    // In node, uncaught exceptions are considered fatal errors.
                    // Re-throw them synchronously to interrupt flushing!

                    // Ensure continuation if the uncaught exception is suppressed
                    // listening "uncaughtException" events (as domains does).
                    // Continue in next event to avoid tick recursion.
                    if (domain) {
                        domain.exit();
                    }
                    setTimeout(flush, 0);
                    if (domain) {
                        domain.enter();
                    }

                    throw e;

                } else {
                    // In browsers, uncaught exceptions are not fatal.
                    // Re-throw them asynchronously to avoid slow-downs.
                    setTimeout(function() {
                       throw e;
                    }, 0);
                }
            }

            if (domain) {
                domain.exit();
            }
        }

        flushing = false;
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process !== "undefined" && process.nextTick) {
        // Node.js before 0.9. Note that some fake-Node environments, like the
        // Mocha test runner, introduce a `process` global without a `nextTick`.
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }

    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (isPromise(value)) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become fulfilled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be fulfilled
 */
Q.race = race;
function race(answerPs) {
    return promise(function(resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function(answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return isObject(object) &&
        typeof object.promiseDispatch === "function" &&
        typeof object.inspect === "function";
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return result.value;
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return exception.value;
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var countDown = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++countDown;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--countDown === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (countDown === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {String} custom error message (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, message) {
    return Q(object).timeout(ms, message);
};

Promise.prototype.timeout = function (ms, message) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))
},{"_process":8}],43:[function(require,module,exports){
/**
 * This is an in-memory cache for models. Models are cached by local id (_id) and remote id (defined by the mapping).
 * Lookups are performed against the cache when mapping.
 * @module cache
 */
var log = require('../vendor/operations.js/src/log');
var LocalCacheLogger = log.loggerWithName('LocalCache');
LocalCacheLogger.setLevel(log.Level.warn);
var RemoteCacheLogger = log.loggerWithName('RemoteCache');
RemoteCacheLogger.setLevel(log.Level.warn);
var InternalSiestaError = require('./error').InternalSiestaError;
var util = require('./util');


var localCacheById = {};
var localCache = {};


var remoteCache = {};

function reset() {
    remoteCache = {};
    localCacheById = {};
    localCache = {};
}

reset();

/**
 * Return the object in the cache given a local id (_id)
 * @param  {String} localId
 * @return {SiestaModel}
 */
function getViaLocalId(localId) {
    var obj = localCacheById[localId];
    if (obj) {
        if (LocalCacheLogger.debug.isEnabled)
            LocalCacheLogger.debug('Local cache hit: ' + obj._dump(true));
    } else {
        if (LocalCacheLogger.debug.isEnabled)
            LocalCacheLogger.debug('Local cache miss: ' + localId);
    }
    return obj;
}

/**
 * Return the singleton object given a singleton mapping.
 * @param  {Mapping} mapping
 * @return {SiestaModel}
 */
function getSingleton(mapping) {
    var mappingName = mapping.type;
    var collectionName = mapping.collection;
    var collectionCache = localCache[collectionName];
    if (collectionCache) {
        var typeCache = collectionCache[mappingName];
        if (typeCache) {
            var objs = [];
            for (var prop in typeCache) {
                if (typeCache.hasOwnProperty(prop)) {
                    objs.push(typeCache[prop]);
                }
            }
            if (objs.length > 1) {
                throw new InternalSiestaError('A singleton mapping has more than 1 object in the cache! This is a serious error. ' +
                    'Either a mapping has been modified after objects have already been created, or something has gone' +
                    'very wrong. Please file a bug report if the latter.');
            } else if (objs.length) {
                return objs[0];
            }
        }
    }
    return null;
}

/**
 * Given a remote identifier and an options object that describes mapping/collection,
 * return the model if cached.
 * @param  {String} remoteId
 * @param  {Object} opts
 * @return {SiestaModel}
 */
function getViaRemoteId(remoteId, opts) {
    var type = opts.mapping.type;
    var collection = opts.mapping.collection;
    var collectionCache = remoteCache[collection];
    if (collectionCache) {
        var typeCache = remoteCache[collection][type];
        if (typeCache) {
            var obj = typeCache[remoteId];
            if (obj) {
                if (RemoteCacheLogger.debug.isEnabled)
                    RemoteCacheLogger.debug('Remote cache hit: ' + obj._dump(true));
            } else {
                if (RemoteCacheLogger.debug.isEnabled)
                    RemoteCacheLogger.debug('Remote cache miss: ' + remoteId);
            }
            return obj;
        }
    }
    if (RemoteCacheLogger.debug.isEnabled)
        RemoteCacheLogger.debug('Remote cache miss: ' + remoteId);
    return null;
}

/**
 * Insert an objet into the cache using a remote identifier defined by the mapping.
 * @param  {SiestaModel} obj
 * @param  {String} remoteId
 * @param  {String} previousRemoteId If remote id has been changed, this is the old remote identifier
 */
function remoteInsert(obj, remoteId, previousRemoteId) {
    if (obj) {
        var collection = obj.mapping.collection;
        if (collection) {
            if (!remoteCache[collection]) {
                remoteCache[collection] = {};
            }
            var type = obj.mapping.type;
            if (type) {
                if (!remoteCache[collection][type]) {
                    remoteCache[collection][type] = {};
                }
                if (previousRemoteId) {
                    remoteCache[collection][type][previousRemoteId] = null;
                }
                var cachedObject = remoteCache[collection][type][remoteId];
                if (!cachedObject) {
                    remoteCache[collection][type][remoteId] = obj;
                    if (RemoteCacheLogger.debug.isEnabled)
                        RemoteCacheLogger.debug('Remote cache insert: ' + obj._dump(true));
                    if (RemoteCacheLogger.trace.isEnabled)
                        RemoteCacheLogger.trace('Remote cache now looks like: ' + remoteDump(true))
                } else {
                    // Something has gone really wrong. Only one object for a particular collection/type/remoteid combo
                    // should ever exist.
                    if (obj != cachedObject) {
                        var message = 'Object ' + collection.toString() + ':' + type.toString() + '[' + obj.mapping.id + '="' + remoteId + '"] already exists in the cache.' +
                            ' This is a serious error, please file a bug report if you are experiencing this out in the wild';
                        RemoteCacheLogger.error(message, {
                            obj: obj,
                            cachedObject: cachedObject
                        });
                        util.printStackTrace();
                        throw new InternalSiestaError(message);
                    } else {
                        if (RemoteCacheLogger.debug.isEnabled)
                            RemoteCacheLogger.debug('Object has already been inserted: ' + obj._dump(true));
                    }

                }
            } else {
                throw new InternalSiestaError('Mapping has no type', {
                    mapping: obj.mapping,
                    obj: obj
                });
            }
        } else {
            throw new InternalSiestaError('Mapping has no collection', {
                mapping: obj.mapping,
                obj: obj
            });
        }
    } else {
        var msg = 'Must pass an object when inserting to cache';
        RemoteCacheLogger.error(msg);
        throw new InternalSiestaError(msg);
    }
}

/**
 * Dump the remote id cache
 * @param  {boolean} asJson Whether or not to apply JSON.stringify
 * @return {String|Object}
 */
function remoteDump(asJson) {
    var dumpedRestCache = {};
    for (var coll in remoteCache) {
        if (remoteCache.hasOwnProperty(coll)) {
            var dumpedCollCache = {};
            dumpedRestCache[coll] = dumpedCollCache;
            var collCache = remoteCache[coll];
            for (var mapping in collCache) {
                if (collCache.hasOwnProperty(mapping)) {
                    var dumpedMappingCache = {};
                    dumpedCollCache[mapping] = dumpedMappingCache;
                    var mappingCache = collCache[mapping];
                    for (var remoteId in mappingCache) {
                        if (mappingCache.hasOwnProperty(remoteId)) {
                            if (mappingCache[remoteId]) {
                                dumpedMappingCache[remoteId] = mappingCache[remoteId]._dump();
                            }
                        }
                    }
                }
            }
        }
    }
    return asJson ? JSON.stringify(dumpedRestCache, null, 4) : dumpedRestCache;

}

/**
 * Dump the local id (_id) cache
 * @param  {boolean} asJson Whether or not to apply JSON.stringify
 * @return {String|Object}
 */
function localDump(asJson) {
    var dumpedIdCache = {};
    for (var id in localCacheById) {
        if (localCacheById.hasOwnProperty(id)) {
            dumpedIdCache[id] = localCacheById[id]._dump()
        }
    }
    return asJson ? JSON.stringify(dumpedIdCache, null, 4) : dumpedIdCache;
}

/**
 * Dump to the cache.
 * @param  {boolean} asJson Whether or not to apply JSON.stringify
 * @return {String|Object}
 */
function dump(asJson) {
    var dumped = {
        localCache: localDump(),
        remoteCache: remoteDump()
    };
    return asJson ? JSON.stringify(dumped, null, 4) : dumped;
}

function _remoteCache() {
    return remoteCache
}

function _localCache() {
    return localCacheById;
}

/**
 * Query the cache
 * @param  {Object} opts Object describing the query
 * @return {SiestaModel}
 * @example
 * ```js
 * cache.get({_id: '5'}); // Query by local id
 * cache.get({remoteId: '5', mapping: myMapping}); // Query by remote id
 * ```
 */
function get(opts) {
    if (LocalCacheLogger.debug.isEnabled) LocalCacheLogger.debug('get', opts);
    var obj, idField, remoteId;
    var localId = opts._id;
    if (localId) {
        obj = getViaLocalId(localId);
        if (obj) {
            return obj;
        } else {
            if (opts.mapping) {
                idField = opts.mapping.id;
                remoteId = opts[idField];
                if (LocalCacheLogger.debug.isEnabled) LocalCacheLogger.debug(idField + '=' + remoteId);
                return getViaRemoteId(remoteId, opts);
            } else {
                return null;
            }
        }
    } else if (opts.mapping) {
        idField = opts.mapping.id;
        remoteId = opts[idField];
        if (remoteId) {
            return getViaRemoteId(remoteId, opts);
        } else if (opts.mapping.singleton) {
            return getSingleton(opts.mapping);
        }
    } else {
        LocalCacheLogger.warn('Invalid opts to cache', {
            opts: opts
        });
    }
    return null;
}

/**
 * Insert an objet into the cache.
 * @param  {SiestaModel} obj
 * @throws {InternalSiestaError} An object with _id/remoteId already exists. Not thrown if same obhect.
 */
function insert(obj) {
    var localId = obj._id;
    if (localId) {
        var collectionName = obj.mapping.collection;
        var mappingName = obj.mapping.type;
        if (!localCacheById[localId]) {
            if (LocalCacheLogger.debug.isEnabled)
                LocalCacheLogger.debug('Local cache insert: ' + obj._dump(true));
            localCacheById[localId] = obj;
            if (LocalCacheLogger.trace.isEnabled)
                LocalCacheLogger.trace('Local cache now looks like: ' + localDump(true));
            if (!localCache[collectionName]) localCache[collectionName] = {};
            if (!localCache[collectionName][mappingName]) localCache[collectionName][mappingName] = {};
            localCache[collectionName][obj.type][localId] = obj;
        } else {
            // Something has gone badly wrong here. Two objects should never exist with the same _id
            if (localCacheById[localId] != obj) {
                var message = 'Object with _id="' + localId.toString() + '" is already in the cache. ' +
                    'This is a serious error. Please file a bug report if you are experiencing this out in the wild';
                LocalCacheLogger.error(message);
                throw new InternalSiestaError(message);
            }
        }
    }
    var idField = obj.idField;
    var remoteId = obj[idField];
    if (remoteId) {
        remoteInsert(obj, remoteId);
    } else {
        if (RemoteCacheLogger.debug.isEnabled)
            RemoteCacheLogger.debug('No remote id ("' + idField + '") so wont be placing in the remote cache', obj);
    }
}

/**
 * Returns true if object is in the cache
 * @param  {SiestaModel} obj
 * @return {boolean}
 */
function contains(obj) {
    var q = {
        _id: obj._id
    };
    var mapping = obj.mapping;
    if (mapping.id) {
        if (obj[mapping.id]) {
            q.mapping = mapping;
            q[mapping.id] = obj[mapping.id];
        }
    }
    return !!get(q);
}

/**
 * Removes the object from the cache (if it's actually in the cache) otherwises throws an error.
 * @param  {SiestaModel} obj
 * @throws {InternalSiestaError} If object already in the cache.
 */
function remove(obj) {
    if (contains(obj)) {
        var collectionName = obj.mapping.collection;
        var mappingName = obj.mapping.type;
        var _id = obj._id;
        if (!mappingName) throw InternalSiestaError('No mapping name');
        if (!collectionName) throw InternalSiestaError('No collection name');
        if (!_id) throw InternalSiestaError('No _id');
        delete localCache[collectionName][mappingName][_id];
        delete localCacheById[_id];
        if (obj.mapping.id) {
            var remoteId = obj[obj.mapping.id];
            delete remoteCache[collectionName][mappingName][remoteId];
        }
    } else {
        throw new InternalSiestaError('Object was not in cache.');
    }
}


function dump(asJson) {
    var dumped = {
        localCache: localDump(),
        remoteCache: remoteDump()
    };
    return asJson ? JSON.stringify(dumped, null, 4) : dumped;
}

exports._remoteCache = _remoteCache;
exports._localCache = _localCache;
Object.defineProperty(exports, '_localCacheByType', {
    get: function() {
        return localCache;
    }
});
exports.get = get;
exports.insert = insert;
exports.remoteInsert = remoteInsert;
exports.reset = reset;
exports._dump = dump;
exports.contains = contains;
exports.remove = remove;
},{"../vendor/operations.js/src/log":107,"./error":47,"./util":60}],44:[function(require,module,exports){
/**
 * The changes module deals with changes to SiestaModel instances. In the in-memory case this 
 * just means that notifications are sent on any change. If the storage module is being used,
 * the changes module is extended to deal with merging changes into whatever persistant storage
 * method is being used.
 * @module changes
 */

var defineSubProperty = require('./misc').defineSubProperty;
var notificationCentre = require('./notificationCentre').notificationCentre;
var InternalSiestaError = require('./error').InternalSiestaError;
var log = require('../vendor/operations.js/src/log');
var collectionRegistry = require('./collectionRegistry').CollectionRegistry;

var Logger = log.loggerWithName('changes');
Logger.setLevel(log.Level.warn);

/**
 * Constants that describe change events.
 * Set => A new value is assigned to an attribute/relationship
 * Splice => All javascript array operations are described as splices.
 * Delete => Used in the case where objects are removed from an array, but array order is not known in advance.
 * Remove => Object deletion events
 * New => Object creation events
 * @type {Object}
 */
var ChangeType = {
    Set: 'Set',
    Splice: 'Splice',
    Delete: 'Delete',
    New: 'New',
    Remove: 'Remove'
};

/**
 * Represents an individual change.
 * @param opts
 * @constructor
 */
function Change(opts) {
    this._opts = opts;
    if (!this._opts) {
        this._opts = {};
    }
    defineSubProperty.call(this, 'collection', this._opts);
    defineSubProperty.call(this, 'mapping', this._opts);
    defineSubProperty.call(this, '_id', this._opts);
    defineSubProperty.call(this, 'field', this._opts);
    defineSubProperty.call(this, 'type', this._opts);
    defineSubProperty.call(this, 'index', this._opts);
    defineSubProperty.call(this, 'added', this._opts);
    defineSubProperty.call(this, 'addedId', this._opts);
    defineSubProperty.call(this, 'removed', this._opts);
    defineSubProperty.call(this, 'removedId', this._opts);
    defineSubProperty.call(this, 'new', this._opts);
    defineSubProperty.call(this, 'newId', this._opts);
    defineSubProperty.call(this, 'old', this._opts);
    defineSubProperty.call(this, 'oldId', this._opts);
    defineSubProperty.call(this, 'obj', this._opts);
}

Change.prototype._dump = function (json) {
    var dumped = {};
    dumped.collection = (typeof this.collection) == 'string' ? this.collection : this.collection._dump();
    dumped.mapping = (typeof this.mapping) == 'string' ? this.mapping : this.mapping.type;
    dumped._id = this._id;
    dumped.field = this.field;
    dumped.type = this.type;
    if (this.index) dumped.index = this.index;
    if (this.added) dumped.added = _.map(this.added, function (x) {return x._dump()});
    if (this.removed) dumped.removed = _.map(this.removed, function (x) {return x._dump()});
    if (this.old) dumped.old = this.old;
    if (this.new) dumped.new = this.new;
    return json ? JSON.stringify(dumped, null, 4) : dumped;
};

/**
 * Broadcas
 * @param  {String} collectionName
 * @param  {String} mappingName
 * @param  {Object} c an options dictionary representing the change
 * @return {[type]}
 */
function broadcast(collectionName, mappingName, c) {
    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + collectionName + '" of type ' + c.type);
    notificationCentre.emit(collectionName, c);
    var mappingNotif = collectionName + ':' + mappingName;
    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + mappingNotif + '" of type ' + c.type);
    notificationCentre.emit(mappingNotif, c);
    var genericNotif = 'Siesta';
    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + genericNotif + '" of type ' + c.type);
    notificationCentre.emit(genericNotif, c);
    var localIdNotif = c._id;
    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + localIdNotif + '" of type ' + c.type);
    notificationCentre.emit(localIdNotif, c);
    var collection = collectionRegistry[collectionName];
    if (!collection) {
        var err = 'No such collection "' + collectionName + '"';
        Logger.error(err, collectionRegistry);
        throw new InternalSiestaError(err);
    }
    var mapping = collection[mappingName];
    if (!mapping) {
        var err = 'No such mapping "' + mappingName + '"';
        Logger.error(err, collectionRegistry);
        throw new InternalSiestaError(err);
    }
    if (mapping.id && c.obj[mapping.id]) {
        var remoteIdNotif = collectionName + ':' + mappingName + ':' + c.obj[mapping.id];
        if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + remoteIdNotif + '" of type ' + c.type);
        notificationCentre.emit(remoteIdNotif, c);
    }
}

/**
 * Throw an error if the change is incorrect.
 * @param changeOpts
 * @throws {InternalSiestaError} If change options are invalid
 */
function validateChange(changeOpts) {
    if (!changeOpts.mapping) throw new InternalSiestaError('Must pass a mapping');
    if (!changeOpts.collection) throw new InternalSiestaError('Must pass a collection');
    if (!changeOpts._id) throw new InternalSiestaError('Must pass a local identifier');
    if (!changeOpts.obj) throw new InternalSiestaError('Must pass the object');
}

/**
 * Register that a change has been made.
 * @param opts
 * @return {Change} The constructed change
 */
function registerChange(opts) {
    validateChange(opts);
    var collection = opts.collection;
    var mapping = opts.mapping;
    var c = new Change(opts);
    broadcast(collection, mapping, c);
    return c;
}

exports.Change = Change;
exports.registerChange = registerChange;
exports.validateChange = validateChange;
exports.ChangeType = ChangeType;
},{"../vendor/operations.js/src/log":107,"./collectionRegistry":46,"./error":47,"./misc":51,"./notificationCentre":52}],45:[function(require,module,exports){
/**
 * @module collection
 */

var log = require('../vendor/operations.js/src/log');
var Logger = log.loggerWithName('Collection');
Logger.setLevel(log.Level.warn);

var CollectionRegistry = require('./collectionRegistry').CollectionRegistry;
var Operation = require('../vendor/operations.js/src/operation').Operation;
var InternalSiestaError = require('./error').InternalSiestaError;
var Mapping = require('./mapping').Mapping;
var extend = require('extend');
var observe = require('../vendor/observe-js/src/observe').Platform;

var util = require('./util');
var _ = util._;

var q = require('q');

var cache = require('./cache');

var SAFE_METHODS = ['GET', 'HEAD', 'TRACE', 'OPTIONS', 'CONNECT'];
var UNSAFE_METHODS = ['PUT', 'PATCH', 'POST', 'DELETE'];

/**
 * A collection describes a set of models and optionally a REST API which we would
 * like to model.
 *
 * @param name
 * @constructor
 *
 *
 * @example
 * ```js
 * var GitHub = new siesta.Collection('GitHub')
 * // ... configure mappings, descriptors etc ...
 * GitHub.install(function () {
 *     // ... carry on.
 * });
 * ```
 */
function Collection(name) {
    var self = this;
    if (!this) return new Collection(name);
    if (!name) throw new InternalSiestaError('Collection must have a name');
    this._name = name;
    this._docId = 'Collection_' + this._name;
    this._rawMappings = {};
    this._mappings = {};
    /**
     * The URL of the API e.g. http://api.github.com
     * @type {string}
     */
    this.baseURL = '';

    /**
     * Set to true if installation has succeeded. You cannot use the collectio
     * @type {boolean}
     */
    this.installed = false;
    CollectionRegistry.register(this);

    /**
     *
     * @type {string}
     */
    Object.defineProperty(this, 'name', {
        get: function() {
            return self._name;
        }
    });
}

/**
 * Ensure mappings are installed.
 * @param callback
 */
Collection.prototype.install = function(callback) {
    var deferred = q.defer();
    var self = this;
    if (!this.installed) {
        var mappingsToInstall = [];
        for (var name in this._mappings) {
            if (this._mappings.hasOwnProperty(name)) {
                var mapping = this._mappings[name];
                mappingsToInstall.push(mapping);
            }
        }
        if (Logger.info.isEnabled)
            Logger.info('There are ' + mappingsToInstall.length.toString() + ' mappings to install');
        if (mappingsToInstall.length) {
            var operations = _.map(mappingsToInstall, function(m) {
                return new Operation('Install Mapping', _.bind(m.install, m));
            });
            var op = new Operation('Install Mappings', operations);
            op.completion = function() {
                if (op.failed) {
                    Logger.error('Failed to install collection', op.error);
                    self._finaliseInstallation(op.error, callback);
                } else {
                    self.installed = true;
                    var errors = [];
                    _.each(mappingsToInstall, function(m) {
                        if (Logger.info.isEnabled)
                            Logger.info('Installing relationships for mapping with name "' + m.type + '"');
                        var err = m.installRelationships();
                        if (err) errors.push(err);
                    });
                    if (!errors.length) {
                        _.each(mappingsToInstall, function(m) {
                            if (Logger.info.isEnabled)
                                Logger.info('Installing reverse relationships for mapping with name "' + m.type + '"');
                            var err = m.installReverseRelationships();
                            if (err) errors.push(err);
                        });
                    }
                    var err;
                    if (errors.length == 1) {
                        err = errors[0];
                    } else if (errors.length) {
                        err = errors;
                    }
                    self._finaliseInstallation(err, callback);
                }
            };
            op.start();
        } else {
            self._finaliseInstallation(null, callback);
        }
    } else {
        var err = new InternalSiestaError('Collection "' + this._name + '" has already been installed');
        self._finaliseInstallation(err, callback);
    }
    return deferred.promise;
};

/**
 * Mark this collection as installed, and place the collection on the global Siesta object.
 * @param  {Object}   err
 * @param  {Function} callback
 */
Collection.prototype._finaliseInstallation = function(err, callback) {
    if (!err) {
        this.installed = true;
        var index = require('../index');
        index[this._name] = this;
    }
    if (callback) callback(err);
};

/**
 * Given the name of a mapping and an options object describing the mapping, creating a Mapping
 * object, install it and return it.
 * @param  {String} name
 * @param  {Object} mapping
 * @return {Mapping}
 */
Collection.prototype._mapping = function(name, opts) {
    if (name) {
        this._rawMappings[name] = opts;
        var opts = extend(true, {}, opts);
        opts.type = name;
        opts.collection = this._name;
        var mappingObject = new Mapping(opts);
        this._mappings[name] = mappingObject;
        this[name] = mappingObject;
        return mappingObject;
    } else {
        throw new InternalSiestaError('No name specified when creating mapping');
    }
};

/**
 * Registers a mapping with this collection.
 * @param {String|Object} optsOrName An options object or the name of the mapping. Must pass options as second param if specify name.
 * @param {Object} opts Options if name already specified.
 * @return {Mapping}
 */
Collection.prototype.mapping = function() {
    var self = this;
    if (arguments.length) {
        if (arguments.length == 1) {
            if (util.isArray(arguments[0])) {
                return _.map(arguments[0], function(m) {
                    return self._mapping(m.name, m);
                });
            } else {
                return this._mapping(arguments[0].name, arguments[0]);
            }
        } else {
            if (typeof arguments[0] == 'string') {
                return this._mapping(arguments[0], arguments[1]);
            } else {
                return _.map(arguments, function(m) {
                    return self._mapping(m.name, m);
                });
            }
        }
    }
    return null;
};

Collection.prototype.descriptor = function(opts) {
    var descriptors = [];
    if (siesta.ext.httpEnabled) {
        var methods = siesta.ext.http._resolveMethod(opts.method);
        var unsafe = [];
        var safe = [];
        for (var i = 0; i < methods.length; i++) {
            var m = methods[i];
            if (UNSAFE_METHODS.indexOf(m) > -1) {
                unsafe.push(m);
            } else {
                safe.push(m);
            }
        }
        if (unsafe.length) {
            var requestDescriptor = extend({}, opts);
            requestDescriptor.method = unsafe;
            requestDescriptor = new siesta.ext.http.RequestDescriptor(requestDescriptor);
            siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
            descriptors.push(requestDescriptor);
        }
        if (safe.length) {
            var responseDescriptor = extend({}, opts);
            responseDescriptor.method = safe;
            responseDescriptor = new siesta.ext.http.ResponseDescriptor(responseDescriptor);
            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
            descriptors.push(responseDescriptor);
        }
    } else {
        throw new InternalSiestaError('HTTP module not installed');
    }
    return descriptors;
};

/**
 * Dump this collection as JSON
 * @param  {Boolean} asJson Whether or not to apply JSON.stringify
 * @return {String|Object}
 */
Collection.prototype._dump = function(asJson) {
    var obj = {};
    obj.installed = this.installed;
    obj.docId = this._docId;
    obj.name = this._name;
    obj.baseURL = this.baseURL;
    return asJson ? JSON.stringify(obj, null, 4) : obj;
};


// /**
//  * Persist all changes to PouchDB.
//  * Note: Storage extension must be installed.
//  * @param callback
//  * @returns {Promise}
//  */
// Collection.prototype.save = function(callback) {
//     var deferred = q.defer();
//     callback = util.constructCallbackAndPromiseHandler(callback, deferred);
//     if (siesta.ext.storageEnabled) {
//         util.next(function() {
//             var mergeChanges = siesta.ext.storage.changes.mergeChanges;
//             mergeChanges(callback);
//         });
//     } else {
//         callback('Storage module not installed');
//     }
//     return deferred.promise;
// };


Collection.prototype._http = function(method) {
    if (siesta.ext.httpEnabled) {
        var args = Array.prototype.slice.call(arguments, 1);
        args.unshift(this);
        var f = siesta.ext.http[method];
        f.apply(f, args);
    } else {
        throw InternalSiestaError('HTTP module not enabled');
    }
}

/**
 * Send a GET request
 * @param {String} path The path to the resource we want to GET
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @package HTTP
 * @returns {Promise}
 */
Collection.prototype.GET = function() {
    _.partial(this._http, 'GET').apply(this, arguments);
};

/**
 * Send a OPTIONS request
 * @param {String} path The path to the resource to which we want to send an OPTIONS request
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.OPTIONS = function() {
    _.partial(this._http, 'OPTIONS').apply(this, arguments);
};

/**
 * Send a TRACE request
 * @param {path} path The path to the resource to which we want to send a TRACE request
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.TRACE = function() {
    _.partial(this._http, 'TRACE').apply(this, arguments);
};

/**
 * Send a HEAD request
 * @param {String} path The path to the resource to which we want to send a HEAD request
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.HEAD = function() {
    _.partial(this._http, 'HEAD').apply(this, arguments);
};

/**
 * Send a POST request
 * @param {String} path The path to the resource to which we want to send a POST request
 * @param {SiestaModel} model The model that we would like to POST
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.POST = function() {
    _.partial(this._http, 'POST').apply(this, arguments);
};

/**
 * Send a PUT request
 * @param {String} path The path to the resource to which we want to send a PUT request
 * @param {SiestaModel} model The model that we would like to PUT
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.PUT = function() {
    _.partial(this._http, 'PUT').apply(this, arguments);
};

/**
 * Send a PATCH request
 * @param {String} path The path to the resource to which we want to send a PATCH request
 * @param {SiestaModel} model The model that we would like to PATCH
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.PATCH = function() {
    _.partial(this._http, 'PATCH').apply(this, arguments);
};

/**
 * Send a DELETE request. Also removes the object.
 * @param {String} path The path to the resource to which we want to DELETE
 * @param {SiestaModel} model The model that we would like to PATCH
 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
 * @param {Function} callback Callback if opts specified.
 * @returns {Promise}
 */
Collection.prototype.DELETE = function(path, object) {
    _.partial(this._http, 'DELETE').apply(this, arguments);
};

/**
 * Returns the number of objects in this collection.
 *
 * @param callback
 * @returns {Promise}
 */
Collection.prototype.count = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var tasks = _.map(this._mappings, function(m) {
        return _.bind(m.count, m);
    });
    util.parallel(tasks, function(err, ns) {
        var n;
        if (!err) {
            n = _.reduce(ns, function(m, r) {
                return m + r
            }, 0);
        }
        callback(err, n);
    });
    return deferred.promise;
};

exports.Collection = Collection;
},{"../index":1,"../vendor/observe-js/src/observe":106,"../vendor/operations.js/src/log":107,"../vendor/operations.js/src/operation":108,"./cache":43,"./collectionRegistry":46,"./error":47,"./mapping":49,"./util":60,"extend":41,"q":42}],46:[function(require,module,exports){
/**
 * @module collection 
 */
var _ = require('./util')._;

function CollectionRegistry() {
    if (!this) return new CollectionRegistry();
    this.collectionNames = [];
}

CollectionRegistry.prototype.register = function (collection) {
    var name = collection._name;
    this[name] = collection;
    this.collectionNames.push(name);
};

CollectionRegistry.prototype.reset = function () {
    var self = this;
    _.each(this.collectionNames, function (name) {
        delete self[name];
    });
    this.collectionNames = [];
};

exports.CollectionRegistry = new CollectionRegistry();
},{"./util":60}],47:[function(require,module,exports){
/**
 * @module error
 */

function InternalSiestaError(message, context, ssf) {
    this.message = message;
    this.context = context;
    // capture stack trace
    ssf = ssf || arguments.callee;
    if (ssf && Error.captureStackTrace) {
        Error.captureStackTrace(this, ssf);
    }
}

InternalSiestaError.prototype = Object.create(Error.prototype);
InternalSiestaError.prototype.name = 'InternalSiestaError';
InternalSiestaError.prototype.constructor = InternalSiestaError;

exports.InternalSiestaError = InternalSiestaError;

},{}],48:[function(require,module,exports){
/**
 * @module relationships
 */

var proxy = require('./proxy')
    , RelationshipProxy = proxy.RelationshipProxy
    , Store = require('./store')
    , util = require('./util')
    , _ = util._
    , InternalSiestaError = require('./error').InternalSiestaError
    , coreChanges = require('./changes')
    , notificationCentre = require('./notificationCentre')
    , wrapArrayForAttributes = notificationCentre.wrapArray
    , SiestaModel = require('./object').SiestaModel
    , ArrayObserver = require('../vendor/observe-js/src/observe').ArrayObserver
    , ChangeType = require('./changes').ChangeType
    , q = require('q')
;

/**
 * [ManyToManyProxy description]
 * @param {Object} opts
 */
function ManyToManyProxy(opts) {
    RelationshipProxy.call(this, opts);
    var self = this;
    Object.defineProperty(this, 'isFault', {
        get: function () {
            if (self._id) {
                return !self.related;
            }
            return true;
        },
        set: function (v) {
            if (v) {
                self._id = undefined;
                self.related = null;
            }
            else {
                if (!self._id) {
                    self._id = [];
                    self.related = [];
                    wrapArray.call(self, self.related);
                }
            }
        }
    });
    this._reverseIsArray = true;
}


function clearReverse(removed) {
    var self = this;
    _.each(removed, function (removedObject) {
        var reverseProxy = proxy.getReverseProxyForObject.call(self, removedObject);
        var idx = reverseProxy._id.indexOf(self.object._id);
        proxy.makeChangesToRelatedWithoutObservations.call(reverseProxy, function (){
            proxy.splice.call(reverseProxy, idx, 1);
        });
    });
}

function setReverse(added) {
    var self = this;
    _.each(added, function (addedObject) {
        var reverseProxy = proxy.getReverseProxyForObject.call(self, addedObject);
        proxy.makeChangesToRelatedWithoutObservations.call(reverseProxy, function (){
            proxy.splice.call(reverseProxy, 0, 0, self.object);
        });
    });
}

function wrapArray(arr) {
    var self = this;
    wrapArrayForAttributes(arr, this.reverseName, this.object);
    if (!arr.oneToManyObserver) {
        arr.oneToManyObserver = new ArrayObserver(arr);
        var observerFunction = function (splices) {
            splices.forEach(function (splice) {
                var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
                var removed = splice.removed;
                clearReverse.call(self, removed);
                setReverse.call(self, added);
                var mapping = proxy.getForwardMapping.call(self);
                coreChanges.registerChange({
                    collection: mapping.collection,
                    mapping: mapping.type,
                    _id: self.object._id,
                    field: proxy.getForwardName.call(self),
                    removed: removed,
                    added: added,
                    removedId: _.pluck(removed, '_id'),
                    addedId: _.pluck(added, '_id'),
                    type: ChangeType.Splice,
                    index: splice.index,
                    obj: self.object
                });
            });
        };
        arr.oneToManyObserver.open(observerFunction);
    }
}

ManyToManyProxy.prototype = Object.create(RelationshipProxy.prototype);

ManyToManyProxy.prototype.get = function (callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var self = this;
    if (this.isFault) {
        Store.get({_id: this._id}, function (err, stored) {
            if (err) {
                if (callback) callback(err);
            }
            else {
                self.related = stored;
                if (callback) callback(null, stored);
            }
        })
    }
    else {
        if (callback) callback(null, this.related);
    }
    return deferred.promise;
};

function validate(obj) {
    if (Object.prototype.toString.call(obj) != '[object Array]') {
            return 'Cannot assign scalar to many to many';
        }
    return null;
}

ManyToManyProxy.prototype.set = function (obj) {
    proxy.checkInstalled.call(this);
    var self = this;
    if (obj) {
        var errorMessage;
        if (errorMessage = validate.call(this, obj)) {
            return errorMessage;
        }
        else {
            proxy.clearReverseRelated.call(this);
            proxy.set.call(self, obj);
            wrapArray.call(self, obj);
            proxy.setReverse.call(self, obj);
        }
    }
    else {
        proxy.clearReverseRelated.call(this);
        proxy.set.call(self, obj);
    }
};

ManyToManyProxy.prototype.install = function (obj) {
    RelationshipProxy.prototype.install.call(this, obj);
    obj[ ('splice' + util.capitaliseFirstLetter(this.reverseName))] = _.bind(proxy.splice, this);
};

exports.ManyToManyProxy = ManyToManyProxy;
},{"../vendor/observe-js/src/observe":106,"./changes":44,"./error":47,"./notificationCentre":52,"./object":53,"./proxy":56,"./store":59,"./util":60,"q":42}],49:[function(require,module,exports){
/**
 * @module mapping
 */

var log = require('../vendor/operations.js/src/log');
var Logger = log.loggerWithName('Mapping');
Logger.setLevel(log.Level.warn);

var defineSubProperty = require('./misc').defineSubProperty;
var CollectionRegistry = require('./collectionRegistry').CollectionRegistry;
var InternalSiestaError = require('./error').InternalSiestaError;
var relationship = require('./relationship');
var RelationshipType = relationship.RelationshipType;
var Query = require('./query').Query;
var Operation = require('../vendor/operations.js/src/operation').Operation;
var BulkMappingOperation = require('./mappingOperation').BulkMappingOperation;
var SiestaModel = require('./object').SiestaModel;
var guid = require('./misc').guid;
var cache = require('./cache');
var store = require('./store');
var extend = require('extend');

var coreChanges = require('./changes');
var ChangeType = coreChanges.ChangeType;
var wrapArray = require('./notificationCentre').wrapArray;

var OneToManyProxy = require('./oneToManyProxy').OneToManyProxy;
var OneToOneProxy = require('./oneToOneProxy').OneToOneProxy;
var ManyToManyProxy = require('./manyToManyProxy').ManyToManyProxy;

var util = require('./util');
var _ = util._;
var q = require('q');

/**
 * 
 * @param {Object} opts
 */
function Mapping(opts) {
    var self = this;
    this._opts = opts;

    Object.defineProperty(this, '_fields', {
        get: function() {
            var fields = [];
            if (self._opts.id) {
                fields.push(self._opts.id);
            }
            if (self._opts.attributes) {
                _.each(self._opts.attributes, function(x) {
                    fields.push(x)
                });
            }
            return fields;
        },
        enumerable: true,
        configurable: true
    });

    /**
     * @name type
     * @type {String}
     */
    defineSubProperty.call(this, 'type', self._opts);

    /**
     * @name id
     * @type {String}
     */
    defineSubProperty.call(this, 'id', self._opts);
    defineSubProperty.call(this, 'collection', self._opts);
    defineSubProperty.call(this, 'attributes', self._opts);
    defineSubProperty.call(this, 'relationships', self._opts);
    defineSubProperty.call(this, 'indexes', self._opts);
    defineSubProperty.call(this, 'subclass', self._opts);
    defineSubProperty.call(this, 'singleton', self._opts);

    if (!this.relationships) {
        this.relationships = [];
    }

    if (!this.indexes) {
        this.indexes = [];
    }

    this._validateSubclass();

    this._installed = false;
    this._relationshipsInstalled = false;
    this._reverseRelationshipsInstalled = false;

    Object.defineProperty(this, 'installed', {
        get: function() {
            return self._installed && self._relationshipsInstalled && self._reverseRelationshipsInstalled;
        },
        enumerable: true,
        configurable: true
    });

}

/**
 * Ensure that any subclasses passed to the mapping are valid and working correctly.
 * @private
 */
Mapping.prototype._validateSubclass = function() {
    if (this.subclass && this.subclass !== SiestaModel) {
        var obj = new this.subclass(this);
        if (!obj.mapping) {
            throw new InternalSiestaError('Subclass for mapping "' + this.type + '" has not been configured correctly. ' +
                'Did you call super?');
        }
        if (this.subclass.prototype == SiestaModel.prototype) {
            throw new InternalSiestaError('Subclass for mapping "' + this.type + '" has not been configured correctly. ' +
                'You should use Object.create on SiestaModel prototype.');
        }
    }
};


Mapping.prototype.installRelationships = function() {
    if (!this._relationshipsInstalled) {
        var self = this;
        self._relationships = [];
        if (self._opts.relationships) {
            for (var name in self._opts.relationships) {
                if (Logger.debug.isEnabled)
                    Logger.debug(self.type + ': configuring relationship ' + name);
                if (self._opts.relationships.hasOwnProperty(name)) {
                    var relationship = self._opts.relationships[name];
                    if (relationship.type == RelationshipType.OneToMany ||
                        relationship.type == RelationshipType.OneToOne ||
                        relationship.type == RelationshipType.ManyToMany) {
                        var mappingName = relationship.mapping;
                        if (Logger.debug.isEnabled)
                            Logger.debug('reverseMappingName', mappingName);
                        if (!self.collection) throw new InternalSiestaError('Mapping must have collection');
                        var collection = CollectionRegistry[self.collection];
                        if (!collection) {
                            throw new InternalSiestaError('Collection ' + self.collection + ' not registered');
                        }
                        var reverseMapping = collection[mappingName];
                        if (!reverseMapping) {
                            var arr = mappingName.split('.');
                            if (arr.length == 2) {
                                var collectionName = arr[0];
                                mappingName = arr[1];
                                var otherCollection = CollectionRegistry[collectionName];
                                if (!otherCollection) {
                                    var err = 'Collection with name "' + collectionName + '" does not exist.';
                                    console.error(err, {
                                        registry: CollectionRegistry
                                    });
                                    return err;
                                }
                                reverseMapping = otherCollection[mappingName];
                            }
                        }
                        if (Logger.debug.isEnabled)
                            Logger.debug('reverseMapping', reverseMapping);
                        if (reverseMapping) {
                            relationship.reverseMapping = reverseMapping;
                            relationship.forwardMapping = this;
                            relationship.forwardName = name;
                            relationship.reverseName = relationship.reverse;
                            relationship.isReverse = false;
                        } else {
                            return 'Mapping with name "' + mappingName.toString() + '" does not exist';
                        }
                    } else {
                        return 'Relationship type ' + relationship.type + ' does not exist';
                    }
                }
            }
        }
        this._relationshipsInstalled = true;
    } else {
        throw new InternalSiestaError('Relationships for "' + this.type + '" have already been installed');
    }
    return null;
};

Mapping.prototype.installReverseRelationships = function() {
    if (!this._reverseRelationshipsInstalled) {
        for (var forwardName in this.relationships) {
            if (this.relationships.hasOwnProperty(forwardName)) {
                var relationship = this.relationships[forwardName];
                relationship = extend(true, {}, relationship);
                relationship.isReverse = true;
                var reverseMapping = relationship.reverseMapping;
                var reverseName = relationship.reverseName;
                if (Logger.debug.isEnabled)
                    Logger.debug(self.type + ': configuring  reverse relationship ' + name);
                reverseMapping.relationships[reverseName] = relationship;
            }
        }
        this._reverseRelationshipsInstalled = true;
    } else {
        throw new InternalSiestaError('Reverse relationships for "' + this.type + '" have already been installed.');
    }
};

Mapping.prototype.query = function(query, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var _query = new Query(this, query);
    _query.execute(callback);
    return deferred.promise;
};

Mapping.prototype.get = function(idOrCallback, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);

    function finish(err, res) {
        if (callback) callback(err, res);
    }

    if (this.singleton) {
        if (typeof idOrCallback == 'function') {
            callback = idOrCallback;
        }
        this.all(function(err, objs) {
            if (err) finish(err);
            if (objs.length > 1) {
                throw new InternalSiestaError('Somehow more than one object has been created for a singleton mapping! ' +
                    'This is a serious error, please file a bug report.');
            } else if (objs.length) {
                finish(null, objs[0]);
            } else {
                finish(null, objs[0]);
            }
        });
    } else {
        var opts = {};
        opts[this.id] = idOrCallback;
        opts.mapping = this;
        var obj = cache.get(opts);
        if (obj) {
            finish(null, obj);
        } else {
            delete opts.mapping;
            var query = new Query(this, opts);
            query.execute(function(err, rows) {
                var obj = null;
                if (!err && rows.length) {
                    if (rows.length > 1) {
                        err = 'More than one object with id=' + idOrCallback.toString();
                    } else {
                        obj = rows[0];
                    }
                }
                finish(err, obj);
            });
        }

    }
    return deferred.promise;
};

Mapping.prototype.all = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var query = new Query(this, {});
    query.execute(callback);
    return deferred.promise;
};

Mapping.prototype.install = function(callback) {
    if (Logger.info.isEnabled) Logger.info('Installing mapping ' + this.type);
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    if (!this._installed) {
        var errors = this._validate();
        this._installed = true;
        if (Logger.info.isEnabled) {
            if (errors.length) Logger.error('Errors installing mapping ' + this.type + ': ' + errors);
            else Logger.info('Installed mapping ' + this.type);
        }
        if (callback) callback(errors.length ? errors : null);
    } else {
        throw new InternalSiestaError('Mapping "' + this.type + '" has already been installed');
    }
    return deferred.promise;
};

Mapping.prototype._validate = function() {
    var errors = [];
    if (!this.type) {
        errors.push('Must specify a type');
    }
    if (!this.collection) {
        errors.push('A mapping must belong to an collection');
    }
    return errors;
};


/**
 * Map data into Siesta.
 *
 * @param data Raw data received remotely or otherwise
 * @param callback Called once pouch persistence returns.
 * @param override Force mapping to this object
 */
Mapping.prototype.map = function(data, callback, override) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    if (this.installed) {
        if (util.isArray(data)) {
            this._mapBulk(data, callback, override);
        } else {
            this._mapBulk([data], function(err, objects) {
                if (callback) {
                    var obj;
                    if (objects) {
                        if (objects.length) {
                            obj = objects[0];
                        }
                    }
                    callback(err ? err[0] : null, obj);
                }
            }, override ? [override] : undefined);
        }
    } else {
        throw new InternalSiestaError('Mapping must be fully installed before creating any models');
    }
    return deferred.promise;
};

Mapping.prototype._mapBulk = function(data, callback, override) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var opts = {
        mapping: this,
        data: data
    };
    if (override) opts.objects = override;
    var op = new BulkMappingOperation(opts);
    op.onCompletion(function() {
        var err = op.error;
        if (err) {
            if (callback) callback(err);
        } else {
            var objects = op.result;
            callback(null, objects);
        }
    });
    op.start();
    return deferred.promise;
};

function _countCache() {
    var collCache = cache._localCacheByType[this.collection] || {};
    var mappingCache = collCache[this.type] || {};
    return _.reduce(Object.keys(mappingCache), function(m, _id) {
        m[_id] = {};
        return m;
    }, {});
}

Mapping.prototype.count = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var hash = _countCache.call(this);
    if (siesta.ext.storageEnabled) {
        var pouch = siesta.ext.storage.Pouch.getPouch();
        var indexName = (new siesta.ext.storage.Index(this.collection, this.type))._getName() + '_';
        pouch.query(indexName, {
            include_docs: false
        }, function(err, resp) {
            var n;
            if (!err) {
                _.each(_.pluck(resp.rows, 'id'), function(id) {
                    hash[id] = {};
                });
                n = Object.keys(hash).length;
            }
            callback(err, n);
        });
    } else {
        callback(null, Object.keys(hash).length)
    }
    return deferred.promise;
};

/**
 * Convert raw data into a SiestaModel
 * @returns {SiestaModel}
 * @private
 */
Mapping.prototype._new = function(data) {
    if (this.installed) {
        var self = this;
        var _id;
        if (data) {
            _id = data._id ? data._id : guid();
        } else {
            _id = guid();
        }
        var newModel;
        if (this.subclass) {
            newModel = new this.subclass(this);
        } else {
            newModel = new SiestaModel(this);
        }
        if (Logger.info.isEnabled)
            Logger.info('New object created _id="' + _id.toString() + '", type=' + this.type, data);
        newModel._id = _id;
        // Place attributes on the object.
        newModel.__values = data || {};
        var fields = this._fields;
        var idx = fields.indexOf(this.id);
        if (idx > -1) {
            fields.splice(idx, 1);
        }
        _.each(fields, function(field) {
            Object.defineProperty(newModel, field, {
                get: function() {
                    return newModel.__values[field] || null;
                },
                set: function(v) {
                    var old = newModel.__values[field];
                    newModel.__values[field] = v;
                    coreChanges.registerChange({
                        collection: self.collection,
                        mapping: self.type,
                        _id: newModel._id,
                        new: v,
                        old: old,
                        type: ChangeType.Set,
                        field: field,
                        obj: newModel
                    });
                    if (util.isArray(v)) {
                        wrapArray(v, field, newModel);
                    }
                },
                enumerable: true,
                configurable: true
            });
        });

        Object.defineProperty(newModel, this.id, {
            get: function() {
                return newModel.__values[self.id] || null;
            },
            set: function(v) {
                var old = newModel[self.id];
                newModel.__values[self.id] = v;
                coreChanges.registerChange({
                    collection: self.collection,
                    mapping: self.type,
                    _id: newModel._id,
                    new: v,
                    old: old,
                    type: ChangeType.Set,
                    field: self.id,
                    obj: newModel
                });
                cache.remoteInsert(newModel, v, old);
            },
            enumerable: true,
            configurable: true
        });


        for (var name in this.relationships) {
            var proxy;
            if (this.relationships.hasOwnProperty(name)) {
                var relationship = this.relationships[name];
                if (relationship.type == RelationshipType.OneToMany) {
                    proxy = new OneToManyProxy(relationship);
                } else if (relationship.type == RelationshipType.OneToOne) {
                    proxy = new OneToOneProxy(relationship);
                } else if (relationship.type == RelationshipType.ManyToMany) {
                    proxy = new ManyToManyProxy(relationship);
                } else {
                    throw new InternalSiestaError('No such relationship type: ' + relationship.type);
                }
            }
            proxy.install(newModel);
            proxy.isFault = false;
        }
        cache.insert(newModel);
        coreChanges.registerChange({
            collection: this.collection,
            mapping: this.type,
            _id: newModel._id,
            newId: newModel._id,
            new: newModel,
            type: ChangeType.New,
            obj: newModel
        });
        return newModel;
    } else {
        util.printStackTrace();
        throw new InternalSiestaError('Mapping must be fully installed before creating any models');
    }

};

Mapping.prototype._dump = function(asJSON) {
    var dumped = {};
    dumped.name = this.type;
    dumped.attributes = this.attributes;
    dumped.id = this.id;
    dumped.collection = this.collection;
    dumped.relationships = _.map(this.relationships, function(r) {
        return r.isForward ? r.forwardName : r.reverseName;
    });
    return asJSON ? JSON.stringify(dumped, null, 4) : dumped;
};

Mapping.prototype.toString = function() {
    return 'Mapping[' + this.type + ']';
};

/**
 * A subclass of InternalSiestaError specifcally for errors that occur during mapping.
 * @param message
 * @param context
 * @param ssf
 * @returns {MappingError}
 * @constructor
 */
function MappingError(message, context, ssf) {
    if (!this) {
        return new MappingError(message, context);
    }

    this.message = message;

    this.context = context;
    // capture stack trace
    ssf = ssf || arguments.callee;
    if (ssf && InternalSiestaError.captureStackTrace) {
        InternalSiestaError.captureStackTrace(this, ssf);
    }
}

MappingError.prototype = Object.create(InternalSiestaError.prototype);
MappingError.prototype.name = 'MappingError';
MappingError.prototype.constructor = MappingError;

function arrayAsString(arr) {
    var arrContents = _.reduce(arr, function(memo, f) {
        return memo + '"' + f + '",'
    }, '');
    arrContents = arrContents.substring(0, arrContents.length - 1);
    return '[' + arrContents + ']';
}


function constructMapFunction(collection, type, fields) {
    var mapFunc;
    var onlyEmptyFieldSetSpecified = (fields.length == 1 && !fields[0].length);
    var noFieldSetsSpecified = !fields.length || onlyEmptyFieldSetSpecified;

    var arr = arrayAsString(fields);
    if (noFieldSetsSpecified) {
        mapFunc = function(doc) {
            var type = "$2";
            var collection = "$3";
            if (doc.type == type && doc.collection == collection) {
                emit(doc.type, doc);
            }
        }.toString();
    } else {
        mapFunc = function(doc) {
            var type = "$2";
            var collection = "$3";
            if (doc.type == type && doc.collection == collection) {
                //noinspection JSUnresolvedVariable
                var fields = $1;
                var aggField = '';
                for (var idx in fields) {
                    //noinspection JSUnfilteredForInLoop
                    var field = fields[idx];
                    var value = doc[field];
                    if (value !== null && value !== undefined) {
                        aggField += value.toString() + '_';
                    } else if (value === null) {
                        aggField += 'null_';
                    } else {
                        aggField += 'undefined_';
                    }
                }
                aggField = aggField.substring(0, aggField.length - 1);
                emit(aggField, doc);
            }
        }.toString();
        mapFunc = mapFunc.replace('$1', arr);
    }
    mapFunc = mapFunc.replace('$2', type);
    mapFunc = mapFunc.replace('$3', collection);
    return mapFunc;
}


function constructMapFunction2(collection, type, fields) {
    var mapFunc;
    var onlyEmptyFieldSetSpecified = (fields.length == 1 && !fields[0].length);
    var noFieldSetsSpecified = !fields.length || onlyEmptyFieldSetSpecified;

    if (noFieldSetsSpecified) {
        mapFunc = function(doc) {
            if (doc.type == type && doc.collection == collection) {
                emit(doc.type, doc);
            }
        };
    } else {
        mapFunc = function(doc) {
            if (doc.type == type && doc.collection == collection) {
                var aggField = '';
                for (var idx in fields) {
                    //noinspection JSUnfilteredForInLoop
                    var field = fields[idx];
                    var value = doc[field];
                    if (value !== null && value !== undefined) {
                        aggField += value.toString() + '_';
                    } else if (value === null) {
                        aggField += 'null_';
                    } else {
                        aggField += 'undefined_';
                    }
                }
                aggField = aggField.substring(0, aggField.length - 1);
                emit(aggField, doc);
            }
        };
    }
    return mapFunc;
}

exports.Mapping = Mapping;
exports.MappingError = MappingError;
exports.constructMapFunction2 = constructMapFunction2;
exports.constructMapFunction = constructMapFunction;
},{"../vendor/operations.js/src/log":107,"../vendor/operations.js/src/operation":108,"./cache":43,"./changes":44,"./collectionRegistry":46,"./error":47,"./manyToManyProxy":48,"./mappingOperation":50,"./misc":51,"./notificationCentre":52,"./object":53,"./oneToManyProxy":54,"./oneToOneProxy":55,"./query":57,"./relationship":58,"./store":59,"./util":60,"extend":41,"q":42}],50:[function(require,module,exports){
/**
 * @module mapping
 */

var Store = require('./store');
var SiestaModel = require('./object').SiestaModel;
var log = require('../vendor/operations.js/src/log');
var Operation = require('../vendor/operations.js/src/operation').Operation;
var InternalSiestaError = require('../src/error').InternalSiestaError;
var Query = require('./query').Query;

var Logger = log.loggerWithName('MappingOperation');
Logger.setLevel(log.Level.warn);

var cache = require('./cache');
var util = require('./util');
var _ = util._;
var defineSubProperty = require('./misc').defineSubProperty;
var ChangeType = require('./changes').ChangeType;
var q = require('q');

function flattenArray(arr) {
    return _.reduce(arr, function(memo, e) {
        if (util.isArray(e)) {
            memo = memo.concat(e);
        } else {
            memo.push(e);
        }
        return memo;
    }, []);
}

function unflattenArray(arr, modelArr) {
    var n = 0;
    var unflattened = [];
    for (var i = 0; i < modelArr.length; i++) {
        if (util.isArray(modelArr[i])) {
            var newArr = [];
            unflattened[i] = newArr;
            for (var j = 0; j < modelArr[i].length; j++) {
                newArr.push(arr[n]);
                n++;
            }
        } else {
            unflattened[i] = arr[n];
            n++;
        }
    }
    return unflattened;
}

/**
 * Defines an encapsulated mapping operation where opts takes a mappin
 * @param {Objects} opts
 */
function BulkMappingOperation(opts) {
    Operation.call(this);

    this._opts = opts;

    /**
     * @name mapping
     * @type {Mapping}
     */
    defineSubProperty.call(this, 'mapping', this._opts);

    /**
     * @name data
     * @type {Array}
     */
    defineSubProperty.call(this, 'data', this._opts);

    /**
     * @name objects
     * @type {Array}
     */
    defineSubProperty.call(this, 'objects', this._opts);

    if (!this.objects) this.objects = [];

    /**
     * Array of errors where indexes map onto same index as the datum that caused an error.
     * @type {Array}
     */
    this.errors = [];

    this.name = 'Mapping Operation';
    this.work = _.bind(this._start, this);
    this.subOps = {};
}

BulkMappingOperation.prototype = Object.create(Operation.prototype);

function mapAttributes() {
    for (var i = 0; i < this.data.length; i++) {
        var datum = this.data[i];
        var object = this.objects[i];
        // No point mapping object onto itself. This happens if a SiestaModel is passed as a relationship.
        if (datum != object) {
            if (object) { // If object is falsy, then there was an error looking up that object/creating it.
                var fields = this.mapping._fields;
                _.each(fields, function(f) {
                    if (datum[f] !== undefined) { // null is fine
                        object[f] = datum[f];
                    }
                });
            }
        }
    }
}


BulkMappingOperation.prototype._map = function() {
    var self = this;
    var numHits = mapAttributes.call(this);
    var relationshipFields = _.keys(self.subOps);
    _.each(relationshipFields, function(f) {
        var op = self.subOps[f].op;
        var indexes = self.subOps[f].indexes;
        var relatedData = getRelatedData.call(self, f).relatedData;
        var unflattenedObjects = unflattenArray(op.objects, relatedData);
        for (var i = 0; i < unflattenedObjects.length; i++) {
            var idx = indexes[i];
            // Errors are plucked from the suboperations.
            var error = self.errors[idx];
            var err = error ? error[f] : null;
            if (!err) {
                var related = unflattenedObjects[i]; // Can be array or scalar.
                var object = self.objects[idx];
                if (object) {
                    var err = object[f + 'Proxy'].set(related);
                    if (err) {
                        if (!self.errors[idx]) self.errors[idx] = {};
                        self.errors[idx][f] = err;
                    }
                }
            }
        }
    });
};

/**
 * For indices where no object is present, perform lookups, creating a new object if necessary.
 * @private
 */
BulkMappingOperation.prototype._lookup = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var self = this;
    var remoteLookups = [];
    var localLookups = [];
    for (var i = 0; i < this.data.length; i++) {
        if (!this.objects[i]) {
            var lookup;
            var datum = this.data[i];
            var isScalar = typeof datum == 'string' || typeof datum == 'number' || datum instanceof String;
            if (datum) {
                if (isScalar) {
                    lookup = {
                        index: i,
                        datum: {}
                    };
                    lookup.datum[self.mapping.id] = datum;
                    remoteLookups.push(lookup);
                } else if (datum instanceof SiestaModel) { // We won't need to perform any mapping.
                    this.objects[i] = datum;
                } else if (datum._id) {
                    localLookups.push({
                        index: i,
                        datum: datum
                    });
                } else if (datum[self.mapping.id]) {
                    remoteLookups.push({
                        index: i,
                        datum: datum
                    });
                } else {
                    // Create a new object if and only if the data has any fields that will actually
                    var datumFields = Object.keys(datum);
                    var objectFields = _.reduce(Object.keys(self.mapping.relationships).concat(self.mapping._fields), function(m, x) {
                        m[x] = {};
                        return m;
                    }, {});
                    var shouldCreateNewObject = false;
                    for (var j = 0; j < datumFields.length; j++) {
                        if (objectFields[datumFields[j]]) {
                            shouldCreateNewObject = true;
                            break;
                        }
                    }
                    if (shouldCreateNewObject) {
                        this.objects[i] = self.mapping._new();
                    }
                }
            } else {
                this.objects[i] = null;
            }
        }
    }
    util.parallel([
            function(callback) {
                var localIdentifiers = _.pluck(_.pluck(localLookups, 'datum'), '_id');
                if (localIdentifiers.length) {
                    Store.getMultipleLocal(localIdentifiers, function(err, objects) {
                        if (!err) {
                            for (var i = 0; i < localIdentifiers.length; i++) {
                                var obj = objects[i];
                                var _id = localIdentifiers[i];
                                var lookup = localLookups[i];
                                if (!obj) {
                                    self.errors[lookup.index] = {
                                        _id: 'No object with _id="' + _id.toString() + '"'
                                    };
                                } else {
                                    self.objects[lookup.index] = obj;
                                }
                            }
                        }
                        callback(err);
                    });
                } else {
                    callback();
                }
            },
            function(callback) {
                var remoteIdentifiers = _.pluck(_.pluck(remoteLookups, 'datum'), self.mapping.id);
                if (remoteIdentifiers.length) {
                    if (Logger.trace.isEnabled)
                        Logger.trace('Looking up remoteIdentifiers: ' + JSON.stringify(remoteIdentifiers, null, 4));
                    Store.getMultipleRemote(remoteIdentifiers, self.mapping, function(err, objects) {
                        if (!err) {
                            if (Logger.trace.isEnabled) {
                                var results = {};
                                for (i = 0; i < objects.length; i++) {
                                    results[remoteIdentifiers[i]] = objects[i] ? objects[i]._id : null;
                                }
                                Logger.trace('Results for remoteIdentifiers: ' + JSON.stringify(results, null, 4));
                            }
                            for (i = 0; i < objects.length; i++) {
                                var obj = objects[i];
                                var lookup = remoteLookups[i];
                                if (obj) {
                                    self.objects[lookup.index] = obj;
                                } else {
                                    var data = {};
                                    var remoteId = remoteIdentifiers[i];
                                    data[self.mapping.id] = remoteId;
                                    var cacheQuery = {
                                        mapping: self.mapping
                                    };
                                    cacheQuery[self.mapping.id] = remoteId;
                                    var cached = cache.get(cacheQuery);
                                    if (cached) {
                                        self.objects[lookup.index] = cached;
                                    } else {
                                        self.objects[lookup.index] = self.mapping._new();
                                        // It's important that we map the remote identifier here to ensure that it ends
                                        // up in the cache.
                                        self.objects[lookup.index][self.mapping.id] = remoteId;
                                    }
                                }
                            }
                        }
                        callback(err);
                    });
                } else {
                    callback();
                }
            }
        ],
        callback);
    return deferred.promise;
};

BulkMappingOperation.prototype._lookupSingleton = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var self = this;
    var cachedSingleton = cache.get({
        mapping: this.mapping
    });
    if (!cachedSingleton) {
        var query = new Query(this.mapping);
        query.execute(function(err, objs) {
            if (!err) {
                var obj;
                if (objs.length) {
                    if (objs.length == 1) {
                        obj = objs[0];
                    } else {
                        throw new InternalSiestaError();
                    }
                } else {
                    obj = self.mapping._new();
                }
                for (var i = 0; i < self.data.length; i++) {
                    self.objects[i] = obj;
                }
            }
            callback(err);
        });
    } else {
        for (var i = 0; i < self.data.length; i++) {
            self.objects[i] = cachedSingleton;
        }
        callback();
    }
    return deferred.promise;
};

BulkMappingOperation.prototype._start = function(done) {
    if (this.data.length) {
        var self = this;
        var tasks = [];
        var lookupFunc = this.mapping.singleton ? this._lookupSingleton : this._lookup;
        tasks.push(_.bind(lookupFunc, this));
        tasks.push(_.bind(this._executeSubOperations, this));
        util.parallel(tasks, function() {
            self._map();
            done(self.errors.length ? self.errors : null, self.objects);
        });
    } else {
        done(null, []);
    }
};

function getRelatedData(name) {
    var indexes = [];
    var relatedData = [];
    for (var i = 0; i < this.data.length; i++) {
        var datum = this.data[i];
        if (datum) {
            if (datum[name]) {
                indexes.push(i);
                relatedData.push(datum[name]);
            }
        }
    }
    return {
        indexes: indexes,
        relatedData: relatedData
    };
}

BulkMappingOperation.prototype._constructSubOperations = function() {
    var subOps = this.subOps;
    var relationships = this.mapping.relationships;
    for (var name in relationships) {
        if (relationships.hasOwnProperty(name)) {
            var relationship = relationships[name];
            var reverseMapping = relationship.forwardName == name ? relationship.reverseMapping : relationship.forwardMapping;
            var __ret = getRelatedData.call(this, name);
            var indexes = __ret.indexes;
            var relatedData = __ret.relatedData;
            if (relatedData.length) {
                var flatRelatedData = flattenArray(relatedData);
                var op = new BulkMappingOperation({
                    mapping: reverseMapping,
                    data: flatRelatedData
                });
                op.__relationshipName = name;
                subOps[name] = {
                    op: op,
                    indexes: indexes
                };
            }
        }
    }
};

function gatherErrorsFromSubOperations() {
    var self = this;
    var relationshipNames = _.keys(this.subOps);
    _.each(relationshipNames, function(name) {
        var op = self.subOps[name].op;
        var indexes = self.subOps[name].indexes;
        var errors = op.errors;
        if (errors.length) {
            var relatedData = getRelatedData.call(self, name).relatedData;
            var unflattenedErrors = unflattenArray(errors, relatedData);
            for (var i = 0; i < unflattenedErrors.length; i++) {
                var idx = indexes[i];
                var err = unflattenedErrors[i];
                var isError = err;
                if (util.isArray(err)) isError = _.reduce(err, function(memo, x) {
                    return memo || x
                }, false);
                if (isError) {
                    if (!self.errors[idx]) self.errors[idx] = {};
                    self.errors[idx][name] = err;
                }
            }
        }
    });
}

BulkMappingOperation.prototype._executeSubOperations = function(callback) {
    var self = this;
    this._constructSubOperations();
    var relationshipNames = _.keys(this.subOps);
    if (relationshipNames.length) {
        var subOperations = _.map(relationshipNames, function(k) {
            return self.subOps[k].op
        });
        var compositeOperation = new Operation(subOperations);
        compositeOperation.onCompletion(function() {
            gatherErrorsFromSubOperations.call(self, relationshipNames);
            callback();
        });
        compositeOperation.start();
    } else {
        callback();
    }
};

exports.BulkMappingOperation = BulkMappingOperation;
exports.flattenArray = flattenArray;
exports.unflattenArray = unflattenArray;
},{"../src/error":47,"../vendor/operations.js/src/log":107,"../vendor/operations.js/src/operation":108,"./cache":43,"./changes":44,"./misc":51,"./object":53,"./query":57,"./store":59,"./util":60,"q":42}],51:[function(require,module,exports){
var InternalSiestaError = require('./error').InternalSiestaError;

function assert(condition, message, context) {
    if (!condition) {
        message = message || "Assertion failed";
        context = context || {};
        throw new InternalSiestaError(message, context);
    }
}

function defineSubProperty (property, subObj, innerProperty) {
    return Object.defineProperty(this, property, {
        get: function () {
            if (innerProperty) {
                return subObj[innerProperty];
            }
            else {
                return subObj[property];
            }
        },
        set: function (value) {
            if (innerProperty) {
                subObj[innerProperty] = value;
            }
            else {
                subObj[property] = value;
            }
        },
        enumerable: true,
        configurable: true
    });
}

var guid = (function () {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }

    return function () {
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
})();

function wrappedCallback (callback) {
    return function (err, res) {
        if (callback) callback(err, res);
    }
}

exports.assert = assert;
exports.defineSubProperty = defineSubProperty;
exports.guid = guid;
exports.wrappedCallback = wrappedCallback;
},{"./error":47}],52:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var notificationCentre = new EventEmitter();
notificationCentre.setMaxListeners(100);
var ArrayObserver = require('../vendor/observe-js/src/observe').ArrayObserver;
var coreChanges = require('./changes');
var ChangeType = coreChanges.ChangeType;
var log = require('../vendor/operations.js/src/log');

/**
* Wraps the methods of a javascript array object so that notifications are sent
* on calls.
*
* @param array the array we have wrapping
* @param field name of the field
* @param restObject the object to which this array is a property
*/
function wrapArray(array, field, siestaModel) {
    if (!array.observer) {
        array.observer = new ArrayObserver(array);
        array.observer.open(function (splices) {
            var fieldIsAttribute = siestaModel._fields.indexOf(field) > -1;
            if (fieldIsAttribute) {
                splices.forEach(function (splice) {
                    coreChanges.registerChange({
                        collection: siestaModel.collection,
                        mapping: siestaModel.mapping.type,
                        _id: siestaModel._id,
                        index: splice.index,
                        removed: splice.removed,
                        added: splice.addedCount ? array.slice(splice.index, splice.index+splice.addedCount) : [],
                        type: coreChanges.ChangeType.Splice,
                        field: field,
                        obj: siestaModel
                    });
                });
            }
        });
        array.isFault = false;
    }
}

exports.notificationCentre = notificationCentre;
exports.wrapArray = wrapArray;
},{"../vendor/observe-js/src/observe":106,"../vendor/operations.js/src/log":107,"./changes":44,"events":7}],53:[function(require,module,exports){
var log = require('../vendor/operations.js/src/log');
var Logger = log.loggerWithName('SiestaModel');
Logger.setLevel(log.Level.warn);

var defineSubProperty = require('./misc').defineSubProperty;
//var OperationQueue = require('../vendor/operations.js/src/queue').OperationQueue;
var util = require('./util');
var _ = util._;
var error = require('./error');
var InternalSiestaError = error.InternalSiestaError;
var coreChanges = require('./changes');

var q = require('q');

var cache = require('./cache');

//var queues = {};

function SiestaModel(mapping) {

    if (!this) {
        return new SiestaModel(mapping);
    }
    var self = this;
    this.mapping = mapping;
    Object.defineProperty(this, 'idField', {
        get: function() {
            return self.mapping.id ? self.mapping.id : 'id';
        },
        enumerable: true,
        configurable: true
    });
    defineSubProperty.call(this, 'type', this.mapping);
    defineSubProperty.call(this, 'collection', this.mapping);
    defineSubProperty.call(this, '_fields', this.mapping);
    Object.defineProperty(this, '_relationshipFields', {
        get: function() {
            return _.map(self._proxies, function(p) {
                if (p.isForward) {
                    return p.forwardName;
                } else {
                    return p.reverseName;
                }
            });
        },
        enumerable: true,
        configurable: true
    });


    this.isFault = false;

    Object.defineProperty(this, 'isSaved', {
        get: function() {
            return !!self._rev;
        },
        enumerable: true,
        configurable: true
    });

    this._rev = null;

    this.removed = false;
}

/**
 * Human readable dump of this object
 * @returns {*}
 * @private
 */
SiestaModel.prototype._dump = function(asJson) {
    var self = this;
    var cleanObj = {};
    cleanObj.mapping = this.mapping.type;
    cleanObj.collection = this.collection;
    cleanObj._id = this._id;
    cleanObj = _.reduce(this._fields, function(memo, f) {
        if (self[f]) {
            memo[f] = self[f];
        }
        return memo;
    }, cleanObj);
    cleanObj = _.reduce(this._relationshipFields, function(memo, f) {
        if (self[f + 'Proxy']) {
            if (self[f + 'Proxy'].hasOwnProperty('_id')) {
                if (util.isArray(self[f + 'Proxy']._id)) {
                    if (self[f].length) {
                        memo[f] = self[f + 'Proxy']._id;
                    }
                } else if (self[f + 'Proxy']._id) {
                    memo[f] = self[f + 'Proxy']._id;
                }
            } else {
                memo[f] = self[f];
            }
        }
        return memo;
    }, cleanObj);

    return asJson ? JSON.stringify(cleanObj, null, 4) : cleanObj;
};


SiestaModel.prototype.get = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    callback(null, this);
    return deferred.promise;
};

SiestaModel.prototype.remove = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    cache.remove(this);
    this.removed = true;
    coreChanges.registerChange({
        collection: this.collection,
        mapping: this.mapping.type,
        _id: this._id,
        oldId: this._id,
        old: this,
        type: coreChanges.ChangeType.Remove,
        obj: this
    });
    callback(null, this);
    return deferred.promise;
}

SiestaModel.prototype.restore = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    if (this.removed) {
        cache.insert(this);
        this.removed = false;
    }
    coreChanges.registerChange({
        collection: this.collection,
        mapping: this.mapping.type,
        _id: this._id,
        newId: this._id,
        new: this,
        type: coreChanges.ChangeType.New,
        obj: this
    });
    callback(null, this);
    return deferred.promise;
}

exports.SiestaModel = SiestaModel;
exports.dumpSaveQueues = function() {
    var dumped = {};
    for (var id in queues) {
        if (queues.hasOwnProperty(id)) {
            var queue = queues[id];
            dumped[id] = {
                numRunning: queue.numRunningOperations,
                queued: queue._queuedOperations.length
            };
        }
    }
    return dumped;
};
},{"../vendor/operations.js/src/log":107,"./cache":43,"./changes":44,"./error":47,"./misc":51,"./util":60,"q":42}],54:[function(require,module,exports){
/**
 * @module relationships
 */

var proxy = require('./proxy')
    , RelationshipProxy = proxy.RelationshipProxy
    , Store = require('./store')
    , util = require('./util')
    , _ = util._
    , InternalSiestaError = require('./error').InternalSiestaError
    , coreChanges = require('./changes')
    , SiestaModel = require('./object').SiestaModel
    , notificationCentre = require('./notificationCentre')
    , wrapArrayForAttributes = notificationCentre.wrapArray
    , ArrayObserver = require('../vendor/observe-js/src/observe').ArrayObserver
    , ChangeType = require('./changes').ChangeType
    , q = require('q')
    ;

/**
 * @class  [OneToManyProxy description]
 * @constructor
 * @param {[type]} opts
 */
function OneToManyProxy(opts) {
    RelationshipProxy.call(this, opts);

    var self = this;
    Object.defineProperty(this, 'isFault', {
        get: function () {
            if (self.isForward) {
                if (self._id) {
                    return !self.related;
                }
                else if (self._id === null) {
                    return false;
                }
                return true;
            }
            else {
                if (self._id) {
                    if (self.related) {
                        if (self._id.length != self.related.length) {
                            validateRelated.call(this);
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    return true;
                }
                return true;
            }
        },
        set: function (v) {
            if (v) {
                self._id = undefined;
                self.related = null;
            }
            else {
                if (!self._id) {
                    if (self.isForward) {
                        self._id = null;
                    }
                    else {
                        self._id = [];
                        self.related = [];
                        wrapArray.call(self, self.related);
                    }
                }
            }
        }
    });
    this._reverseIsArray = true;
    this._forwardIsArray = false;
}

OneToManyProxy.prototype = Object.create(RelationshipProxy.prototype);


function clearReverse(removed) {
    var self = this;
    _.each(removed, function (removedObject) {
        var reverseProxy = proxy.getReverseProxyForObject.call(self, removedObject);
        proxy.set.call(reverseProxy, null);
    });
}

function setReverse(added) {
    var self = this;
    _.each(added, function (added) {
        var forwardProxy = proxy.getReverseProxyForObject.call(self, added);
        proxy.set.call(forwardProxy, self.object);
    });
}

function wrapArray(arr) {
    var self = this;
    wrapArrayForAttributes(arr, this.reverseName, this.object);
    if (!arr.oneToManyObserver) {
        arr.oneToManyObserver = new ArrayObserver(arr);
        var observerFunction = function (splices) {
            splices.forEach(function (splice) {
                var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
                var removed = splice.removed;
                clearReverse.call(self, removed);
                setReverse.call(self, added);
                var mapping = proxy.getForwardMapping.call(self);
                coreChanges.registerChange({
                    collection: mapping.collection,
                    mapping: mapping.type,
                    _id: self.object._id,
                    field: proxy.getForwardName.call(self),
                    removed: removed,
                    added: added,
                    removedId: _.pluck(removed, '_id'),
                    addedId: _.pluck(added, '_id'),
                    type: ChangeType.Splice,
                    index: splice.index,
                    obj: self.object
                });
            });
        };
        arr.oneToManyObserver.open(observerFunction);
    }
}


OneToManyProxy.prototype.get = function (callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var self = this;
    if (this.isFault) {
        if (this._id.length) {
            var storeOpts = {_id: this._id};
            Store.get(storeOpts, function (err, stored) {
                if (err) {
                    if (callback) callback(err);
                }
                else {
                    self.related = stored;
                    if (callback) callback(null, stored);
                }
            });
        }
        else if (callback) {
            callback(null, this.related);
        }
    }
    else {
        if (callback) callback(null, this.related);
    }
    return deferred.promise;
};

/**
 * Validate the object that we're setting
 * @param obj
 * @returns {string|null} An error message or null
 */
function validate(obj) {
    var str = Object.prototype.toString.call(obj);
    if (this.isForward) {
        if (str == '[object Array]') {
            return 'Cannot assign array forward oneToMany (' + str + '): ' + this.forwardName;
        }
    }
    else {
        if (str != '[object Array]') {
            return 'Cannot scalar to reverse oneToMany (' + str + '): ' + this.reverseName;
        }
    }
    return null;
}

function validateRelated() {
    var self = this;
    if (self._id) {
        if (self.related) {
            if (self._id.length != self.related.length) {
                if (self.related.length > 0) {
                    throw new InternalSiestaError('_id and related are somehow out of sync');
                }
            }
        }
    }
}

OneToManyProxy.prototype.set = function (obj) {
    proxy.checkInstalled.call(this);
    var self = this;
    if (obj) {
        var errorMessage;
        if (errorMessage = validate.call(this, obj)) {
            return errorMessage;
        }
        else {
            proxy.clearReverseRelated.call(this);
            proxy.set.call(self, obj);
            if (self.isReverse) {
                wrapArray.call(this, self.related);
            }
            proxy.setReverse.call(self, obj);
        }
    }
    else {
        proxy.clearReverseRelated.call(this);
        proxy.set.call(self, obj);
    }
};

OneToManyProxy.prototype.install = function (obj) {
    RelationshipProxy.prototype.install.call(this, obj);
    if (this.isReverse) {
        obj[ ('splice' + util.capitaliseFirstLetter(this.reverseName))] = _.bind(proxy.splice, this);
    }
};


exports.OneToManyProxy = OneToManyProxy;
},{"../vendor/observe-js/src/observe":106,"./changes":44,"./error":47,"./notificationCentre":52,"./object":53,"./proxy":56,"./store":59,"./util":60,"q":42}],55:[function(require,module,exports){
/**
 * @module relationships
 */

var proxy = require('./proxy')
    , RelationshipProxy = proxy.RelationshipProxy
    , Store = require('./store')
    , util = require('./util')
    , InternalSiestaError = require('./error').InternalSiestaError
    , q = require('q')
    , SiestaModel = require('./object').SiestaModel;

/**
 * [OneToOneProxy description]
 * @param {Object} opts
 */
function OneToOneProxy(opts) {
    RelationshipProxy.call(this, opts);
    this._reverseIsArray = false;
    this._forwardIsArray = false;
}

OneToOneProxy.prototype = Object.create(RelationshipProxy.prototype);

/**
 * Validate the object that we're setting
 * @param obj
 * @returns {string|null} An error message or null
 */
function validate(obj) {
    if (Object.prototype.toString.call(obj) == '[object Array]') {
        return 'Cannot assign array to one to one relationship';
    }
    else if ((!obj instanceof SiestaModel)) {

    }
    return null;
}

OneToOneProxy.prototype.set = function (obj) {
    proxy.checkInstalled.call(this);
    var self = this;
    if (obj) {
        var errorMessage;
        if (errorMessage = validate(obj)) {
            return errorMessage;
        }
        else {
            proxy.clearReverseRelated.call(this);
            proxy.set.call(self, obj);
            proxy.setReverse.call(self, obj);
        }
    }
    else {
        proxy.clearReverseRelated.call(this);
        proxy.set.call(self, obj);
    }
};

OneToOneProxy.prototype.get = function (callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var self = this;
    if (this._id) {
        Store.get({_id: this._id}, function (err, stored) {
            if (err) {
                if (callback) callback(err);
            }
            else {
                self.related = stored;
                if (callback) callback(null, stored);
            }
        })
    }
    return deferred.promise;
};

exports.OneToOneProxy = OneToOneProxy;
},{"./error":47,"./object":53,"./proxy":56,"./store":59,"./util":60,"q":42}],56:[function(require,module,exports){
/**
 * @module relationships
 */

var InternalSiestaError = require('./error').InternalSiestaError,
    Store = require('./store'),
    defineSubProperty = require('./misc').defineSubProperty,
    Operation = require('../vendor/operations.js/src/operation').Operation,
    util = require('./util'),
    _ = util._,
    Query = require('./query').Query,
    log = require('../vendor/operations.js/src/log'),
    notificationCentre = require('./notificationCentre'),
    wrapArrayForAttributes = notificationCentre.wrapArray,
    ArrayObserver = require('../vendor/observe-js/src/observe').ArrayObserver,
    coreChanges = require('./changes'),
    ChangeType = coreChanges.ChangeType;

/**
 * @class  [Fault description]
 * @param {RelationshipProxy} proxy
 * @constructor
 */
function Fault(proxy) {
    var self = this;
    this.proxy = proxy;
    Object.defineProperty(this, 'isFault', {
        get: function() {
            return self.proxy.isFault;
        },
        enumerable: true,
        configurable: true
    });
}

Fault.prototype.get = function() {
    this.proxy.get.apply(this.proxy, arguments);
};

Fault.prototype.set = function() {
    this.proxy.set.apply(this.proxy, arguments);
};

/**
 * @class  [RelationshipProxy description]
 * @param {Object} opts
 * @constructor
 */
function RelationshipProxy(opts) {
    this._opts = opts;
    if (!this) return new RelationshipProxy(opts);
    var self = this;
    this.fault = new Fault(this);
    this.object = null;
    this._id = undefined;
    this.related = null;
    Object.defineProperty(this, 'isFault', {
        get: function() {
            if (self._id) {
                return !self.related;
            } else if (self._id === null) {
                return false;
            }
            return true;
        },
        set: function(v) {
            if (v) {
                self._id = undefined;
                self.related = null;
            } else {
                if (!self._id) {
                    self._id = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    defineSubProperty.call(this, 'reverseMapping', this._opts);
    defineSubProperty.call(this, 'forwardMapping', this._opts);
    defineSubProperty.call(this, 'forwardName', this._opts);
    defineSubProperty.call(this, 'reverseName', this._opts);
    defineSubProperty.call(this, 'isReverse', this._opts);
    Object.defineProperty(this, 'isForward', {
        get: function() {
            return !self.isReverse;
        },
        set: function (v) {
            self.isReverse = !v;
        },
        enumerable: true,
        configurable: true
    });
    if (this._opts.isReverse === undefined && this._opts.isForward !== undefined) {
        this.isReverse = !this._opts.isForward;
    }
    else if (this._opts.isReverse === undefined && this._opts.isForward === undefined) {
        throw InternalSiestaError('Must specify either isReverse or isForward when configuring relationship proxy.');
    }
 }

RelationshipProxy.prototype._dump = function(asJson) {
    var dumped = {};
};

RelationshipProxy.prototype.install = function(obj) {
    if (obj) {
        if (!this.object) {
            this.object = obj;
            var self = this;
            var name = getForwardName.call(this);
            Object.defineProperty(obj, name, {
                get: function() {
                    if (self.isFault) {
                        return self.fault;
                    } else {
                        return self.related;
                    }
                },
                set: function(v) {
                    self.set(v);
                },
                configurable: true,
                enumerable: true
            });
            obj[('get' + util.capitaliseFirstLetter(name))] = _.bind(this.get, this);
            obj[('set' + util.capitaliseFirstLetter(name))] = _.bind(this.set, this);
            obj[name + 'Proxy'] = this;
            if (!obj._proxies) {
                obj._proxies = [];
            }
            obj._proxies.push(this);
        } else {
            throw new InternalSiestaError('Already installed.');
        }
    } else {
        throw new InternalSiestaError('No object passed to relationship install');
    }
};

RelationshipProxy.prototype.set = function(obj) {
    throw new InternalSiestaError('Must subclass RelationshipProxy');
};

RelationshipProxy.prototype.get = function(callback) {
    throw new InternalSiestaError('Must subclass RelationshipProxy');
};

function verifyMapping(obj, mapping) {
    if (obj.mapping != mapping) {
        var err = 'Mapping does not match. Expected ' + mapping.type + ' but got ' + obj.mapping.type;
        throw new InternalSiestaError(err);
    }
}

// TODO: Share code between getReverseProxyForObject and getForwardProxyForObject

function getReverseProxyForObject(obj) {
    var reverseName = getReverseName.call(this);
    var proxyName = (reverseName + 'Proxy');
    var reverseMapping = this.reverseMapping;
    // This should never happen. Should g   et caught in the mapping operation?
    if (util.isArray(obj)) {
        // _.each(obj, function(o) {
        //     verifyMapping(o, this.forwardMapping);
        // });
        return _.pluck(obj, proxyName);
    } else {
        // verifyMapping(obj, this.forwardMapping);
        var proxy = obj[proxyName];
        if (!proxy) {
            var err = 'No proxy with name "' + proxyName + '" on mapping ' + reverseMapping.type;
            throw new InternalSiestaError(err);
        }
        return proxy;
    }
}

function getForwardProxyForObject(obj) {
    var forwardName = getForwardName.call(this);
    var proxyName = forwardName + 'Proxy';
    var forwardMapping = this.forwardMapping;
    if (util.isArray(obj)) {
        // _.each(obj, function(o) {
        //     verifyMapping(o, this.reverseMapping);
        // });
        return _.pluck(obj, proxyName);
    } else {
        // verifyMapping(obj, this.reverseMapping);
        var proxy = obj[proxyName];
        if (!proxy) {
            var err = 'No proxy with name "' + proxyName + '" on mapping ' + forwardMapping.type;
            throw new InternalSiestaError(err);
        }
        return proxy;
    }
}

function getReverseName() {
    return this.isForward ? this.reverseName : this.forwardName;
}

function getForwardName() {
    return this.isForward ? this.forwardName : this.reverseName;
}

function getReverseMapping() {
    return this.isForward ? this.reverseMapping : this.forwardMapping;
}

function getForwardMapping() {
    return this.isForward ? this.forwardMapping : this.reverseMapping;
}

function checkInstalled() {
    if (!this.object) {
        throw new InternalSiestaError('Proxy must be installed on an object before can use it.');
    }
}

/**
 * Configure _id and related with the new related object.
 * @param obj
 */
function set(obj) {
    registerSetChange.call(this, obj);
    if (obj) {
        if (util.isArray(obj)) {
            this._id = _.pluck(obj, '_id');
            this.related = obj;
        } else {
            this._id = obj._id;
            this.related = obj;
        }
    } else {
        this._id = null;
        this.related = null;
    }
}

function splice(idx, numRemove) {
    registerSpliceChange.apply(this, arguments);
    var add = Array.prototype.slice.call(arguments, 2);
    var returnValue = _.partial(this._id.splice, idx, numRemove).apply(this._id, _.pluck(add, '_id'));
    if (this.related) {
        _.partial(this.related.splice, idx, numRemove).apply(this.related, add);
    }
    return returnValue;
}

function objAsString(obj) {
    function _objAsString(obj) {
        if (obj) {
            var mapping = obj.mapping;
            var mappingName = mapping.type;
            var ident = obj._id;
            if (typeof ident == 'string') {
                ident = '"' + ident + '"';
            }
            return mappingName + '[_id=' + ident + ']';
        } else if (obj === undefined) {
            return 'undefined';
        } else if (obj === null) {
            return 'null';
        }
    }

    if (util.isArray(obj)) return _.map(_objAsString, obj).join(', ');
    return _objAsString(obj);
}

function clearReverseRelated() {
    var self = this;
    if (!self.isFault) {
        if (this.related) {
            var reverseProxy = getReverseProxyForObject.call(this, this.related);
            var reverseProxies = util.isArray(reverseProxy) ? reverseProxy : [reverseProxy];
            _.each(reverseProxies, function(p) {
                if (util.isArray(p._id)) {
                    var idx = p._id.indexOf(self.object._id);
                    makeChangesToRelatedWithoutObservations.call(p, function() {
                        splice.call(p, idx, 1);
                    });
                } else {
                    set.call(p, null);
                }
            });
        }
    } else {
        if (self._id) {
            var reverseName = getReverseName.call(this);
            var reverseMapping = getReverseMapping.call(this);
            var identifiers = util.isArray(self._id) ? self._id : [self._id];
            if (this._reverseIsArray) {
                _.each(identifiers, function(_id) {
                    coreChanges.registerChange({
                        collection: reverseMapping.collection,
                        mapping: reverseMapping.type,
                        _id: _id,
                        field: reverseName,
                        removedId: [self.object._id],
                        removed: [self.object],
                        type: ChangeType.Delete,
                        obj: self.object
                    });
                });
            } else {
                _.each(identifiers, function(_id) {
                    coreChanges.registerChange({
                        collection: reverseMapping.collection,
                        mapping: reverseMapping.type,
                        _id: _id,
                        field: reverseName,
                        new: null,
                        newId: null,
                        oldId: self.object._id,
                        old: self.object,
                        type: ChangeType.Set,
                        obj: self.object
                    });
                });
            }

        } else {
            throw new Error(getForwardName.call(this) + ' has no _id');
        }
    }
}

function makeChangesToRelatedWithoutObservations(f) {
    if (this.related) {
        this.related.oneToManyObserver.close();
        this.related.oneToManyObserver = null;
        f();
        wrapArray.call(this, this.related);
    } else {
        // If there's a fault we can make changes anyway.
        f();
    }
}

function setReverse(obj) {
    var self = this;
    var reverseProxy = getReverseProxyForObject.call(this, obj);
    var reverseProxies = util.isArray(reverseProxy) ? reverseProxy : [reverseProxy];
    _.each(reverseProxies, function(p) {
        if (util.isArray(p._id)) {
            makeChangesToRelatedWithoutObservations.call(p, function() {
                splice.call(p, p._id.length, 0, self.object);
            });
        } else {
            clearReverseRelated.call(p);
            set.call(p, self.object);
        }
    });
}

function registerSetChange(obj) {
    var proxyObject = this.object;
    if (!proxyObject) throw new InternalSiestaError('Proxy must have an object associated');
    var mapping = proxyObject.mapping.type;
    var coll = proxyObject.collection;
    var newId;
    if (util.isArray(obj)) {
        newId = _.pluck(obj, '_id');
    } else {
        newId = obj ? obj._id : obj;
    }
    // We take [] == null == undefined in the case of relationships.
    var oldId = this._id;
    if (util.isArray(oldId) && !oldId.length) {
        oldId = null;
    }
    var old = this.related;
    if (util.isArray(old) && !old.length) {
        old = null;
    }
    coreChanges.registerChange({
        collection: coll,
        mapping: mapping,
        _id: proxyObject._id,
        field: getForwardName.call(this),
        newId: newId,
        oldId: oldId,
        old: old,
        new: obj,
        type: ChangeType.Set,
        obj: proxyObject
    });
}

function registerSpliceChange(idx, numRemove) {
    var add = Array.prototype.slice.call(arguments, 2);
    var mapping = this.object.mapping.type;
    var coll = this.object.collection;
    coreChanges.registerChange({
        collection: coll,
        mapping: mapping,
        _id: this.object._id,
        field: getForwardName.call(this),
        index: idx,
        removedId: this._id.slice(idx, idx + numRemove),
        removed: this.related ? this.related.slice(idx, idx + numRemove) : null,
        addedId: add.length ? _.pluck(add, '_id') : [],
        added: add.length ? add : [],
        type: ChangeType.Splice,
        obj: this.object
    });
}


function wrapArray(arr) {
    var self = this;
    wrapArrayForAttributes(arr, this.reverseName, this.object);
    if (!arr.oneToManyObserver) {
        arr.oneToManyObserver = new ArrayObserver(arr);
        var observerFunction = function(splices) {
            splices.forEach(function(splice) {
                var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
                var mapping = getForwardMapping.call(self);
                coreChanges.registerChange({
                    collection: mapping.collection,
                    mapping: mapping.type,
                    _id: self.object._id,
                    field: getForwardName.call(self),
                    removed: splice.removed,
                    added: added,
                    removedId: _.pluck(splice.removed, '_id'),
                    addedId: _.pluck(splice.added, '_id'),
                    type: ChangeType.Splice,
                    obj: self.object
                });
            });
        };
        arr.oneToManyObserver.open(observerFunction);
    }
}

exports.RelationshipProxy = RelationshipProxy;
exports.Fault = Fault;
exports.getReverseProxyForObject = getReverseProxyForObject;
exports.getForwardProxyForObject = getForwardProxyForObject;
exports.getReverseName = getReverseName;
exports.getForwardName = getForwardName;
exports.getReverseMapping = getReverseMapping;
exports.getForwardMapping = getForwardMapping;
exports.checkInstalled = checkInstalled;
exports.set = set;
exports.registerSetChange = registerSetChange;
exports.splice = splice;
exports.clearReverseRelated = clearReverseRelated;
exports.setReverse = setReverse;
exports.objAsString = objAsString;
exports.wrapArray = wrapArray;
exports.registerSpliceChange = registerSpliceChange;
exports.makeChangesToRelatedWithoutObservations = makeChangesToRelatedWithoutObservations;
},{"../vendor/observe-js/src/observe":106,"../vendor/operations.js/src/log":107,"../vendor/operations.js/src/operation":108,"./changes":44,"./error":47,"./misc":51,"./notificationCentre":52,"./query":57,"./store":59,"./util":60}],57:[function(require,module,exports){
/**
 * @module query
 */

var log = require('../vendor/operations.js/src/log');
var cache = require('./cache');
var Logger = log.loggerWithName('Query');
var q = require('q');
var util = require('./util');
Logger.setLevel(log.Level.warn);

/**
 * @class  [Query description]
 * @param {Mapping} mapping
 * @param {Object} opts
 */
function Query(mapping, opts) {
    this.mapping = mapping;
    this.query = opts;
}

/**
 * If the storage extension is enabled, objects may be faulted and so we need to query via PouchDB. The storage
 * extension provides the RawQuery class to enable this.
 * @param callback
 * @private
 */
function _executeUsingStorageExtension(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var storageExtension = siesta.ext.storage;
    var RawQuery = storageExtension.RawQuery;
    var Pouch = storageExtension.Pouch;
    var rawQuery = new RawQuery(this.mapping.collection, this.mapping.type, this.query);
    rawQuery.execute(function(err, results) {
        if (err) {
            callback(err);
        } else {
            if (Logger.debug.isEnabled)
                Logger.debug('got results', results);
            if (callback) callback(null, Pouch.toSiesta(results));
        }
    });
    return deferred.promise;
}

/**
 * Returns true if the given object matches the query.
 * @param {SiestaModel} obj
 * @returns {boolean}
 */
function objectMatchesQuery(obj) {
    var fields = Object.keys(this.query);
    for (var i = 0; i < fields.length; i++) {
        var origField = fields[i];
        var splt = origField.split('__');
        var op = 'e';
        var field;
        if (splt.length == 2) {
            field = splt[0]
            op = splt[1];
        } else {
            field = origField;
        }
        var queryObj = this.query[origField];
        var val = obj[field];
        if (op == 'e') {
            if (val != queryObj) {
                return false;
            }
        } else if (op == 'lt') {
            if (val >= queryObj) {
                return false;
            }
        } else if (op == 'lte') {
            if (val > queryObj) {
                return false;
            }
        } else if (op == 'gt') {
            if (val <= queryObj) {
                return false;
            }
        } else if (op == 'gte') {
            if (val < queryObj) {
                return false;
            }
        } else {
            return 'Query operator "' + op + '"' + ' does not exist';
        }
    }
    return true;
}

/**
 * If the storage extension is not enabled, we simply cycle through all objects of the type requested in memory.
 * @param callback
 * @private
 */
function _executeInMemory(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var cacheByType = cache._localCacheByType;
    var mappingName = this.mapping.type;
    var collectionName = this.mapping.collection;
    var cacheByMapping = cacheByType[collectionName];
    var cacheByLocalId;
    if (cacheByMapping) {
        cacheByLocalId = cacheByMapping[mappingName];
    }
    if (cacheByLocalId) {
        var keys = Object.keys(cacheByLocalId);
        var self = this;
        var res = [];
        var err;
        for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            var obj = cacheByLocalId[k];
            var matches = objectMatchesQuery.call(self, obj);
            if (typeof(matches) == 'string') {
                err = matches;
                break;
            } else {
                if (matches) res.push(obj);
            }
        }
        callback(err, err ? null : res);
    } else if (callback) {
        callback(null, []);
    }
    return deferred.promise;
}

Query.prototype.execute = function(callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    // if (siesta.ext.storageEnabled) {
    //     _executeUsingStorageExtension.call(this, callback);
    // }
    // else {
    _executeInMemory.call(this, callback);
    // }
    return deferred.promise;
};

Query.prototype._dump = function(asJson) {
    // TODO
    return asJson ? '{}' : {};
};

exports.Query = Query;
},{"../vendor/operations.js/src/log":107,"./cache":43,"./util":60,"q":42}],58:[function(require,module,exports){
/**
 * @module relationship
 */

/**
 * Constants that describe relationships for mappings.
 * @type {Object}
 */
RelationshipType = {
    OneToMany: 'OneToMany',
    OneToOne: 'OneToOne',
    ManyToMany: 'ManyToMany'
};

exports.RelationshipType = RelationshipType;
},{}],59:[function(require,module,exports){
/**
 * The "store" is responsible for mediating between the in-memory cache and any persistent storage.
 * Note that persistent storage has not been properly implemented yet and so this is pretty useless.
 * All queries will go straight to the cache instead.
 * @module store
 */

var wrappedCallback = require('./misc').wrappedCallback;
var InternalSiestaError = require('./error').InternalSiestaError;
var log = require('../vendor/operations.js/src/log');
var Logger = log.loggerWithName('Store');
Logger.setLevel(log.Level.warn);

var util = require('./util');
var _ = util._;
var cache = require('./cache');
var q = require('q');


/**
 * [get description]
 * @param  {Object}   opts
 * @param  {Function} callback
 * @return {Promise}
 * @example
 * ```js
 * var xyz = 'afsdf';
 * ```
 * @example
 * ```js
 * var abc = 'asdsd';
 * ```
 */
function get(opts, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    if (Logger.debug.isEnabled)
        Logger.debug('get', opts);
    var siestaModel;
    if (opts._id) {
        if (util.isArray(opts._id)) {
            // Proxy onto getMultiple instead.
            getMultiple(_.map(opts._id, function(id) {
                return {
                    _id: id
                }
            }), callback);
        } else {
            siestaModel = cache.get(opts);
            if (siestaModel) {
                if (Logger.debug.isEnabled)
                    Logger.debug('Had cached object', {
                        opts: opts,
                        obj: siestaModel
                    });
                wrappedCallback(callback)(null, siestaModel);
            } else {
                if (util.isArray(opts._id)) {
                    // Proxy onto getMultiple instead.
                    getMultiple(_.map(opts._id, function(id) {
                        return {
                            _id: id
                        }
                    }), callback);
                } else if (callback) {
                    var storage = siesta.ext.storage;
                    if (storage) {
                        storage.store.getFromPouch(opts, callback);
                    } else {
                        throw 'Storage module not installed'
                    }
                }
            }
        }
    } else if (opts.mapping) {
        if (util.isArray(opts[opts.mapping.id])) {
            // Proxy onto getMultiple instead.
            getMultiple(_.map(opts[opts.mapping.id], function(id) {
                var o = {};
                o[opts.mapping.id] = id;
                o.mapping = opts.mapping;
                return o
            }), callback);
        } else {
            siestaModel = cache.get(opts);
            if (siestaModel) {
                if (Logger.debug.isEnabled)
                    Logger.debug('Had cached object', {
                        opts: opts,
                        obj: siestaModel
                    });
                wrappedCallback(callback)(null, siestaModel);
            } else {
                var mapping = opts.mapping;
                if (mapping.singleton) {
                    mapping.get(callback);
                } else {
                    var idField = mapping.id;
                    var id = opts[idField];
                    if (id) {
                        mapping.get(id, function(err, obj) {
                            if (!err) {
                                if (obj) {
                                    callback(null, obj);
                                } else {
                                    callback(null, null);
                                }
                            } else {
                                callback(err);
                            }
                        });
                    } else {
                        wrappedCallback(callback)(new InternalSiestaError('Invalid options given to store. Missing "' + idField.toString() + '."', {
                            opts: opts
                        }));
                    }
                }

            }
        }
    } else {
        // No way in which to find an object locally.
        var context = {
            opts: opts
        };
        var msg = 'Invalid options given to store';
        Logger.error(msg, context);
        wrappedCallback(callback)(new InternalSiestaError(msg, context));
    }
    return deferred.promise;
}

function getMultiple(optsArray, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var docs = [];
    var errors = [];
    _.each(optsArray, function(opts) {
        get(opts, function(err, doc) {
            if (err) {
                errors.push(err);
            } else {
                docs.push(doc);
            }
            if (docs.length + errors.length == optsArray.length) {
                if (callback) {
                    if (errors.length) {
                        callback(errors);
                    } else {
                        callback(null, docs);
                    }
                }
            }
        });
    });
    return deferred.promise;
}
/**
 * Uses pouch bulk fetch API. Much faster than getMultiple.
 * @param localIdentifiers
 * @param callback
 */
function getMultipleLocal(localIdentifiers, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var results = _.reduce(localIdentifiers, function(memo, _id) {
        var obj = cache.get({
            _id: _id
        });
        if (obj) {
            memo.cached[_id] = obj;
        } else {
            memo.notCached.push(_id);
        }
        return memo;
    }, {
        cached: {},
        notCached: []
    });

    function finish(err) {
        if (callback) {
            if (err) {
                callback(err);
            } else {
                callback(null, _.map(localIdentifiers, function(_id) {
                    return results.cached[_id];
                }));
            }
        }
    }
    if (siesta.ext.storageEnabled && results.notCached.length) {
        siesta.ext.storage.store.getMultipleLocalFromCouch(results, finish);
    } else {
        finish();
    }
    return deferred.promise;
}

function getMultipleRemote(remoteIdentifiers, mapping, callback) {
    var deferred = q.defer();
    callback = util.constructCallbackAndPromiseHandler(callback, deferred);
    var results = _.reduce(remoteIdentifiers, function(memo, id) {
        var cacheQuery = {
            mapping: mapping
        };
        cacheQuery[mapping.id] = id;
        var obj = cache.get(cacheQuery);
        if (obj) {
            memo.cached[id] = obj;
        } else {
            memo.notCached.push(id);
        }
        return memo;
    }, {
        cached: {},
        notCached: []
    });

    function finish(err) {
        if (callback) {
            if (err) {
                callback(err);
            } else {
                callback(null, _.map(remoteIdentifiers, function(id) {
                    return results.cached[id];
                }));
            }
        }
    }

    if (siesta.ext.storageEnabled && results.notCached.length) {
        siesta.ext.storage.store.getMultipleRemoteFrompouch(mapping, remoteIdentifiers, results, finish);
    } else {
        finish();
    }
    return deferred.promise;
}

exports.get = get;
exports.getMultiple = getMultiple;
exports.getMultipleLocal = getMultipleLocal;
exports.getMultipleRemote = getMultipleRemote;
},{"../vendor/operations.js/src/log":107,"./cache":43,"./error":47,"./misc":51,"./util":60,"q":42}],60:[function(require,module,exports){
/*
 * This is a collection of utilities taken from libraries such as async.js, underscore.js etc.
 * @module util
 */

function printStackTrace() {
    var e = new Error('printStackTrace');
    var stack = e.stack;
    console.log(stack);
}

function capitaliseFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

exports.printStackTrace = printStackTrace;
exports.capitaliseFirstLetter = capitaliseFirstLetter;

var root = {};
// START async.js //

var isArray = Array.isArray || function(obj) {
    return _toString.call(obj) === '[object Array]';
};

function doParallel(fn) {
    return function() {
        var args = Array.prototype.slice.call(arguments);
        return fn.apply(null, [each].concat(args));
    };
}

var map = doParallel(_asyncMap);

function _map(arr, iterator) {
    if (arr.map) {
        return arr.map(iterator);
    }
    var results = [];
    each(arr, function(x, i, a) {
        results.push(iterator(x, i, a));
    });
    return results;
}

function _asyncMap(eachfn, arr, iterator, callback) {
    arr = _map(arr, function(x, i) {
        return {
            index: i,
            value: x
        };
    });
    if (!callback) {
        eachfn(arr, function(x, callback) {
            iterator(x.value, function(err) {
                callback(err);
            });
        });
    } else {
        var results = [];
        eachfn(arr, function(x, callback) {
            iterator(x.value, function(err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function(err) {
            callback(err, results);
        });
    }
}

var mapSeries = doSeries(_asyncMap);

function doSeries(fn) {
    return function() {
        var args = Array.prototype.slice.call(arguments);
        return fn.apply(null, [eachSeries].concat(args));
    };
}



function eachSeries(arr, iterator, callback) {
    callback = callback || function() {};
    if (!arr.length) {
        return callback();
    }
    var completed = 0;
    var iterate = function() {
        iterator(arr[completed], function(err) {
            if (err) {
                callback(err);
                callback = function() {};
            } else {
                completed += 1;
                if (completed >= arr.length) {
                    callback();
                } else {
                    iterate();
                }
            }
        });
    };
    iterate();
}




function _each(arr, iterator) {
    if (arr.forEach) {
        return arr.forEach(iterator);
    }
    for (var i = 0; i < arr.length; i += 1) {
        iterator(arr[i], i, arr);
    }
}

function each(arr, iterator, callback) {
    callback = callback || function() {};
    if (!arr.length) {
        return callback();
    }
    var completed = 0;
    _each(arr, function(x) {
        iterator(x, only_once(done));
    });

    function done(err) {
        if (err) {
            callback(err);
            callback = function() {};
        } else {
            completed += 1;
            if (completed >= arr.length) {
                callback();
            }
        }
    }
}

function keys(obj) {
    if (Object.keys) {
        return Object.keys(obj);
    }
    var keys = [];
    for (var k in obj) {
        if (obj.hasOwnProperty(k)) {
            keys.push(k);
        }
    }
    return keys;
}


var _parallel = function(eachfn, tasks, callback) {
    callback = callback || function() {};
    if (isArray(tasks)) {
        eachfn.map(tasks, function(fn, callback) {
            if (fn) {
                fn(function(err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    callback.call(null, err, args);
                });
            }
        }, callback);
    } else {
        var results = {};
        eachfn.each(keys(tasks), function(k, callback) {
            tasks[k](function(err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                results[k] = args;
                callback(err);
            });
        }, function(err) {
            callback(err, results);
        });
    }
};

function series(tasks, callback) {
    callback = callback || function() {};
    if (_isArray(tasks)) {
        mapSeries(tasks, function(fn, callback) {
            if (fn) {
                fn(function(err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    callback.call(null, err, args);
                });
            }
        }, callback);
    } else {
        var results = {};
        eachSeries(_keys(tasks), function(k, callback) {
            tasks[k](function(err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                results[k] = args;
                callback(err);
            });
        }, function(err) {
            callback(err, results);
        });
    }
}

function only_once(fn) {
    var called = false;
    return function() {
        if (called) throw new Error("Callback was already called.");
        called = true;
        fn.apply(root, arguments);
    }
}

function parallel(tasks, callback) {
    _parallel({
        map: map,
        each: each
    }, tasks, callback);
}

exports.series = series;
exports.parallel = parallel;
exports.isArray = isArray;

// END async.js //

// START underscore.js //

var _ = {};
var ArrayProto = Array.prototype;
var FuncProto = Function.prototype;

var nativeForEach = ArrayProto.forEach;
var nativeMap = ArrayProto.map;
var nativeReduce = ArrayProto.reduce;
var nativeBind = FuncProto.bind;
var slice = ArrayProto.slice;
var breaker = {};

_.keys = keys;

_.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
        obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
        for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
        }
    } else {
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
        }
    }
    return obj;
};

// Return the results of applying the iterator to each element.
// Delegates to **ECMAScript 5**'s native `map` if available.
_.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    _.each(obj, function(value, index, list) {
        results.push(iterator.call(context, value, index, list));
    });
    return results;
};

// Partially apply a function by creating a version that has had some of its
// arguments pre-filled, without changing its dynamic `this` context. _ acts
// as a placeholder, allowing any combination of arguments to be pre-filled.
_.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
        var position = 0;
        var args = boundArgs.slice();
        for (var i = 0, length = args.length; i < length; i++) {
            if (args[i] === _) args[i] = arguments[position++];
        }
        while (position < arguments.length) args.push(arguments[position++]);
        return func.apply(this, args);
    };
};

// Convenience version of a common use case of `map`: fetching a property.
_.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
};

var reduceError = 'Reduce of empty array with no initial value';

// **Reduce** builds up a single result from a list of values, aka `inject`,
// or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
_.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
        if (context) iterator = _.bind(iterator, context);
        return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    _.each(obj, function(value, index, list) {
        if (!initial) {
            memo = value;
            initial = true;
        } else {
            memo = iterator.call(context, memo, value, index, list);
        }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
};

_.property = function(key) {
    return function(obj) {
        return obj[key];
    };
};

// Optimize `isFunction` if appropriate.
if (typeof(/./) !== 'function') {
    _.isFunction = function(obj) {
        return typeof obj === 'function';
    };
}

// An internal function to generate lookup iterators.
var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
};

// Sort the object's values by a criterion produced by an iterator.
_.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
        return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
        };
    }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
        }
        return left.index - right.index;
    }), 'value');
};

var ctor = function() {};

// Create a function bound to a given object (assigning `this`, and arguments,
// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
// available.
_.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
        if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
        ctor.prototype = func.prototype;
        var self = new ctor;
        ctor.prototype = null;
        var result = func.apply(self, args.concat(slice.call(arguments)));
        if (Object(result) === result) return result;
        return self;
    };
};


// END underscore.js //

exports._ = _;
var observe = require('../vendor/observe-js/src/observe').Platform;

function next(callback) {
    observe.performMicrotaskCheckpoint();
    setTimeout(callback);
}


/**
 * Performs dirty check/Object.observe callbacks depending on the browser.
 *
 * If Object.observe is present,
 * @param callback
 */
exports.next = next;

/**
 * Returns a handler that acts upon a callback or a promise depending on the result of a different callback.
 * @param callback
 * @param [promise]
 * @returns {Function}
 */
exports.constructCallbackAndPromiseHandler = function(callback, promise) {
    return function(err) {
        if (callback) callback.apply(callback, arguments);
        if (promise) {
            if (err) promise.reject(err);
            else promise.resolve.apply(promise, Array.prototype.slice.call(arguments, 1));
        }
    };
};
},{"../vendor/observe-js/src/observe":106}],61:[function(require,module,exports){
var chai = require('chai');
var s = require('../index'),
    assert = chai.assert;

var mappingOperation = require('../src/mappingOperation');
var BulkMappingOperation = mappingOperation.BulkMappingOperation;
var util = require('../src/util');
var RelationshipType = require('../src/relationship').RelationshipType;
var Collection = require('../src/collection').Collection;
var cache = require('../src/cache');
var collection;
var Repo, User;

assert.arrEqual = function(arr1, arr2) {
    if (!util.isArray(arr1)) throw new chai.AssertionError(arr1.toString() + ' is not an array');
    if (!util.isArray(arr2)) throw new chai.AssertionError(arr2.toString() + ' is not an array');
    _.chain(arr1).zip(arr2).each(function(x) {
        if (util.isArray(x[0]) && util.isArray(x[1])) {
            assert.arrEqual(x[0], x[1]);
        } else if (x[0] != x[1]) {
            throw new chai.AssertionError(arr1.toString() + ' != ' + arr2.toString());
        }
    });
};

describe('array flattening', function() {
    describe('flatten', function() {
        it('mixture', function() {
            var flattened = mappingOperation.flattenArray(['1', ['2', '3'],
                ['4'], '5'
            ]);
            assert.arrEqual(['1', '2', '3', '4', '5'], flattened);
        });

        it('all arrays', function() {
            var flattened = mappingOperation.flattenArray([
                ['1'],
                ['2', '3'],
                ['4'],
                ['5']
            ]);
            assert.arrEqual(['1', '2', '3', '4', '5'], flattened);
        });

        it('no arrays', function() {
            var flattened = mappingOperation.flattenArray(['1', '2', '3', '4', '5']);
            assert.arrEqual(['1', '2', '3', '4', '5'], flattened);
        });
    });
    describe('unflatten', function() {
        it('mixture', function() {
            var unflattened = mappingOperation.unflattenArray(['a', 'b', 'c', 'd', 'e'], ['1', ['2', '3'],
                ['4'], '5'
            ]);
            assert.arrEqual(['a', ['b', 'c'],
                ['d'], 'e'
            ], unflattened);
        });
    });
});

describe('bulk mapping operation', function() {
    describe('general', function() {
        beforeEach(function(done) {
            s.reset(true);

            collection = new Collection('MyCollection');
            collection.baseURL = 'https://api.github.com';
            Repo = collection.mapping('Repo', {
                id: 'id',
                attributes: ['name', 'full_name', 'description'],
                relationships: {
                    owner: {
                        mapping: 'User',
                        type: RelationshipType.OneToMany,
                        reverse: 'repositories'
                    }
                }
            });
            User = collection.mapping('User', {
                id: 'id',
                attributes: ['login']
            });
            collection.install(done);
        });

        describe('errors', function() {

            describe('simple', function() {
                var op;

                beforeEach(function(done) {
                    var data = [{
                        login: 'mike',
                        id: '123',
                        repositories: 5 // Invalid
                    }, {
                        login: 'mike2',
                        id: '122315634',
                        repositories: [ // Valid
                            {
                                name: 'Repo'
                            }
                        ]
                    }, {
                        login: 'mike4',
                        id: '123124',
                        repositories: 'asdas' // Invalid
                    }, {
                        login: 'mike3',
                        id: '12324',
                        repositories: [ // Invalid
                            {
                                _id: 'nosuchlocalid'
                            }
                        ]
                    }];
                    op = new BulkMappingOperation({
                        mapping: User,
                        data: data
                    });
                    op.onCompletion(function() {
                        done();
                    });
                    op.start();

                });

                it('scalar int', function() {
                    assert.ok(op.error[0]);
                    assert.ok(op.error[0].repositories);
                });

                it('valid', function() {
                    assert.notOk(op.error[1]);
                });

                it('scalar string', function() {
                    assert.ok(op.error[2]);
                    assert.ok(op.error[2].repositories);
                });

                it('invalid _id', function() {
                    assert.ok(op.error[3]);
                    assert.ok(op.error[3].repositories);
                });

            });

            it('non-existent _id', function(done) {
                var data = [{
                    _id: 'nonexistant'
                }];

                var op = new BulkMappingOperation({
                    mapping: User,
                    data: data
                });
                op.onCompletion(function() {
                    assert.ok(op.error);
                    done();
                });
                op.start();
            });

            it('array to scalar', function(done) {
                var data = [{
                    owner: [5, 6]
                }];

                var op = new BulkMappingOperation({
                    mapping: Repo,
                    data: data
                });
                op.onCompletion(function() {
                    assert.ok(op.error);
                    done();
                });
                op.start();
            });

            it('scalar to array', function(done) {
                var data = [{
                    login: 'mike4',
                    id: '123124',
                    repositories: 5
                }];
                var op = new BulkMappingOperation({
                    mapping: User,
                    data: data
                });
                op.onCompletion(function() {
                    assert.ok(op.error);
                    done();
                });
                op.start();
            });


        });

        describe('new', function() {

            describe('foreign key', function() {

                describe('forward', function() {
                    it('sub operations', function() {
                        var owner = {
                            id: 6,
                            login: 'mike'
                        };
                        var data = [{
                            name: 'Repo',
                            full_name: 'A Big Repo',
                            description: 'Blah',
                            _id: 'sdfsd'
                        }, {
                            name: 'Repo2',
                            full_name: 'Another Big Repo',
                            description: 'Blsdah',
                            id: 'sdfsd',
                            owner: 5
                        }, {
                            name: 'Repo3',
                            full_name: 'Yet Another Big Repo',
                            description: 'Blahasdasd',
                            owner: owner
                        }];
                        var op = new BulkMappingOperation({
                            mapping: Repo,
                            data: data
                        });
                        op._constructSubOperations();
                        var ownerSubOperation = op.subOps.owner.op;
                        var ownerIndexes = op.subOps.owner.indexes;
                        assert.equal(ownerIndexes.length, 2);
                        assert.include(ownerIndexes, 1);
                        assert.include(ownerIndexes, 2);
                        assert.equal(ownerSubOperation.mapping, User);
                        assert.equal(ownerSubOperation.data[0], 5);
                        assert.equal(ownerSubOperation.data[1], owner);
                    });

                    it('none existing', function(done) {
                        var owner = {
                            id: 5,
                            login: 'mike'
                        };
                        var data = [{
                            name: 'Repo',
                            full_name: 'A Big Repo',
                            description: 'Blah',
                            id: 'remoteId1'
                        }, {
                            name: 'Repo2',
                            full_name: 'Another Big Repo',
                            description: 'Blsdah',
                            id: 'remoteId2',
                            owner: 5
                        }, {
                            name: 'Repo3',
                            full_name: 'Yet Another Big Repo',
                            description: 'Blahasdasd',
                            id: 'remoteId3',
                            owner: owner
                        }];
                        var op = new BulkMappingOperation({
                            mapping: Repo,
                            data: data
                        });
                        op.onCompletion(function() {
                            var err = op.error;
                            if (err) {
                                done(err);
                            }
                            var objects = this.objects;
                            var repo = objects[0];
                            var repo2 = objects[1];
                            var repo3 = objects[2];
                            // Check attributes have been mapped correctly.
                            assert.equal(repo.id, 'remoteId1');
                            assert.equal(repo.description, 'Blah');
                            assert.equal(repo.full_name, 'A Big Repo');
                            assert.equal(repo.name, 'Repo');
                            assert.equal(repo2.id, 'remoteId2');
                            assert.equal(repo2.description, 'Blsdah');
                            assert.equal(repo2.full_name, 'Another Big Repo');
                            assert.equal(repo2.name, 'Repo2');
                            assert.equal(repo3.id, 'remoteId3');
                            assert.equal(repo3.description, 'Blahasdasd');
                            assert.equal(repo3.full_name, 'Yet Another Big Repo');
                            assert.equal(repo3.name, 'Repo3');
                            // Check relationships have been mapped correctly.
                            assert.equal(repo2.owner, repo3.owner);
                            done();
                        });
                        op.start();
                    });

                });

                describe('reverse', function() {
                    it('none existing', function(done) {
                        var data = [{
                            login: 'mike',
                            id: '123',
                            repositories: [{
                                id: 5,
                                name: 'Repo',
                                full_name: 'A Big Repo'
                            }]
                        }];
                        var op = new BulkMappingOperation({
                            mapping: User,
                            data: data
                        });
                        op.onCompletion(function() {
                            if (op.error) {
                                console.error(JSON.stringify(op.error, null, 4));
                                done(op.error);
                            }
                            var objects = op.result;
                            assert.equal(objects.length, 1);
                            var obj = objects[0];
                            assert.equal(obj.login, 'mike');
                            assert.equal(obj.id, '123');
                            assert.equal(obj.repositories.length, 1);
                            var repo = obj.repositories[0];
                            assert.equal(repo.id, 5);
                            assert.equal(repo.name, 'Repo');
                            assert.equal(repo.full_name, 'A Big Repo');
                            assert.equal(repo.owner, obj);
                            done();
                        });
                        op.start();
                    });

                    it('existing', function(done) {
                        var repo = Repo._new({
                            id: '5',
                            name: 'Old Name',
                            full_name: 'Old Full Name',
                            collection: 'MyCollection',
                            type: 'Repo'
                        });
                        cache.insert(repo);
                        var data = [{
                            login: 'mike',
                            id: '123',
                            repositories: [{
                                id: '5',
                                name: 'Repo',
                                full_name: 'A Big Repo'
                            }]
                        }];
                        var op = new BulkMappingOperation({
                            mapping: User,
                            data: data
                        });
                        op.onCompletion(function() {
                            if (op.error) {
                                done(op.error);
                            } else {
                                var objects = op.result;
                                try {
                                    assert.equal(objects.length, 1);
                                    var obj = objects[0];
                                    assert.equal(obj.login, 'mike');
                                    assert.equal(obj.id, '123');
                                    assert.equal(obj.repositories.length, 1);
                                    var repo = obj.repositories[0];
                                    assert.equal(repo.id, 5);
                                    assert.equal(repo.name, 'Repo');
                                    assert.equal(repo.full_name, 'A Big Repo');
                                    assert.equal(repo.owner, obj);
                                    done();
                                } catch (err) {
                                    done(err);
                                }
                            }
                        });
                        op.start();

                    })
                });

            });

            describe('no relationships', function() {
                var op;

                describe('none existing', function() {
                    beforeEach(function() {
                        var data = [{
                            login: 'mike',
                            id: '123'
                        }, {
                            login: 'bob',
                            id: '1234'
                        }];
                        op = new BulkMappingOperation({
                            mapping: User,
                            data: data
                        });
                    });

                    it('lookup', function(done) {
                        op._lookup(function() {
                            assert.equal(op.objects.length, 2);
                            assert.notOk(op.objects[0].login);
                            assert.notOk(op.objects[1].login);
                            done();
                        });
                    });

                    it('completion', function(done) {
                        op.onCompletion(function() {
                            var objects = op.result;
                            assert.equal(objects.length, 2);
                            var mike = objects[0];
                            var bob = objects[1];
                            assert.equal(mike.login, 'mike');
                            assert.equal(mike.id, '123');
                            assert.equal(bob.login, 'bob');
                            assert.equal(bob.id, '1234');
                            done();
                        });
                        op.start();
                    });

                });


            });
        });
    });

    describe('singleton...', function() {
        var op;

        beforeEach(function(done) {
            s.reset(true);

            collection = new Collection('MyCollection');
            collection.baseURL = 'https://api.github.com';
            Repo = collection.mapping('Repo', {
                id: 'id',
                attributes: ['name', 'full_name', 'description'],
                relationships: {
                    owner: {
                        mapping: 'User',
                        type: RelationshipType.OneToMany,
                        reverse: 'repositories'
                    }
                }
            });
            User = collection.mapping('User', {
                id: 'id',
                attributes: ['login'],
                singleton: true
            });
            collection.install(done);
        });

        describe('new', function() {
            beforeEach(function() {
                var data = [{
                    login: 'mike',
                    id: '123'
                }, {
                    login: 'bob',
                    id: '1234'
                }];
                op = new BulkMappingOperation({
                    mapping: User,
                    data: data
                });
            });

            it('lookupSingleton', function(done) {
                op._lookupSingleton(function(err) {
                    if (!err) {
                        assert.equal(op.objects.length, 2);
                        assert.equal(op.objects[0], op.objects[1]);
                    }
                    done(err);
                });
            });

            it('map', function(done) {
                op.onCompletion(function() {
                    var err = op.error;
                    if (!err) {
                        assert.equal(op.objects.length, 2);
                        assert.equal(op.objects[0], op.objects[1]);
                        assert.equal(op.objects[0].login, 'bob');
                        assert.equal(op.objects[0].id, '1234');
                    }
                    done(err);
                });
                op.start();
            });
        });

        describe('existing, cached', function() {
            var obj;

            beforeEach(function() {
                obj = User._new({
                    id: '567'
                });
                var data = [{
                    login: 'mike',
                    id: '123'
                }, {
                    login: 'bob',
                    id: '1234'
                }];
                op = new BulkMappingOperation({
                    mapping: User,
                    data: data
                });
            });

            it('lookupSingleton', function(done) {
                op._lookupSingleton(function(err) {
                    if (!err) {
                        assert.equal(op.objects.length, 2);
                        assert.equal(op.objects[0], obj);
                        assert.equal(op.objects[0], op.objects[1]);
                    }
                    done(err);
                });
            });

            it('map', function(done) {
                op.onCompletion(function() {
                    var err = op.error;
                    if (!err) {
                        assert.equal(op.objects.length, 2);
                        assert.equal(op.objects[0], obj);
                        assert.equal(op.objects[0], op.objects[1]);
                        assert.equal(op.objects[0].login, 'bob');
                        assert.equal(op.objects[0].id, '1234');
                    }
                    done(err);
                });
                op.start();
            });
        });

    });

});

describe('bug', function() {

    var coll, Car;

    beforeEach(function(done) {
        siesta.reset(true);
        coll = new Collection('myCollection');
        Car = coll.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']

        });
        coll.install(done);
    });

    it('multiple objects', function(done) {
        var data = [{
            colour: 'red',
            name: 'Aston Martin',
            id: '1'
        }, {
            colour: 'blue',
            name: 'Bentley',
            id: '2'
        }, {
            colour: 'green',
            name: 'Lambo',
            id: '3'
        }];
        Car.map(data, function(err) {
            if (err) done(err);
            Car.map(data, function(err) {
                if (err) done(err);
                // TODO
                done();
            });
        });
    });
});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/mappingOperation":50,"../src/relationship":58,"../src/util":60,"chai":9}],62:[function(require,module,exports){
var siesta = require('../index');
var assert = require('chai').assert;

describe('cache...', function() {
    var mapping;

    var SiestaModel = require('../src/object').SiestaModel;
    var Collection = require('../src/collection').Collection;
    var RelationshipType = require('../src/relationship').RelationshipType;
    var cache = require('../src/cache');

    beforeEach(function(done) {
        siesta.reset(true); 
        var coll = new Collection('myCollection');
        mapping = coll.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']
        });
        coll.install(done);  
    });

    describe('insertion', function() {
        it('by pouch id', function() {
            var r = new SiestaModel(mapping);
            r._id = 'dsfsd';
            cache.insert(r);
            assert.equal(r, cache._localCache()[r._id]);
            assert.equal(r, cache._localCacheByType[r.mapping.collection][r.type][r._id], r);
        });

        it('by default id', function() {
            var r = new SiestaModel(mapping);
            r.id = 'dsfsd';
            cache.insert(r);

            var remoteCache = cache._remoteCache();
            assert.equal(r, remoteCache[r.collection][r.type][r.id]);
        });

        it('by custom id', function() {
            var m = mapping;
            m.id = 'customId';
            var r = new SiestaModel(m);
            r.customId = 'dsfsd';
            cache.insert(r);
            var remoteCache = cache._remoteCache();
            assert.equal(r, remoteCache[r.collection][r.type][r.customId]);
        });

    });

    describe('get', function() {
        it('by pouch id', function() {
            var r = new SiestaModel(mapping);
            r.id = 'dsfsd';
            cache.insert(r);
            var returned = cache.get({
                mapping: mapping,
                id: 'dsfsd'
            });
            assert.equal(returned, r);
        });
        it('by rest id', function() {
            var model = new SiestaModel(mapping);
            model.id = 'dsfsd';
            model._id = 'xyz';
            cache.insert(model);
            var returned = cache.get({
                mapping: mapping,
                id: 'dsfsd'
            });
            assert.equal(returned, model);
        });
    });

    describe('full test', function() {
        var collection, carMapping, personMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'Person',
                        type: RelationshipType.OneToMany,
                        reverse: 'cars'
                    }
                }
            });
            collection.baseURL = 'http://mywebsite.co.uk/';
            var desc = new siesta.ext.http.ResponseDescriptor({
                method: 'GET',
                mapping: carMapping,
                path: '/cars/(?<id>[0-9])/?'
            });
            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(desc);
            collection.install(done);
        });

        describe('errors', function() {
            it('ignore duplicate inserts if is the same object', function() {
                var person = personMapping._new({
                    name: 'Michael Ford',
                    age: 23,
                    id: 'xyz'
                });
                cache.insert(person);
                cache.insert(person); // Should be fine as is the exact same object.
            });

            it('cant insert object with same _id', function() {
                var person = personMapping._new({
                    name: 'Michael Ford',
                    age: 23,
                    id: 'xyz'
                });
                cache.insert(person);
                var duplicateObject = new SiestaModel();
                duplicateObject._id = person._id;
                assert.throws(function() {
                    cache.insert(duplicateObject);
                }, siesta.InternalSiestaError);
            });

            it('cant insert object with same id', function() {
                var person = personMapping._new({
                    name: 'Michael Ford',
                    age: 23,
                    id: 'xyz'
                });
                cache.insert(person);

                assert.throws(function() {
                    cache.insert(personMapping._new({
                        name: 'Michael Ford',
                        age: 23,
                        id: 'xyz'
                    }));
                }, siesta.InternalSiestaError);
            });
        });

    });

    describe('deletion', function () {
        it('xyz', function () {
            
        });
    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/object":53,"../src/relationship":58,"chai":9}],63:[function(require,module,exports){
var s = require('../index')
    , assert = require('chai').assert;

describe('change identifiers', function () {

    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');
    var collection, carMapping;

    var car;

    beforeEach(function (done) {
        s.reset(true);
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']
        });
        collection.install(function (err) {
            if (err) done(err);
            carMapping.map({id: 'xyz', colour: 'red', name: 'ford'}, function (err, _car) {
                if (err) done(err);
                car = _car;
                done();
            })
        });
    });

    it('xyz', function (done) {
        assert.equal(cache.get({id: 'xyz', mapping: carMapping}), car);
        car.id = 'abc';
        assert.notOk(cache.get({id: 'xyz', mapping: carMapping}), car);
        assert.equal(cache.get({id: 'abc', mapping: carMapping}), car);
        done();
    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"chai":9}],64:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;


describe('http!', function() {

    var Collection = require('../src/collection').Collection;
    var RelationshipType = require('../src/relationship').RelationshipType;
    var SiestaModel = require('../src/object').SiestaModel;
    var InternalSiestaError = require('../src/error').InternalSiestaError;

    var collection, carMapping, personMapping, vitalSignsMapping;

    var server;

    beforeEach(function() {
        s.reset(true);
        server = sinon.fakeServer.create();
    });

    function configureCollection(callback) {
        collection = new Collection('myCollection');
        personMapping = collection.mapping('Person', {
            id: 'id',
            attributes: ['name', 'age']
        });
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: RelationshipType.OneToMany,
                    reverse: 'cars'
                }
            }
        });
        vitalSignsMapping = collection.mapping('VitalSigns', {
            id: 'id',
            attributes: ['heartRate', 'bloodPressure'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: RelationshipType.OneToOne,
                    reverse: 'vitalSigns'
                }
            }
        });
        collection.baseURL = 'http://mywebsite.co.uk/';
        collection.install(callback);
    }

    afterEach(function() {
        // Restore original server implementation.
        server.restore();
    });


    describe('path regex', function() {


        describe('check', function() {

            beforeEach(function(done) {
                configureCollection(done);
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                    method: 'GET',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/(?<colour>[a-zA-Z0-9]+)/?'
                }));
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                    method: 'GET',
                    mapping: carMapping,
                    path: '/cars/(?<colour>[a-zA-Z0-9]+)/?'
                }));
            });

            describe('singular', function() {
                var err, obj, resp;

                beforeEach(function(done) {
                    var raw = {
                        colour: 'red',
                        name: 'Aston Martin',
                        owner: '093hodhfno',
                        id: '5'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/cars/9/purple/";
                    var method = "GET";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    collection.GET('cars/9/purple/', function(_err, _obj, _resp) {
                        err = _err;
                        obj = _obj;
                        resp = _resp;
                        done();
                    });
                    server.respond();
                });

                it('should map regex matches onto the object', function() {
                    assert.instanceOf(obj, SiestaModel);
                    assert.equal(obj.colour, 'purple');
                    assert.equal(obj.name, 'Aston Martin');
                    assert.equal(obj.id, '9');
                });
            });

            describe('multiple', function() {
                var err, objs, resp;

                beforeEach(function(done) {
                    var raw = [{
                        colour: 'red',
                        name: 'Aston Martin',
                        owner: '093hodhfno',
                        id: '5'
                    }, {
                        colour: 'green',
                        name: 'Aston Martin',
                        owner: '093hodhfno',
                        id: '2'
                    }, {
                        colour: 'orange',
                        name: 'Aston Martin',
                        owner: '093hodhfno',
                        id: '1'
                    }];
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/cars/purple/";
                    var method = "GET";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    collection.GET('cars/purple/', function(_err, _objs, _resp) {
                        err = _err;
                        objs = _objs;
                        resp = _resp;
                        done();
                    });
                    server.respond();
                });

                it('should map regex matches onto the object', function() {
                    assert.notOk(err);
                    assert.ok(objs.length);
                    _.each(objs, function(obj) {
                        assert.equal(obj.colour, 'purple');
                        assert.equal(obj.name, 'Aston Martin');
                    });

                });
            });


        });
    });

    describe('verbs', function() {

        describe('GET', function() {

            beforeEach(function(done) {

                configureCollection(done);

            });

            describe('success', function() {
                var err, obj, resp;

                describe('single', function() {
                    beforeEach(function(done) {
                        siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                            method: 'GET',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?'
                        }));
                        var raw = {
                            colour: 'red',
                            name: 'Aston Martin',
                            owner: '093hodhfno',
                            id: '5'
                        };
                        var headers = {
                            "Content-Type": "application/json"
                        };
                        var path = "http://mywebsite.co.uk/cars/5/";
                        var method = "GET";
                        var status = 200;
                        server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                        collection.GET('cars/5/', function(_err, _obj, _resp) {
                            err = _err;
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });

                    it('no error', function() {
                        assert.notOk(err);
                    });

                    it('returns data', function() {
                        assert.equal(resp.data.colour, 'red');
                        assert.equal(resp.data.name, 'Aston Martin');
                        assert.equal(resp.data.owner, '093hodhfno');
                        assert.equal(resp.data.id, '5');
                    });

                    it('returns text status', function() {
                        assert.equal(resp.textStatus, 'success');
                    });

                    it('returns jqxhr', function() {
                        assert.ok(resp.jqXHR);
                    });

                    it('returns a car object', function() {
                        assert.instanceOf(obj, SiestaModel);
                        assert.equal(obj.colour, 'red');
                        assert.equal(obj.name, 'Aston Martin');
                        assert.equal(obj.id, '5');
                    })
                });

                describe('multiple', function() {
                    beforeEach(function(done) {
                        siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                            method: 'GET',
                            mapping: carMapping,
                            path: '/cars/?'
                        }));
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            owner: 'ownerId',
                            id: '5'
                        }, {
                            colour: 'blue',
                            name: 'Bentley',
                            owner: 'ownerId',
                            id: '6'
                        }];
                        var headers = {
                            "Content-Type": "application/json"
                        };
                        var path = "http://mywebsite.co.uk/cars/";
                        var method = "GET";
                        var status = 200;
                        server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                        collection.GET('cars/', function(_err, _obj, _resp) {
                            if (_err) done(_err);
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });

                    it('returns 2 car objects', function() {
                        assert.equal(obj.length, 2);
                        _.each(obj, function(car) {
                            assert.instanceOf(car, SiestaModel);
                        })
                    });

                    it('maps owner onto same obj', function() {
                        assert.equal(obj[0].owner._id, obj[1].owner._id);
                        assert.equal(obj[0].owner.relatedObject, obj[1].owner.relatedObject);
                    });
                });
            });
        });

        describe('DELETE', function() {
            beforeEach(function(done) {
                configureCollection(done);
            });

            describe('success', function() {
                describe('default', function(done) {
                    var err, obj, resp, objectToDelete;

                    beforeEach(function(done) {
                        var data = {
                            id: 'xyz',
                            colour: 'red',
                            name: 'Aston Martin'
                        };
                        carMapping.map(data, function(err, _objectToDelete) {
                            if (err) done(err);
                            objectToDelete = _objectToDelete;
                            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                                method: 'DELETE',
                                mapping: carMapping,
                                path: '/cars/(?<id>[0-9])/?'
                            }));
                            var headers = {
                                "Content-Type": "application/json"
                            };
                            var path = "http://mywebsite.co.uk/cars/5/";
                            var method = "DELETE";
                            var status = 200;
                            server.respondWith(method, path, [status, headers, '{"status": "ok"}']);
                            collection.DELETE('cars/5/', _objectToDelete, function(_err, _obj, _resp) {
                                err = _err;
                                obj = _obj;
                                resp = _resp;
                                done();
                            });
                            server.respond();
                        });
                    });

                    it('no error', function() {
                        assert.notOk(err);
                    });

                    it('returns text status', function() {
                        assert.equal(resp.textStatus, 'success');
                    });

                    it('returns jqxhr', function() {
                        assert.ok(resp.jqXHR);
                    });

                    it('returns no object', function() {
                        assert.notOk(obj);
                    });

                    it('removed', function() {
                        assert.ok(objectToDelete.removed);
                    });
                });

                describe('delete now', function() {
                    it('should be removed', function(done) {
                        var data = {
                            id: 'xyz',
                            colour: 'red',
                            name: 'Aston Martin'
                        };
                        carMapping.map(data, function(err, _objectToDelete) {
                            if (err) done(err);
                            objectToDelete = _objectToDelete;
                            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                                method: 'DELETE',
                                mapping: carMapping,
                                path: '/cars/(?<id>[0-9])/?'
                            }));
                            var headers = {
                                "Content-Type": "application/json"
                            };
                            var path = "http://mywebsite.co.uk/cars/5/";
                            var method = "DELETE";
                            var status = 200;
                            server.respondWith(method, path, [status, headers, '{"status": "ok"}']);
                            collection.DELETE('cars/5/', _objectToDelete, {
                                deletionMode: 'now'
                            }, function(_err, _obj, _resp) {
                                assert.ok(_objectToDelete.removed)
                                done();
                            });
                            assert.ok(_objectToDelete.removed);
                            server.respond();
                        });
                    });
                });

                describe('on success', function() {
                    it('should only be removed once finished', function(done) {
                        var data = {
                            id: 'xyz',
                            colour: 'red',
                            name: 'Aston Martin'
                        };
                        carMapping.map(data, function(err, _objectToDelete) {
                            if (err) done(err);
                            objectToDelete = _objectToDelete;
                            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                                method: 'DELETE',
                                mapping: carMapping,
                                path: '/cars/(?<id>[0-9])/?'
                            }));
                            var headers = {
                                "Content-Type": "application/json"
                            };
                            var path = "http://mywebsite.co.uk/cars/5/";
                            var method = "DELETE";
                            var status = 200;
                            server.respondWith(method, path, [status, headers, '{"status": "ok"}']);
                            collection.DELETE('cars/5/', _objectToDelete, {
                                deletionMode: 'success'
                            }, function(_err, _obj, _resp) {
                                assert.ok(_objectToDelete.removed)
                                done();
                            });
                            assert.notOk(_objectToDelete.removed);
                            server.respond();
                        });
                    });
                });

                describe('restore', function() {
                    it('should be restored on failure', function(done) {
                        var data = {
                            id: 'xyz',
                            colour: 'red',
                            name: 'Aston Martin'
                        };
                        carMapping.map(data, function(err, _objectToDelete) {
                            if (err) done(err);
                            objectToDelete = _objectToDelete;
                            siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(new siesta.ext.http.ResponseDescriptor({
                                method: 'DELETE',
                                mapping: carMapping,
                                path: '/cars/(?<id>[0-9])/?'
                            }));
                            var headers = {
                                "Content-Type": "application/json"
                            };
                            var path = "http://mywebsite.co.uk/cars/5/";
                            var method = "DELETE";
                            var status = 500;
                            server.respondWith(method, path, [status, headers, '{"status": "ok"}']);
                            collection.DELETE('cars/5/', _objectToDelete, {
                                deletionMode: 'restore'
                            }, function(_err, _obj, _resp) {
                                assert.notOk(_objectToDelete.removed)
                                done();
                            });
                            assert.ok(_objectToDelete.removed);
                            server.respond();
                        });
                    });
                });
            });

        });

        describe('POST', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(done);
                var responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    method: 'POST',
                    mapping: carMapping,
                    path: 'cars/?'
                });
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
                var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                    method: 'POST',
                    mapping: carMapping,
                    path: 'cars/?'
                });
                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
            });

            describe('success', function() {
                var car;
                beforeEach(function(done) {
                    var raw = {
                        id: 'remoteId'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/cars/";
                    var method = "POST";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin'
                    }, function(err, _car) {
                        if (err) done(err);
                        car = _car;
                        assert.equal(car.colour, 'red');
                        assert.equal(car.name, 'Aston Martin');
                        collection.POST('cars/', car, function(_err, _obj, _resp) {
                            err = _err;
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });
                });

                it('no error', function() {
                    assert.notOk(err);
                });

                it('mapped onto the posted object', function() {
                    assert.equal(car, obj);
                    assert.equal(car.id, 'remoteId');
                    assert.equal(car.colour, 'red');
                    assert.equal(car.name, 'Aston Martin');
                });
            });
        });

        describe('PUT', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(done);
                var responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    method: 'PUT',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
                var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                    method: 'PUT',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
            });

            describe('success', function() {
                var car;
                beforeEach(function(done) {
                    var raw = {
                        colour: 'red',
                        name: 'Aston Martin',
                        id: '5'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/cars/5/";
                    var method = "PUT";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin',
                        id: '5'
                    }, function(err, _car) {
                        if (err) done(err);
                        car = _car;
                        assert.equal(car.colour, 'red');
                        assert.equal(car.name, 'Aston Martin');
                        assert.equal(car.id, '5');
                        collection.PUT('cars/5/', car, function(_err, _obj, _resp) {
                            err = _err;
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });
                });

                it('no error', function() {
                    assert.notOk(err);
                });

                it('mapped onto the posted object', function() {
                    assert.equal(obj, car);
                    assert.equal(car.id, '5');
                    assert.equal(car.colour, 'red');
                    assert.equal(car.name, 'Aston Martin');
                });
            });
        });

        describe('PATCH', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(function() {
                    var responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                        method: 'PATCH',
                        mapping: carMapping,
                        path: '/cars/(?<id>[0-9])/?'
                    });
                    siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
                    var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                        method: 'PATCH',
                        mapping: carMapping,
                        path: '/cars/(?<id>[0-9])/?'
                    });
                    siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
                    done();
                });
            });

            describe('success', function() {
                var car;
                beforeEach(function(done) {
                    var raw = {
                        colour: 'red',
                        name: 'Aston Martin',
                        id: '5'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/cars/5/";
                    var method = "PATCH";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin',
                        id: '5'
                    }, function(err, _car) {
                        if (err) done(err);
                        car = _car;
                        assert.equal(car.colour, 'red');
                        assert.equal(car.name, 'Aston Martin');
                        assert.equal(car.id, '5');
                        collection.PATCH('cars/5/', car, function(_err, _obj, _resp) {
                            err = _err;
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });
                });

                it('no error', function() {
                    assert.notOk(err);
                });

                it('mapped onto the posted object', function() {
                    assert.equal(obj, car);
                    assert.equal(car.id, '5');
                    assert.equal(car.colour, 'red');
                    assert.equal(car.name, 'Aston Martin');
                });

                it('')
            });




        });

        describe('OPTIONS', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(done);
            });

            describe('success', function() {
                beforeEach(function(done) {
                    var raw = {
                        option: 'something'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/something/";
                    var method = "OPTIONS";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    collection.OPTIONS('something/', function(_err, _obj, _resp) {
                        err = _err;
                        obj = _obj;
                        resp = _resp;
                        done();
                    });
                    server.respond();
                });
                it('no err', function() {
                    assert.notOk(err);
                });
                it('no obj', function() {
                    assert.notOk(obj);
                });
                it('resp', function() {
                    assert.ok(resp);
                })
            });
        });

        describe('HEAD', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(done);
            });

            describe('success', function() {
                beforeEach(function(done) {
                    var raw = {
                        option: 'something'
                    };
                    var headers = {
                        "Content-Type": "application/json"
                    };
                    var path = "http://mywebsite.co.uk/something/";
                    var method = "HEAD";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    collection.HEAD('something/', function(_err, _obj, _resp) {
                        err = _err;
                        obj = _obj;
                        resp = _resp;
                        done();
                    });
                    server.respond();
                });
                it('no err', function() {
                    assert.notOk(err);
                });
                it('no obj', function() {
                    assert.notOk(obj);
                });
                it('resp', function() {
                    assert.ok(resp);
                })
            });
        });

        /**
         * http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
         */
        describe('TRACE', function() {
            var err, obj, resp;
            beforeEach(function(done) {
                configureCollection(done);
                var responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    method: 'TRACE',
                    mapping: carMapping,
                    path: 'cars/'
                });
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
                var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                    method: 'TRACE',
                    mapping: carMapping,
                    path: 'cars/'
                });
                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
            });

            describe('success', function() {
                var car;
                beforeEach(function(done) {
                    var raw = {
                        colour: 'red'
                    }; // Trace is supposed to be a reflection of the response body.
                    var headers = {
                        "Content-Type": "message/http"
                    }; // http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
                    var path = "http://mywebsite.co.uk/cars/";
                    var method = "TRACE";
                    var status = 200;
                    server.respondWith(method, path, [status, headers, JSON.stringify(raw)]);
                    carMapping.map({
                        colour: 'red'
                    }, function(err, _car) {
                        car = _car;
                        collection.TRACE('cars/', _car, function(_err, _obj, _resp) {
                            err = _err;
                            obj = _obj;
                            resp = _resp;
                            done();
                        });
                        server.respond();
                    });
                });
                it('no err', function() {
                    assert.notOk(err);
                });
                it('obj', function() {
                    assert.ok(obj);
                });
                it('resp', function() {
                    assert.equal(resp.jqXHR.responseText, '{"colour":"red"}');
                    assert.ok(resp);
                })
            });
        });

    });

    describe('ajax', function() {
        var dollar;
        var fakeDollar = {
            ajax: function() {}
        }

        before(function() {
            dollar = $;
        });

        beforeEach(function() {
            $ = fakeDollar;
            jQuery = fakeDollar;
        });

        after(function() {
            $ = dollar;
        });

        it('default', function() {
            assert.equal(s.ext.http.ajax, fakeDollar.ajax);
        });

        it('no $', function() {
            $ = undefined;
            assert.equal(s.ext.http.ajax, fakeDollar.ajax);
        });

        it('no ajax at all', function() {
            $ = undefined;
            jQuery = undefined;
            assert.throws(function() {
                var a = s.ext.http.ajax;
            }, InternalSiestaError);
        });

        it('set ajax', function() {
            var fakeAjax = function() {};
            s.setAjax(fakeAjax);
            assert.equal(s.ext.http.ajax, fakeAjax);
            assert.equal(s.getAjax(), fakeAjax);
        });

    });

    describe('specific fields', function() {
        beforeEach(function(done) {
            configureCollection(function() {
                var responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    method: 'PATCH',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
                var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                    method: 'PATCH',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    id: '5'
                }, function(err, _car) {
                    if (err) done(err);
                    car = _car;
                    assert.equal(car.colour, 'red');
                    assert.equal(car.name, 'Aston Martin');
                    assert.equal(car.id, '5');
                    siesta.ext.http._serialiseObject.call(requestDescriptor, {fields:['colour']}, car, function (err, data){
                        if (err) done(err);
                        else {
                            console.log('data', data);
                            var keys = Object.keys(data);
                            assert.equal(keys.length, 1);
                            assert.equal(keys[0], 'colour');
                            done();
                        }
                    } );
                });
            });
        });

        it('xyz', function() {
            dump('hello');
        });
    });

});
},{"../index":1,"../src/collection":45,"../src/error":47,"../src/object":53,"../src/relationship":58,"chai":9}],65:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;


describe('collection setup', function() {

    var Collection = require('../src/collection').Collection;
    var InternalSiestaError = require('../src/error').InternalSiestaError;

    beforeEach(function() {
        s.reset(true);
    });

    describe('install', function() {
        var collection;
        beforeEach(function() {
            collection = new Collection('MyCollection');
        });

        it('not installed', function() {
            assert.notOk(collection.installed);
        });

        describe('configure without mappings', function() {
            it('eventually finishes', function(done) {
                collection.install(function(err) {
                    if (err) done(err);
                    done();
                });
            });

            it('raises an error if trying to configure twice', function(done) {
                collection.install(function(err) {
                    if (err) done(err);
                    collection.install(function(err) {
                        assert.ok(err);
                        done();
                    })
                });
            });

            it('is accessible in the siesta object', function(done) {
                collection.install(function(err) {
                    if (err) done(err);
                    assert.equal(s.MyCollection, collection);
                    done();
                });
            });
        });

        it('raises an error if trying to configure twice', function(done) {
            collection.install(function(err) {
                if (err) done(err);
                collection.install(function(err) {
                    assert.ok(err);
                    done();
                })
            });
        });

        describe('configure with mappings', function() {
            it('name before object', function(done) {
                var mapping1 = collection.mapping('mapping1', {
                    id: 'id',
                    attributes: ['attr1', 'attr2']
                });
                var mapping2 = collection.mapping('mapping2', {
                    id: 'id',
                    attributes: ['attr1', 'attr2', 'attr3']
                });
                collection.install(function(err) {
                    if (err) done(err);
                    assert.equal(collection['mapping1'], mapping1);
                    assert.equal(collection['mapping2'], mapping2);
                    done();
                });
            });

            it('name within object', function(done) {
                var mapping1 = collection.mapping({
                    name: 'mapping1',
                    id: 'id',
                    attributes: ['attr1', 'attr2']
                });
                var mapping2 = collection.mapping({
                    name: 'mapping2',
                    id: 'id',
                    attributes: ['attr1', 'attr2', 'attr3']
                });
                collection.install(function(err) {
                    if (err) done(err);
                    assert.equal(collection['mapping1'], mapping1);
                    assert.equal(collection['mapping2'], mapping2);
                    done();
                });
            });

            it('no name specified within object', function() {
                assert.throws(function() {
                    collection.mapping({
                        id: 'id',
                        attributes: ['attr1', 'attr2']
                    });
                }, InternalSiestaError);
            });

            it('vararg', function(done) {
                var mappings = collection.mapping({
                    name: 'mapping1',
                    id: 'id',
                    attributes: ['attr1', 'attr2']
                }, {
                    name: 'mapping2',
                    id: 'id',
                    attributes: ['attr1', 'attr2', 'attr3']
                });
                collection.install(function(err) {
                    if (err) done(err);
                    assert.equal(collection['mapping1'], mappings[0]);
                    assert.equal(collection['mapping2'], mappings[1]);
                    done();
                });
            });

            it('array', function(done) {
                var mappings = collection.mapping([{
                    name: 'mapping1',
                    id: 'id',
                    attributes: ['attr1', 'attr2']
                }, {
                    name: 'mapping2',
                    id: 'id',
                    attributes: ['attr1', 'attr2', 'attr3']
                }]);
                collection.install(function(err) {
                    if (err) done(err);
                    assert.equal(collection['mapping1'], mappings[0]);
                    assert.equal(collection['mapping2'], mappings[1]);
                    done();
                });
            });
        });

        describe('configure with descriptors', function() {
            var mapping1, mapping2;
            beforeEach(function() {
                mapping1 = collection.mapping('mapping1', {
                    id: 'id',
                    attributes: ['attr1', 'attr2']
                });
                mapping2 = collection.mapping({
                    name: 'mapping2',
                    id: 'id',
                    attributes: ['attr1', 'attr2', 'attr3']
                });
            });
            describe('request descriptor', function() {
                it('single', function(done) {
                    var descriptors = collection.descriptor({
                        method: 'POST',
                        mapping: mapping1,
                        path: '/path/(?<id>[0-9])/?'
                    });
                    assert.equal(descriptors.length, 1);
                    var requestDescriptor1 = descriptors[0];
                    assert.instanceOf(requestDescriptor1, siesta.ext.http.RequestDescriptor);
                    descriptors = collection.descriptor({
                        method: 'POST',
                        mapping: mapping2,
                        path: '/path/(?<id>[0-9])/?'
                    });
                    var requestDescriptor2 = descriptors[0];
                    assert.instanceOf(requestDescriptor2, siesta.ext.http.RequestDescriptor);
                    collection.install(function(err) {
                        if (err) {
                            done(err);
                        }
                        assert.equal(requestDescriptor1.mapping, mapping1);
                        assert.equal(requestDescriptor2.mapping, mapping2);
                        done();
                    })
                });


            });
            describe('response descriptor', function() {
                it('single', function(done) {
                    var descriptors = collection.descriptor({
                        method: 'GET',
                        mapping: mapping1,
                        path: '/path/(?<id>[0-9])/?'
                    });
                    assert.equal(descriptors.length, 1);
                    var responseDescriptor1 = descriptors[0];
                    assert.instanceOf(responseDescriptor1, siesta.ext.http.ResponseDescriptor);
                    var descriptors = collection.descriptor({
                        method: 'GET',
                        mapping: mapping2,
                        path: '/path/(?<id>[0-9])/?'
                    });
                    assert.equal(descriptors.length, 1);
                    var responseDescriptor2 = descriptors[0];
                    assert.instanceOf(responseDescriptor2, siesta.ext.http.ResponseDescriptor);
                    collection.install(function(err) {
                        if (err) {
                            done(err);
                        }
                        assert.equal(responseDescriptor1.mapping, mapping1);
                        assert.equal(responseDescriptor2.mapping, mapping2);
                        done();
                    })
                });

            });

            describe('both', function() {
                var descriptors;

                beforeEach(function(done) {
                    descriptors = collection.descriptor({
                        method: ['GET', 'POST'],
                        mapping: mapping1,
                        path: '/path/(?<id>[0-9])/?'
                    }); 
                    collection.install(done)
                });

                it('two descriptors', function() {
                    assert.equal(descriptors.length, 2);
                });

                it('types', function() {
                    var responseDescriptor1 = descriptors[0];
                    assert.instanceOf(responseDescriptor1, siesta.ext.http.RequestDescriptor);
                    var requestDescriptor1 = descriptors[1];
                    assert.instanceOf(requestDescriptor1, siesta.ext.http.ResponseDescriptor);
                });

                it('registration', function () {
                    var registry = siesta.ext.http.DescriptorRegistry;
                    console.log('registry', registry);
                    var requestDescriptors = registry.requestDescriptors.MyCollection;
                    var responseDescriptors = registry.responseDescriptors.MyCollection;
                    assert.equal(requestDescriptors.length, 1);
                    assert.equal(responseDescriptors.length, 1);
                });

            });
        });
    });

});
},{"../index":1,"../src/collection":45,"../src/error":47,"chai":9}],66:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('request descriptor', function() {

    var Collection = require('../src/collection').Collection;
    var InternalSiestaError = require('../src/error').InternalSiestaError;
    var RelationshipType = require('../src/relationship').RelationshipType;

    var collection, carMapping, personMapping;

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: RelationshipType.OneToMany,
                    reverse: 'cars'
                }
            }
        });
        personMapping = collection.mapping('Person', {
            id: 'id',
            attributes: ['name']
        });
        collection.install(done);
    });

    describe('matching', function() {

        describe('path', function() {
            it('match id', function() {
                var r = new siesta.ext.http.Descriptor({
                    path: '/cars/(?<id>[0-9])/?',
                    mapping: carMapping
                });
                var match = r._matchPath('/cars/5/');
                assert.equal(match.id, '5');
                match = r._matchPath('/cars/5');
                assert.equal(match.id, '5');
            });

            it('query params', function() {
                var descriptor = new siesta.ext.http.Descriptor({
                    method: '*',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                var match = descriptor._matchPath('/cars/5?x=5&y=random');
                assert.equal(match.id, '5');
            });
        });

        describe('http methods', function() {
            it('all http methods', function() {
                var r = new siesta.ext.http.Descriptor({
                    method: '*',
                    mapping: carMapping
                });
                _.each(r.httpMethods, function(method) {
                    assert.include(r.method, method);
                });
                r = new siesta.ext.http.Descriptor({
                    method: ['*'],
                    mapping: carMapping
                });
                _.each(r.httpMethods, function(method) {
                    assert.include(r.method, method);
                });
                r = new siesta.ext.http.Descriptor({
                    method: ['*', 'GET'],
                    mapping: carMapping
                });
                _.each(r.httpMethods, function(method) {
                    assert.include(r.method, method);
                });
            });
            it('match against all', function() {
                var r = new siesta.ext.http.Descriptor({
                    method: '*',
                    mapping: carMapping
                });
                _.each(r.httpMethods, function(method) {
                    assert.ok(r._matchMethod(method));
                    assert.ok(r._matchMethod(method.toUpperCase()));
                    assert.ok(r._matchMethod(method.toLowerCase()));
                });
            });
            it('match against some', function() {
                var r = new siesta.ext.http.Descriptor({
                    method: ['POST', 'PUT'],
                    mapping: carMapping
                });
                assert.ok(r._matchMethod('POST'));
                assert.ok(r._matchMethod('PUT'));
                assert.ok(r._matchMethod('post'));
                assert.ok(r._matchMethod('put'));
                assert.ok(r._matchMethod('PoSt'));
                assert.ok(r._matchMethod('pUt'));
                assert.notOk(r._matchMethod('HEAD'));
                assert.notOk(r._matchMethod('head'));
                assert.notOk(r._matchMethod('hEaD'));
            });
            it('match against single', function() {
                function assertMatchMethod(r) {
                    assert.ok(r._matchMethod('POST'));
                    assert.ok(r._matchMethod('post'));
                    assert.ok(r._matchMethod('PoSt'));
                    assert.notOk(r._matchMethod('HEAD'));
                    assert.notOk(r._matchMethod('head'));
                    assert.notOk(r._matchMethod('hEaD'));
                }

                assertMatchMethod(new siesta.ext.http.Descriptor({
                    method: ['POST'],
                    mapping: carMapping
                }));
                assertMatchMethod(new siesta.ext.http.Descriptor({
                    method: ['pOsT'],
                    mapping: carMapping
                }));
                assertMatchMethod(new siesta.ext.http.Descriptor({
                    method: 'pOsT',
                    mapping: carMapping
                }));
                assertMatchMethod(new siesta.ext.http.Descriptor({
                    method: 'post',
                    mapping: carMapping
                }));
                assertMatchMethod(new siesta.ext.http.Descriptor({
                    method: 'POST',
                    mapping: carMapping
                }));
            })
        });
    });

    describe('specify mapping', function() {
        it('as object', function() {
            var r = new siesta.ext.http.Descriptor({
                mapping: carMapping
            });
            assert.equal(r.mapping, carMapping);
        });
        it('as string', function() {
            var r = new siesta.ext.http.Descriptor({
                mapping: 'Car',
                collection: 'myCollection'
            });
            assert.equal('Car', r.mapping.type);
        });
        it('as string, but collection as object', function() {
            var r = new siesta.ext.http.Descriptor({
                mapping: 'Car',
                collection: collection
            });
            assert.equal('Car', r.mapping.type);
        });
        it('should throw an exception if passed as string without collection', function() {
            assert.throws(_.partial(siesta.ext.http.Descriptor, {
                mapping: 'Car'
            }), InternalSiestaError);
        });
    });

    describe('data', function() {
        it('if null, should be null', function() {
            var r = new siesta.ext.http.Descriptor({
                data: null,
                mapping: carMapping
            });
            assert.notOk(r.data);
        });
        it('if empty string, should be null', function() {
            var r = new siesta.ext.http.Descriptor({
                data: '',
                mapping: carMapping
            });
            assert.notOk(r.data);
        });
        it('if length 1, should be a string', function() {
            var r = new siesta.ext.http.Descriptor({
                data: 'abc',
                mapping: carMapping
            });
            assert.equal(r.data, 'abc');
        });
        it('if > length 1, should be an object', function() {
            var r = new siesta.ext.http.Descriptor({
                data: 'path.to.data',
                mapping: carMapping
            });
            assert.equal(r.data.path.to, 'data');
        });
        describe('embed', function() {
            var data = {
                x: 1,
                y: 2,
                z: 3
            };
            it('if null, should simply return the object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: null,
                    mapping: carMapping
                });
                assert.equal(data, r._embedData(data));
            });
            it('if empty string, should simply return the object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: '',
                    mapping: carMapping
                });
                assert.equal(data, r._embedData(data));
            });
            it('if length 1, should return 1 level deep object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: 'abc',
                    mapping: carMapping
                });
                assert.equal(data, r._embedData(data).abc);
            });
            it('if > length 1, should return n level deep object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: 'path.to.data',
                    mapping: carMapping
                });
                var extractData = r._embedData(data);
                assert.equal(data, extractData.path.to.data);
            });
        });
        describe('extract', function() {
            var data = {
                x: 1,
                y: 2,
                z: 3
            };
            it('if null, should simply return the object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: null,
                    mapping: carMapping
                });
                var extractData = r._extractData(data);
                assert.equal(extractData, data);
            });
            it('if empty string, should simply return the object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: '',
                    mapping: carMapping
                });
                var extractData = r._extractData(data);
                assert.equal(extractData, data);
            });
            it('if length 1, should return 1 level deep object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: 'abc',
                    mapping: carMapping
                });
                var extractData = r._extractData({
                    abc: data
                });
                assert.equal(extractData, data);
            });
            it('if > length 1, should return n level deep object', function() {
                var r = new siesta.ext.http.Descriptor({
                    data: 'path.to.data',
                    mapping: carMapping
                });
                var extractData = r._extractData({
                    path: {
                        to: {
                            data: data
                        }
                    }
                });
                assert.equal(extractData, data);
            });
        });
    });

    describe('registry', function() {
        it('should register request descriptor', function() {
            var r = new siesta.ext.http.RequestDescriptor({
                data: 'path.to.data',
                mapping: carMapping
            });
            siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(r);
            assert.include(siesta.ext.http.DescriptorRegistry.requestDescriptors[carMapping.collection], r);
        });
        describe('request descriptors for collection', function() {
            var descriptor;
            beforeEach(function() {
                descriptor = new siesta.ext.http.RequestDescriptor({
                    data: 'path.to.data',
                    mapping: carMapping
                });
                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(descriptor);
            });
            it('request descriptors should be accessible by collection name', function() {
                assert.include(siesta.ext.http.DescriptorRegistry.requestDescriptorsForCollection(carMapping.collection), descriptor);
            });
            it('request descriptors should be accessible by collection', function() {
                assert.include(siesta.ext.http.DescriptorRegistry.requestDescriptorsForCollection(collection), descriptor);
            });
        });

    });

    describe('match http config', function() {
        describe('no data', function() {
            var descriptor;
            beforeEach(function() {
                descriptor = new siesta.ext.http.Descriptor({
                    method: 'POST',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
            });
            it('match', function() {
                assert.ok(descriptor._matchConfig({
                    type: 'POST',
                    url: '/cars/5/'
                }));
            });
            it('no match because of method', function() {
                assert.notOk(descriptor._matchConfig({
                    type: 'GET',
                    url: '/cars/5/'
                }));
            });
            it('no match because of url', function() {
                assert.notOk(descriptor._matchConfig({
                    type: 'POST',
                    url: '/asdasd/'
                }));
            });
        });
    });

    describe('match against data', function() {
        var descriptor;

        describe('data specified', function() {
            beforeEach(function() {
                descriptor = new siesta.ext.http.Descriptor({
                    mapping: carMapping,
                    data: 'path.to.data'
                });
            });
            it('match', function() {
                assert.ok(descriptor._matchData({
                    path: {
                        to: {
                            data: {
                                x: 1,
                                y: 2
                            }
                        }
                    }
                }));
            });
            it('no match', function() {
                assert.notOk(descriptor._matchData({
                    path: { // Missing 'to'
                        data: {
                            x: 1,
                            y: 2
                        }
                    }
                }));
            });
        });

        describe('data unspecified', function() {

        })

    });

    describe('compound match', function() {
        var descriptor;
        beforeEach(function() {
            descriptor = new siesta.ext.http.Descriptor({
                method: 'POST',
                mapping: carMapping,
                path: '/cars/(?<id>[0-9])/?',
                data: 'path.to.data'
            });
        });

        it('success', function() {
            var config = {
                type: 'POST',
                url: '/cars/5/'
            };
            var data = {
                path: {
                    to: {
                        data: {
                            x: 1,
                            y: 2
                        }
                    }
                }
            };
            assert.ok(descriptor.match(config, data));
        });
    });

    describe('defaults', function() {
        var descriptor;
        beforeEach(function() {
            descriptor = new siesta.ext.http.Descriptor({
                mapping: carMapping
            });
        });
        it('default method is GET', function() {
            assert.equal(descriptor.method.length, 1);
            assert.equal(descriptor.method[0], 'GET');
        });
        it('default path is blank', function() {
            assert.equal(descriptor.path, '');
        });
        it('default data is null', function() {
            assert.equal(descriptor.data, null);
        })
    });

    describe('errors', function() {
        it('no mapping', function() {
            assert.throws(function() {
                new siesta.ext.http.Descriptor({
                    data: 'data'
                })
            }, InternalSiestaError);
        });
    });

    describe('siesta.ext.http.RequestDescriptor', function() {
        describe('serialisation', function() {
            it('default', function() {
                var requestDescriptor = new siesta.ext.http.RequestDescriptor({
                    method: 'POST',
                    mapping: carMapping,
                    path: '/cars/(?<id>[0-9])/?'
                });
                assert.notEqual(requestDescriptor.serialiser, siesta.ext.http.Serialiser.idSerialiser);
            });

            describe('built-in', function() {
                var requestDescriptor;

                describe('id', function() {
                    beforeEach(function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            method: 'POST',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?',
                            serialiser: siesta.ext.http.Serialiser.idSerialiser
                        });
                    });
                    it('uses the serialiser', function() {
                        assert.equal(requestDescriptor.serialiser, siesta.ext.http.Serialiser.idSerialiser);
                    });
                    it('serialises', function(done) {
                        carMapping.map({
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'xyz'
                        }, function(err, car) {
                            if (err) done(err);
                            requestDescriptor._serialise(car, function(err, data) {
                                if (err) done(err);
                                assert.equal(data, car.id);
                                done();
                            })
                        });
                    });
                });

                describe('depth', function() {
                    var requestDescriptor;
                    beforeEach(function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            method: 'POST',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?',
                            serialiser: siesta.ext.http.Serialiser.depthSerializer(0)
                        });
                    });

                    it('uses the serialiser', function() {
                        assert.notEqual(requestDescriptor.serialiser, siesta.ext.http.Serialiser.idSerialiser);
                    });

                    it('serialises at depth', function(done) {
                        carMapping.map({
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'xyz',
                            owner: {
                                id: '123',
                                name: 'Michael Ford'
                            }
                        }, function(err, car) {
                            if (err) done(err);
                            requestDescriptor._serialise(car, function(err, data) {
                                if (err) done(err);
                                assert.equal(data.owner, '123');
                                done();
                            })
                        });
                    });
                });

                describe('transforms', function() {
                    var requestDescriptor;

                    it('key paths', function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            mapping: carMapping,
                            transforms: {
                                'colour': 'path.to.colour'
                            }
                        });
                        var data = {
                            colour: 'red'
                        };
                        requestDescriptor._transformData(data);
                        assert.notOk(data.colour);
                        assert.equal(data.path.to.colour, 'red');
                    });

                    it('key', function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            mapping: carMapping,
                            transforms: {
                                'colour': 'color'
                            }
                        });
                        var data = {
                            colour: 'red'
                        };
                        requestDescriptor._transformData(data);
                        assert.notOk(data.colour);
                        assert.equal(data.color, 'red');
                    });

                    it('function with return val', function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            mapping: carMapping,
                            transforms: {
                                'colour': function(val) {
                                    var newVal = val;
                                    if (val == 'red') {
                                        newVal = 'blue';
                                    }
                                    return newVal;
                                }
                            }
                        });
                        var data = {
                            colour: 'red'
                        };
                        requestDescriptor._transformData(data);
                        assert.equal(data.colour, 'blue');
                    });

                    it('function with return val and key', function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            mapping: carMapping,
                            transforms: {
                                'colour': function(val) {
                                    var newVal = val;
                                    if (val == 'red') {
                                        newVal = 'blue';
                                    }
                                    return ['color', newVal];
                                }
                            }
                        });
                        var data = {
                            colour: 'red'
                        };
                        requestDescriptor._transformData(data);
                        assert.notOk(data.colour);
                        assert.equal(data.color, 'blue');
                    });

                    it('invalid', function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            mapping: carMapping,
                            transforms: {
                                'colour': {
                                    wtf: {
                                        is: 'this'
                                    }
                                }
                            }
                        });
                        var data = {
                            colour: 'red'
                        };
                        assert.throws(function() {
                            requestDescriptor._transformData(data);

                        }, InternalSiestaError);
                    });

                    describe('during serialisation', function() {
                        beforeEach(function() {
                            requestDescriptor = new siesta.ext.http.RequestDescriptor({
                                method: 'POST',
                                mapping: carMapping,
                                path: '/cars/(?<id>[0-9])/?',
                                serialiser: siesta.ext.http.Serialiser.depthSerializer(0),
                                transforms: {
                                    'colour': 'path.to.colour'
                                }
                            });
                        });

                        it('performs transform', function(done) {
                            carMapping.map({
                                colour: 'red',
                                name: 'Aston Martin',
                                id: 'xyz',
                                owner: {
                                    id: '123',
                                    name: 'Michael Ford'
                                }
                            }, function(err, car) {
                                if (err) done(err);
                                requestDescriptor._serialise(car, function(err, data) {
                                    if (err) done(err);
                                    assert.equal(data.owner, '123');
                                    assert.equal(data.name, 'Aston Martin');
                                    assert.notOk(data.colour);
                                    assert.equal(data.path.to.colour, 'red');
                                    done();
                                });
                            });
                        });
                    });

                });


            });

            describe('embed', function() {

                describe('id', function() {
                    var requestDescriptor;
                    beforeEach(function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            method: 'POST',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?',
                            data: 'path.to',
                            serialiser: siesta.ext.http.Serialiser.idSerialiser
                        });
                    });

                    it('serialises at depth', function(done) {
                        carMapping.map({
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'xyz',
                            owner: {
                                id: '123',
                                name: 'Michael Ford'
                            }
                        }, function(err, car) {
                            if (err) done(err);
                            requestDescriptor._serialise(car, function(err, data) {
                                if (err) done(err);
                                assert.equal(data.path.to, 'xyz');
                                done();
                            })
                        });
                    });
                });

                describe('depth', function() {
                    var requestDescriptor;
                    beforeEach(function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            method: 'POST',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?',
                            data: 'path.to'
                        });
                    });


                    it('serialises at depth', function(done) {
                        carMapping.map({
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'xyz',
                            owner: {
                                id: '123',
                                name: 'Michael Ford'
                            }
                        }, function(err, car) {
                            if (err) done(err);
                            requestDescriptor._serialise(car, function(err, data) {
                                if (err) done(err);
                                assert.equal(data.path.to.owner, '123');
                                done();
                            })
                        });
                    });
                });

                describe('custom', function() {
                    var requestDescriptor;
                    beforeEach(function() {
                        requestDescriptor = new siesta.ext.http.RequestDescriptor({
                            method: 'POST',
                            mapping: carMapping,
                            path: '/cars/(?<id>[0-9])/?',
                            data: 'path.to',
                            serialiser: function(obj) {
                                return obj.id
                            }
                        });
                    });


                    it('serialises', function(done) {
                        carMapping.map({
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'xyz',
                            owner: {
                                id: '123',
                                name: 'Michael Ford'
                            }
                        }, function(err, car) {
                            if (err) done(err);
                            requestDescriptor._serialise(car, function(err, data) {
                                if (err) done(err);
                                assert.equal(data.path.to, 'xyz');
                                done();
                            })
                        });
                    });
                });


            });

            describe('custom', function() {

                function carSerialiser(fields, car, done) {
                    var data = {};
                    for (var idx in fields) {
                        var field = fields[idx];
                        if (car[field]) {
                            data[field] = car[field];
                        }
                    }
                    car.ownerProxy.get(function(err, person) {
                        if (err) {
                            done(err);
                        } else {
                            if (person) {
                                data.owner = person.name;
                            }
                            done(null, data);
                        }
                    });
                }

                var requestDescriptor, serialiser;

                beforeEach(function() {
                    serialiser = _.partial(carSerialiser, ['name']);
                    requestDescriptor = new siesta.ext.http.RequestDescriptor({
                        method: 'POST',
                        mapping: carMapping,
                        path: '/cars/?',
                        serialiser: serialiser
                    });
                });

                it('uses the custom serialiser', function() {
                    assert.equal(requestDescriptor.serialiser, serialiser);
                });

                it('serialises', function(done) {
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin',
                        id: 'xyz',
                        owner: {
                            id: '123',
                            name: 'Michael Ford'
                        }
                    }, function(err, car) {
                        if (err) done(err);
                        requestDescriptor._serialise(car, function(err, data) {
                            if (err) done(err);
                            assert.equal(data.owner, 'Michael Ford');
                            assert.equal(data.name, 'Aston Martin');
                            assert.notOk(data.colour);
                            done();
                        })
                    });
                })
            })
        })
    });

    describe('ResponseDescriptor', function() {

        describe('transforms', function() {
            var responseDescriptor;
            it('key paths', function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': 'path.to.colour'
                    }
                });
                var data = {
                    colour: 'red'
                };
                responseDescriptor._transformData(data);
                assert.notOk(data.colour);
                assert.equal(data.path.to.colour, 'red');
            });

            it('key', function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': 'color'
                    }
                });
                var data = {
                    colour: 'red'
                };
                responseDescriptor._transformData(data);
                assert.notOk(data.colour);
                assert.equal(data.color, 'red');
            });

            it('function with return val', function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': function(val) {
                            var newVal = val;
                            if (val == 'red') {
                                newVal = 'blue';
                            }
                            return newVal;
                        }
                    }
                });
                var data = {
                    colour: 'red'
                };
                responseDescriptor._transformData(data);
                assert.equal(data.colour, 'blue');
            });

            it('function with return val and key', function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': function(val) {
                            var newVal = val;
                            if (val == 'red') {
                                newVal = 'blue';
                            }
                            return ['color', newVal];
                        }
                    }
                });
                var data = {
                    colour: 'red'
                };
                responseDescriptor._transformData(data);
                assert.notOk(data.colour);
                assert.equal(data.color, 'blue');
            });

            it('function', function() {
                var data = {
                    colour: 'red'
                };
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: function(_data) {
                        assert.equal(data, _data);
                        return {
                            key: 'value'
                        };
                    }
                });
                data = responseDescriptor._transformData(data);
                assert.notOk(data.colour);
                assert.equal(data.key, 'value');
            });

            it('invalid', function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': {
                            wtf: {
                                is: 'this'
                            }
                        }
                    }
                });
                var data = {
                    colour: 'red'
                };
                assert.throws(function() {
                    responseDescriptor._transformData(data);

                }, InternalSiestaError);
            });

        });

        describe('transforms during deserialisation', function() {
            var responseDescriptor;

            beforeEach(function() {
                responseDescriptor = new siesta.ext.http.ResponseDescriptor({
                    mapping: carMapping,
                    transforms: {
                        'colour': 'color'
                    }
                });
            });

            it('transforms during extractData', function() {
                var extracted = responseDescriptor._extractData({
                    colour: 'red'
                });
                assert.equal(extracted.color, 'red');
                assert.notOk(extracted.colour);
            });
            it('transforms during matchData', function() {
                var extracted = responseDescriptor._matchData({
                    colour: 'red'
                });
                assert.equal(extracted.color, 'red');
                assert.notOk(extracted.colour);
            });
        });

    });


});
},{"../index":1,"../src/collection":45,"../src/error":47,"../src/relationship":58,"chai":9}],67:[function(require,module,exports){
/**
 * An integration test that creates two complex collections and then establishes inter-collection relationships
 * between the mappings in each before creating objects etc.
 *
 * We then proceed to test various aspects of the system.
 */

var s = require('../index'),
    assert = require('chai').assert;

var Collection = require('../src/collection').Collection;
var RelationshipType = require('../src/relationship').RelationshipType;
var cache = require('../src/cache');

var async = require('async');

describe('intercollection relationships', function() {
    var myOfflineCollection;
    var myOnlineCollection;

    beforeEach(function(done) {
        s.reset(true);

        myOfflineCollection = new Collection('MyOfflineCollection');
        myOnlineCollection = new Collection('MyOnlineCollection');

        myOfflineCollection.mapping('Folder', {
            attributes: ['name'],
            relationships: {
                createdBy: {
                    mapping: 'User',
                    type: RelationshipType.OneToMany,
                    reverse: 'folders'
                }
            }
        });

        myOfflineCollection.mapping('DownloadedPhoto', {
            attributes: ['creationDate'],
            relationships: {
                createdBy: {
                    mapping: 'User',
                    type: RelationshipType.OneToMany,
                    reverse: 'files'
                },
                folder: {
                    mapping: 'Folder',
                    type: RelationshipType.OneToMany,
                    reverse: 'files'
                },
                photo: {
                    mapping: 'MyOnlineCollection.Photo',
                    type: RelationshipType.OneToOne,
                    reverse: 'file'
                }
            }
        });

        myOfflineCollection.mapping('User', {
            attributes: ['username'],
            indexes: ['username']
        });



        myOnlineCollection.mapping('Photo', {
            id: 'photoId',
            attributes: ['height', 'width', 'url'],
            relationships: {
                createdBy: {
                    mapping: 'User',
                    type: RelationshipType.OneToMany,
                    reverse: 'photos'
                }
            }
        });

        myOnlineCollection.mapping('User', {
            id: 'userId',
            attributes: ['username', 'name']
        });

        var finishedCreatingMyOnlineCollection = false;
        var finishedCreatingMyOfflineCollection = false;

        myOfflineCollection.install(function(err) {
            if (err) done(err);
            finishedCreatingMyOfflineCollection = true;
            if (finishedCreatingMyOnlineCollection) {
                done();
            }
        });

        myOnlineCollection.install(function(err) {
            if (err) done(err);
            if (finishedCreatingMyOfflineCollection) {
                done();
            }
        });
    });

    function mapRemoteUsers(callback) {
        myOnlineCollection.User.map([{
            username: 'mtford',
            name: 'Michael Ford',
            userId: '1'
        }, {
            username: 'blahblah',
            name: 'Blah Blah',
            userId: '2'
        }, {
            username: 'bobm',
            name: 'Bob Marley',
            userId: '3'
        }], callback);
    }

    function mapRemotePhotos(callback) {
        myOnlineCollection.Photo.map([{
            height: 500,
            width: 500,
            url: 'http://somewhere/image.jpeg',
            photoId: '10',
            createdBy: '1'
        }, {
            height: 1500,
            width: 1500,
            url: 'http://somewhere/image2.jpeg',
            photoId: '11',
            createdBy: '1'
        }, {
            height: 500,
            width: 750,
            url: 'http://somewhere/image3.jpeg',
            photoId: '12',
            createdBy: '2'
        }], callback);
    }

    function mapOfflineUsers(callback) {
        myOfflineCollection.User.map([{
            username: 'mike'
        }, {
            username: 'gaz'
        }], callback);
    }

    function installOfflineFixtures(callback) {
        mapOfflineUsers(callback);
    }

    function installOnlineFixtures(callback) {
        async.series([
            mapRemoteUsers,
            mapRemotePhotos
        ], callback);
    }

    beforeEach(function(done) {
        installOfflineFixtures(function(err) {
            if (err) done(err);
            installOnlineFixtures(done);
        });
    });

    describe('local queries', function() {
        describe('offline', function() {
            it('should return mike when querying for him', function(done) {
                myOfflineCollection.User.query({
                    username: 'gaz'
                }, function(err, users) {
                    if (err) done(err);
                    assert.equal(users.length, 1);
                    assert.equal(users[0].username, 'gaz');
                    done();
                });
            });
        });

        describe('online', function() {

            it('should return 3 users when run a local all query against users', function(done) {
                myOnlineCollection.User.all(function(err, users) {
                    if (err) done(err);
                    assert.equal(users.length, 3);
                    done();
                });
            });

            it('should return 3 photos when run a local all query against photos', function(done) {
                myOnlineCollection.Photo.all(function(err, photos) {
                    if (err) done(err);
                    assert.equal(photos.length, 3);
                    done();
                });
            });

            it('should return 2 photos with height 500', function(done) {
                this.timeout(10000);
                myOnlineCollection.Photo.query({
                    height: 500
                }, function(err, photos) {
                    if (err) done(err);
                    assert.equal(photos.length, 2);
                    _.each(photos, function(p) {
                        assert.equal(p.height, 500);
                    });
                    done();
                });
            });

            it('should return 1 photo with height 500, width, 750', function(done) {
                this.timeout(10000);
                myOnlineCollection.Photo.query({
                    height: 500,
                    width: 750
                }, function(err, photos) {
                    if (err) done(err);
                    assert.equal(photos.length, 1);
                    assert.equal(photos[0].height, 500);
                    assert.equal(photos[0].width, 750);
                    done();
                });
            });

            it('should be able to query by remote identifier', function(done) {
                myOnlineCollection.User.get('1', function(err, user) {
                    if (err) done(err);
                    assert.equal(user.userId, '1');
                    done();
                })
            })


        });
    });
    describe('relationship mappings', function() {
        describe('online', function() {
            function assertNumPhotos(userId, numPhotos, done) {
                myOnlineCollection.User.get(userId, function(err, user) {
                    if (err) done(err);
                    assert.ok(user);
                    assert.equal(user.userId, userId);
                    var proxy = user.photosProxy;
                    proxy.get(function(err, photos) {
                        if (err) done(err);
                        assert.equal(photos ? photos.length : 0, numPhotos);
                        done();
                    });
                })
            }

            it('user with id 1 should have 2 photos', function(done) {
                assertNumPhotos('1', 2, done);
            });

            it('user with id 2 should have 1 photo...', function(done) {
                assertNumPhotos('2', 1, done);
            });

            it('user with id 3 should have no photos', function(done) {
                assertNumPhotos('3', 0, done);
            });

        });

    });





});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/relationship":58,"async":2,"chai":9}],68:[function(require,module,exports){
var s = require('../../index')
    , assert = require('chai').assert;

describe('intercoll relationships', function () {


    var SiestaModel = require('../../src/object').SiestaModel;
    var Collection = require('../../src/collection').Collection;
    var RelationshipType = require('../../src/relationship').RelationshipType;

    beforeEach(function () {
        s.reset(true);
    });

    var collection, carMapping, personMapping;

    function configureAPI(type, done) {
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: type,
                    reverse: 'cars'
                }
            }
        });
        personMapping = collection.mapping('Person', {
            id: 'id',
            attributes: ['name', 'age']
        });
        collection.install(done);
    }

    describe('Inter-collection', function () {
        var anotherCollection;
        var obj;

        beforeEach(function (done) {
            configureAPI(RelationshipType.OneToMany, done);
        });

        afterEach(function () {
            anotherCollection = undefined;
            obj = undefined;
        });

        describe('foreign key', function () {
            beforeEach(function (done) {
                anotherCollection = new Collection('anotherCollection');

                anotherCollection.mapping('AnotherMapping', {
                    attributes: ['field'],
                    relationships: {
                        person: {
                            mapping: 'myCollection.Person',
                            type: RelationshipType.OneToMany,
                            reverse: 'other'
                        }
                    }
                });

                anotherCollection.install(function (err) {
                    if (err) done(err);
                    anotherCollection['AnotherMapping'].map({field: 5, person: {name: 'Michael', age: 23, id: 'xyz'}}, function (err, _obj) {
                        if (err) done(err);
                        obj = _obj;
                        done();
                    });
                });

            });

            it('installs forward', function () {
                var person = obj.person;
                assert.instanceOf(person, SiestaModel);
                assert.equal(person.collection, 'myCollection');
                assert.equal(person.name, 'Michael');
                assert.equal(person.age, 23);
            });

            it('installs backwards', function () {
                var person = obj.person;
                assert.include(person.other, obj);
            });

        });
    });


});
},{"../../index":1,"../../src/collection":45,"../../src/object":53,"../../src/relationship":58,"chai":9}],69:[function(require,module,exports){
var s = require('../../index'),
    assert = require('chai').assert;

describe('perform mapping', function() {


    var Collection = require('../../src/collection').Collection;
    var RelationshipType = require('../../src/relationship').RelationshipType;

    var SiestaModel = require('../../src/object').SiestaModel;
    var cache = require('../../src/cache');
    var Operation = require('../../vendor/operations.js/src/operation').Operation;

    var collection, carMapping, personMapping;

    beforeEach(function() {
        collection = null;
        carMapping = null;
        personMapping = null;
        s.reset(true);
    });

    afterEach(function() {
        var numIncomplete = 0;
        _.each(Operation.running, function(op) {
            if (!op.completed) {
                numIncomplete++;
            }
        });
        assert.notOk(numIncomplete);
    });

    describe('empty', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(done);

        });
        it('empty', function() {
            carMapping.map({}, function(err, _obj) {
                assert.notOk(err);
                assert.notOk(_obj);
            });
        });
    });



    describe('no id', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(done);

        });
        it('xyz', function(done) {
            var obj;
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin'
            }, function(err, _obj) {
                if (err) {
                    done(err);
                } else {
                    obj = _obj;
                    done();
                }
            });
        })
    });

    describe('no relationships', function() {
        var obj;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(function(err) {
                if (err) done(err);
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    id: 'dfadf'
                }, function(err, _obj) {
                    if (err) {
                        done(err);
                    }
                    obj = _obj;
                    done();
                });
            });
        });

        describe('new', function() {

            it('returns a model', function() {
                assert.instanceOf(obj, SiestaModel);
            });

            it('has the right fields', function() {
                assert.equal(obj.colour, 'red');
                assert.equal(obj.name, 'Aston Martin');
                assert.equal(obj.id, 'dfadf');
                assert.ok(obj._id);
            });


        });

        describe('existing in cache', function() {

            describe('via id', function() {
                var newObj;
                beforeEach(function(done) {
                    carMapping.map({
                        colour: 'blue',
                        id: 'dfadf'
                    }, function(err, obj) {
                        if (err) done(err);
                        newObj = obj;
                        done();
                    });
                });

                it('should be mapped onto the old object', function() {
                    assert.equal(newObj, obj);
                });

                it('should have the new colour', function() {
                    assert.equal(newObj.colour, 'blue');
                });
            });

            describe('via _id', function() {
                var newObj;
                beforeEach(function(done) {
                    carMapping.map({
                        colour: 'blue',
                        _id: obj._id
                    }, function(err, obj) {
                        if (err) done(err);
                        newObj = obj;
                        done();
                    });
                });

                it('should be mapped onto the old object', function() {
                    assert.equal(newObj, obj);
                });

                it('should have the new colour', function() {
                    assert.equal(newObj.colour, 'blue');
                });
            });
        });
    });

    describe('with relationship', function() {
        describe('foreign key', function() {
            beforeEach(function(done) {
                collection = new Collection('myCollection');
                personMapping = collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name'],
                    relationships: {
                        owner: {
                            mapping: 'Person',
                            type: RelationshipType.OneToMany,
                            reverse: 'cars'
                        }
                    }
                });
                collection.install(done);
            });



            describe('remote id', function() {

                describe('forward', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                carMapping.map({
                                    name: 'Bentley',
                                    colour: 'black',
                                    owner: 'personRemoteId',
                                    id: 'carRemoteId'
                                }, function(err, _car) {
                                    if (err) {

                                        done(err);
                                    }
                                    car = _car;
                                    done();
                                });
                            });
                        });

                        it('owner of car should be michael', function(done) {
                            assert.equal(car.owner, person);
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should own the car', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                if (err) done(err);
                                assert.include(cars, car);
                                done();
                            });
                        });
                    });

                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: 'personRemoteId',
                                id: 'carRemoteId'
                            }, function(err, _car) {

                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carsProxy.get(function(err, cars) {
                                    if (err) done(err);
                                    assert.equal(cars.length, 1);
                                    assert.include(cars, car);
                                    done();
                                });
                            });
                        })

                    })
                });

                describe('reverse', function() {
                    describe('remoteids of objects that already exist', function() {
                        var person, cars;
                        beforeEach(function(done) {
                            var raw = [{
                                colour: 'red',
                                name: 'Aston Martin',
                                id: 'remoteId1'
                            }, {
                                colour: 'blue',
                                name: 'Lambo',
                                id: "remoteId2"
                            }, {
                                colour: 'green',
                                name: 'Ford',
                                id: "remoteId3"
                            }];
                            carMapping._mapBulk(raw, function(err, objs, res) {
                                if (err) {
                                    done(err);
                                } else {
                                    cars = objs;
                                    personMapping.map({
                                        name: 'Michael Ford',
                                        age: 23,
                                        id: 'personRemoteId',
                                        cars: ['remoteId1', 'remoteId2', 'remoteId3']
                                    }, function(err, _person) {
                                        if (err) {
                                            done(err);
                                        } else {
                                            person = _person;
                                            done();
                                        }

                                    });
                                }

                            });
                        });

                        it('cars should have person as their owner', function() {
                            _.each(cars, function(car) {
                                assert.equal(car.owner, person);
                            })
                        });

                        it('person should have car objects', function() {
                            _.each(cars, function(car) {
                                assert.include(person.cars, car);
                            })
                        });
                    });

                    describe('remoteids of objects that dont exist', function() {
                        var person;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId',
                                cars: ['remoteId1', 'remoteId2', 'remoteId3']
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                done();
                            });
                        });

                        it('person has 3 new cars, and those cars are owned by the person', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                done(err);
                                assert.equal(cars.length, 3);
                                _.each(cars, function(car) {
                                    assert.equal(car.owner, person);
                                })
                            });
                        })
                    });

                    describe('mixture', function() {
                        var person, cars;
                        beforeEach(function(done) {
                            var raw = [{
                                colour: 'red',
                                name: 'Aston Martin',
                                id: 'remoteId1'
                            }, {
                                colour: 'green',
                                name: 'Ford',
                                id: "remoteId3"
                            }];
                            carMapping._mapBulk(raw, function(err, objs, res) {
                                if (err) done(err);
                                cars = objs;
                                personMapping.map({
                                    name: 'Michael Ford',
                                    age: 23,
                                    id: 'personRemoteId',
                                    cars: ['remoteId1', 'remoteId2', 'remoteId3']
                                }, function(err, _person) {
                                    if (err) done(err);
                                    person = _person;
                                    done();
                                });
                            });
                        });

                        it('cars should have person as their owner', function() {
                            _.each(cars, function(car) {
                                assert.equal(car.owner, person);
                            })
                        });

                        it('person should have car objects', function() {
                            _.each(cars, function(car) {
                                assert.include(person.cars, car);
                            })
                        });

                        it('person has 3 new cars, and those cars are owned by the person', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                done(err);
                                assert.equal(cars.length, 3);
                                _.each(cars, function(car) {
                                    assert.equal(car.owner, person);
                                })
                            });
                        })


                    })
                })

            });
            describe('object', function() {

                describe('forward', function() {
                    var person, car;
                    beforeEach(function(done) {
                        personMapping.map({
                            name: 'Michael Ford',
                            age: 23,
                            id: 'personRemoteId'
                        }, function(err, _person) {
                            if (err) done(err);
                            person = _person;
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: person,
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should the car', function(done) {
                        person.carsProxy.get(function(err, cars) {
                            if (err) done(err);
                            assert.include(cars, car);
                            done();
                        });
                    });
                });

                describe('reverse', function() {
                    var person, cars;
                    beforeEach(function(done) {
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1'
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2"
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3"
                        }];
                        carMapping._mapBulk(raw, function(err, objs, res) {
                            if (err) done(err);
                            cars = objs;
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId',
                                cars: objs
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                done();
                            });
                        });
                    });

                    it('cars should have person as their owner', function() {
                        _.each(cars, function(car) {
                            assert.equal(car.owner, person);
                        })
                    });

                    it('person should have car objects', function() {
                        _.each(cars, function(car) {
                            assert.include(person.cars, car);
                        })
                    });
                })

            });

            describe('local id within object', function() {
                describe('forward', function() {
                    var person, car;
                    beforeEach(function(done) {
                        personMapping.map({
                            name: 'Michael Ford',
                            age: 23,
                            id: 'personRemoteId'
                        }, function(err, _person) {
                            if (err) done(err);
                            person = _person;
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: {
                                    _id: person._id
                                },
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) {

                                    done(err);
                                }
                                car = _car;
                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should the car', function(done) {
                        person.carsProxy.get(function(err, cars) {
                            if (err) done(err);
                            assert.include(cars, car);
                            done();
                        });
                    });
                });
                describe('reverse', function() {
                    var person, cars;
                    beforeEach(function(done) {
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1'
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2"
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3"
                        }];
                        carMapping._mapBulk(raw, function(err, objs, res) {
                            if (err) {

                                done(err);
                            } else {}
                            cars = objs;
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId',
                                cars: _.map(cars, function(car) {
                                    return {
                                        _id: car._id
                                    }
                                })
                            }, function(err, _person) {
                                if (err) {
                                    done(err);
                                } else {}
                                person = _person;
                                done();
                            });
                        });
                    });

                    it('cars should have person as their owner', function() {
                        _.each(cars, function(car) {
                            assert.equal(car.owner, person);
                        })
                    });

                    it('person should have car objects', function() {
                        _.each(cars, function(car) {
                            assert.include(person.cars, car);
                        })
                    });
                })
            });

            describe('remote id within object', function() {

                describe('forward', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId123'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                carMapping.map({
                                    name: 'Bentley',
                                    colour: 'black',
                                    owner: {
                                        id: 'personRemoteId123'
                                    },
                                    id: 'carRemoteId'
                                }, function(err, _car) {
                                    if (err) {
                                        done(err);
                                    }
                                    car = _car;
                                    done();
                                });
                            });
                        });
                        it('owner of car should be michael', function(done) {
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should the car', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                if (err) done(err);
                                assert.include(cars, car);
                                done();
                            });
                        });
                    });

                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: {
                                    id: 'personRemoteId'
                                },
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carsProxy.get(function(err, cars) {
                                    if (err) done(err);
                                    assert.equal(cars.length, 1);
                                    assert.include(cars, car);
                                    done();
                                });
                            });
                        })

                    })
                });

                describe('reverse', function() {
                    describe('remoteids of objects that already exist', function() {
                        var person, cars;
                        beforeEach(function(done) {
                            var raw = [{
                                colour: 'red',
                                name: 'Aston Martin',
                                id: 'remoteId1'
                            }, {
                                colour: 'blue',
                                name: 'Lambo',
                                id: "remoteId2"
                            }, {
                                colour: 'green',
                                name: 'Ford',
                                id: "remoteId3"
                            }];
                            carMapping._mapBulk(raw, function(err, objs, res) {
                                if (err) {

                                    done(err);
                                } else {

                                }
                                cars = objs;

                                personMapping.map({
                                    name: 'Michael Ford',
                                    age: 23,
                                    id: 'personRemoteId',
                                    cars: [{
                                        id: 'remoteId1'
                                    }, {
                                        id: 'remoteId2'
                                    }, {
                                        id: 'remoteId3'
                                    }]
                                }, function(err, _person) {
                                    if (err) {

                                        done(err);
                                    } else {

                                    }
                                    person = _person;
                                    done();
                                });
                            });
                        });

                        it('cars should have person as their owner', function() {
                            _.each(cars, function(car) {
                                assert.equal(car.owner, person);
                            })
                        });

                        it('person should have car objects', function() {
                            _.each(cars, function(car) {
                                assert.include(person.cars, car);
                            })
                        });
                    });

                    describe('remoteids of objects that dont exist', function() {
                        var person;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId',
                                cars: [{
                                    id: 'remoteId1'
                                }, {
                                    id: 'remoteId2'
                                }, {
                                    id: 'remoteId3'
                                }]
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                done();
                            });
                        });

                        it('person has 3 new cars, and those cars are owned by the person', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                done(err);
                                assert.equal(cars.length, 3);
                                _.each(cars, function(car) {
                                    assert.equal(car.owner, person);
                                })
                            });
                        })
                    });

                    describe('mixture', function() {
                        var person, cars;
                        beforeEach(function(done) {
                            var raw = [{
                                colour: 'red',
                                name: 'Aston Martin',
                                id: 'remoteId1'
                            }, {
                                colour: 'green',
                                name: 'Ford',
                                id: "remoteId3"
                            }];
                            carMapping._mapBulk(raw, function(err, objs, res) {
                                if (err) done(err);
                                cars = objs;
                                personMapping.map({
                                    name: 'Michael Ford',
                                    age: 23,
                                    id: 'personRemoteId',
                                    cars: [{
                                        id: 'remoteId1'
                                    }, {
                                        id: 'remoteId2'
                                    }, {
                                        id: 'remoteId3'
                                    }]
                                }, function(err, _person) {
                                    if (err) done(err);
                                    person = _person;
                                    done();
                                });
                            });
                        });

                        it('cars should have person as their owner', function() {
                            _.each(cars, function(car) {
                                assert.equal(car.owner, person);
                            })
                        });

                        it('person should have car objects', function() {
                            _.each(cars, function(car) {
                                assert.include(person.cars, car);
                            })
                        });

                        it('person has 3 new cars, and those cars are owned by the person', function(done) {
                            person.carsProxy.get(function(err, cars) {
                                done(err);
                                assert.equal(cars.length, 3);
                                _.each(cars, function(car) {
                                    assert.equal(car.owner, person);
                                })
                            });
                        })


                    })
                })

            });
        });

        describe('one-to-one', function() {
            var personMapping;
            beforeEach(function(done) {
                collection = new Collection('myCollection');
                personMapping = collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name'],
                    relationships: {
                        owner: {
                            mapping: 'Person',
                            type: RelationshipType.OneToOne,
                            reverse: 'car'
                        }
                    }
                });
                collection.install(done);


            });


            describe('remote id', function() {
                describe('forward', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                carMapping.map({
                                    name: 'Bentley',
                                    colour: 'black',
                                    id: 'carRemoteId',
                                    owner: 'personRemoteId'
                                }, function(err, _car) {
                                    if (err) {

                                        done(err);
                                    }
                                    car = _car;

                                    done();
                                });
                            });

                        });
                        it('owner of car should be michael', function(done) {
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should own the car', function(done) {
                            person.carProxy.get(function(err, personsCar) {
                                if (err) done(err);
                                assert.equal(car, personsCar);
                                done();
                            });
                        });
                    });
                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: 'personRemoteId',
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carProxy.get(function(err, personsCar) {
                                    if (err) done(err);
                                    assert.equal(personsCar, car);
                                    done();
                                });
                            });
                        })

                    })
                });
                describe('reverse', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) {

                                    done(err);
                                }
                                car = _car;
                                personMapping.map({
                                    name: 'Michael Ford',
                                    age: 23,
                                    car: 'carRemoteId',
                                    id: 'personRemoteId'
                                }, function(err, _person) {
                                    if (err) done(err);
                                    person = _person;
                                    done();
                                });
                            });
                        });
                        it('owner of car should be michael', function(done) {
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should own the car', function(done) {
                            person.carProxy.get(function(err, personsCar) {
                                if (err) done(err);
                                assert.equal(car, personsCar);
                                done();
                            });
                        });
                    });

                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: 'personRemoteId',
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carProxy.get(function(err, personsCar) {
                                    if (err) done(err);
                                    assert.equal(personsCar, car);
                                    done();
                                });
                            });
                        })

                    })
                });
            });

            describe('remote id within object', function() {
                describe('forward', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                id: 'personRemoteId'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                carMapping.map({
                                    name: 'Bentley',
                                    colour: 'black',
                                    id: 'carRemoteId',
                                    owner: {
                                        id: 'personRemoteId'
                                    }
                                }, function(err, _car) {
                                    if (err) {

                                        done(err);
                                    }
                                    car = _car;

                                    done();
                                });
                            });
                        });
                        it('owner of car should be michael', function(done) {
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should own the car', function(done) {
                            person.carProxy.get(function(err, personsCar) {
                                if (err) done(err);
                                assert.equal(car, personsCar);
                                done();
                            });
                        });
                    });

                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: {
                                    id: 'personRemoteId'
                                },
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carProxy.get(function(err, personsCar) {
                                    if (err) done(err);
                                    assert.equal(personsCar, car);
                                    done();
                                });
                            });
                        })

                    })
                });
                describe('reverse', function() {
                    describe('object that already exists', function() {
                        var person, car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) {

                                    done(err);
                                }
                                car = _car;
                                personMapping.map({
                                    name: 'Michael Ford',
                                    age: 23,
                                    car: {
                                        id: 'carRemoteId'
                                    },
                                    id: 'personRemoteId'
                                }, function(err, _person) {
                                    if (err) done(err);
                                    person = _person;
                                    done();
                                });
                            });
                        });
                        it('owner of car should be michael', function(done) {
                            car.ownerProxy.get(function(err, owner) {
                                if (err) done(err);
                                assert.equal(owner, person);
                                done();
                            })
                        });
                        it('michael should own the car', function(done) {
                            person.carProxy.get(function(err, personsCar) {
                                if (err) done(err);
                                assert.equal(car, personsCar);
                                done();
                            });
                        });
                    });

                    describe('remote id of an object that doesnt exist', function() {
                        var car;
                        beforeEach(function(done) {
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                owner: {
                                    id: 'personRemoteId'
                                },
                                id: 'carRemoteId'
                            }, function(err, _car) {
                                if (err) done(err);
                                car = _car;
                                done();
                            });
                        });
                        it('car should have a new owner and new owner should have a car', function(done) {
                            car.ownerProxy.get(function(err, person) {
                                if (err) done(err);
                                assert.equal(person.id, 'personRemoteId');
                                person.carProxy.get(function(err, personsCar) {
                                    if (err) done(err);
                                    assert.equal(personsCar, car);
                                    done();
                                });
                            });
                        })

                    })
                });
            });

            describe('_id within object', function() {
                describe('forward', function() {
                    var person, car;
                    beforeEach(function(done) {
                        personMapping.map({
                            name: 'Michael Ford',
                            age: 23,
                            id: 'personRemoteId'
                        }, function(err, _person) {
                            if (err) done(err);
                            person = _person;
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                id: 'carRemoteId',
                                owner: {
                                    _id: person._id
                                }
                            }, function(err, _car) {
                                if (err) {

                                    done(err);
                                }
                                car = _car;

                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should own the car', function(done) {
                        person.carProxy.get(function(err, personsCar) {
                            if (err) done(err);
                            assert.equal(car, personsCar);
                            done();
                        });
                    });
                });
                describe('reverse', function() {
                    var person, car;
                    beforeEach(function(done) {
                        carMapping.map({
                            name: 'Bentley',
                            colour: 'black',
                            id: 'carRemoteId'
                        }, function(err, _car) {
                            if (err) {

                                done(err);
                            }
                            car = _car;
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                car: {
                                    _id: car._id
                                },
                                id: 'personRemoteId'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should own the car', function(done) {
                        person.carProxy.get(function(err, personsCar) {
                            if (err) done(err);
                            assert.equal(car, personsCar);
                            done();
                        });
                    });

                });
            });

            describe('object', function() {
                describe('forward', function() {
                    var person, car;
                    beforeEach(function(done) {
                        personMapping.map({
                            name: 'Michael Ford',
                            age: 23,
                            id: 'personRemoteId'
                        }, function(err, _person) {
                            if (err) done(err);
                            person = _person;
                            carMapping.map({
                                name: 'Bentley',
                                colour: 'black',
                                id: 'carRemoteId',
                                owner: person
                            }, function(err, _car) {
                                if (err) {

                                    done(err);
                                }
                                car = _car;

                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should own the car', function(done) {
                        person.carProxy.get(function(err, personsCar) {
                            if (err) done(err);
                            assert.equal(car, personsCar);
                            done();
                        });
                    });
                });
                describe('reverse', function() {
                    var person, car;
                    beforeEach(function(done) {
                        carMapping.map({
                            name: 'Bentley',
                            colour: 'black',
                            id: 'carRemoteId'
                        }, function(err, _car) {
                            if (err) {

                                done(err);
                            }
                            car = _car;
                            personMapping.map({
                                name: 'Michael Ford',
                                age: 23,
                                car: car,
                                id: 'personRemoteId'
                            }, function(err, _person) {
                                if (err) done(err);
                                person = _person;
                                done();
                            });
                        });
                    });
                    it('owner of car should be michael', function(done) {
                        car.ownerProxy.get(function(err, owner) {
                            if (err) done(err);
                            assert.equal(owner, person);
                            done();
                        })
                    });
                    it('michael should own the car', function(done) {
                        person.carProxy.get(function(err, personsCar) {
                            if (err) done(err);
                            assert.equal(car, personsCar);
                            done();
                        });
                    });

                });
            });
        });
    });

    describe('caveats', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(done);
        });

        it('mapping an attribute that doesnt exist', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'aston martin',
                extraneous: 'blah'
            }, function(err, car) {
                if (err) done(err);
                assert.notOk(car.extraneous);
                done();
            });
        });

    });

    describe('errors', function() {
        describe('one-to-one', function() {
            var personMapping;
            beforeEach(function(done) {
                collection = new Collection('myCollection');
                personMapping = collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name'],
                    relationships: {
                        owner: {
                            mapping: 'Person',
                            type: RelationshipType.OneToOne,
                            reverse: 'car'
                        }
                    }
                });
                collection.install(done);
            });

            it('assign array to scalar relationship', function(done) {
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    owner: ['remoteId1', 'remoteId2'],
                    id: 'carRemoteId'
                }, function(err, obj) {
                    var ownerError = err.owner;
                    assert.ok(ownerError);
                    done();
                });
            });

            it('assign array to scalar relationship reverse', function(done) {
                personMapping.map({
                    name: 'Michael Ford',
                    car: ['remoteId1', 'remoteId2'],
                    age: 23,
                    id: 'personRemoteId'
                }, function(err, obj) {
                    assert.ok(err.car);
                    done();
                });
            });


        });
        describe('foreign key', function() {

            var personMapping;
            beforeEach(function(done) {
                collection = new Collection('myCollection');
                personMapping = collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name'],
                    relationships: {
                        owner: {
                            mapping: 'Person',
                            type: RelationshipType.OneToMany,
                            reverse: 'cars'
                        }
                    }
                });
                collection.install(done);
            });

            it('assign array to scalar relationship', function(done) {
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    owner: ['remoteId1', 'remoteId2'],
                    id: 'carRemoteId'
                }, function(err, obj) {
                    var ownerError = err.owner;
                    assert.ok(ownerError);
                    done();
                });
            });

            it('assign scalar to vector relationship reverse', function(done) {
                personMapping.map({
                    name: 'Michael Ford',
                    cars: 'remoteId1',
                    age: 23,
                    id: 'personRemoteId'
                }, function(err, obj) {
                    assert.ok(err.cars);
                    done();
                });
            });


        });
    });

    describe('bulk', function() {
        describe('new', function() {
            describe('no relationships', function() {
                beforeEach(function(done) {
                    collection = new Collection('myCollection');
                    carMapping = collection.mapping('Car', {
                        id: 'id',
                        attributes: ['colour', 'name']
                    });
                    collection.install(done);
                });

                it('all valid', function(done) {
                    var raw = [{
                        colour: 'red',
                        name: 'Aston Martin',
                        id: 'remoteId1sdfsdfdsfgsdf'
                    }, {
                        colour: 'blue',
                        name: 'Lambo',
                        id: "remoteId2dfgdfgdfg"
                    }, {
                        colour: 'green',
                        name: 'Ford',
                        id: "remoteId3dfgdfgdfgdfg"
                    }];
                    carMapping._mapBulk(raw, function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, raw.length);
                        assert.equal(objs[0].colour, 'red');
                        assert.equal(objs[1].colour, 'blue');
                        assert.equal(objs[2].colour, 'green');
                        done();
                    })
                });
            });
            describe('foreign key', function() {
                var personMapping;

                beforeEach(function(done) {
                    collection = new Collection('myCollection');
                    personMapping = collection.mapping('Person', {
                        id: 'id',
                        attributes: ['name', 'age']
                    });
                    carMapping = collection.mapping('Car', {
                        id: 'id',
                        attributes: ['colour', 'name'],
                        relationships: {
                            owner: {
                                mapping: 'Person',
                                type: RelationshipType.OneToMany,
                                reverse: 'cars'
                            }
                        }
                    });
                    collection.install(done);
                });

                it('same owner using _mapBulk', function(done) {
                    var ownerId = 'ownerId462345345';
                    var raw = [{
                        colour: 'red',
                        name: 'Aston Martin',
                        id: 'remoteId1',
                        owner: ownerId
                    }, {
                        colour: 'blue',
                        name: 'Lambo',
                        id: "remoteId2",
                        owner: ownerId
                    }, {
                        colour: 'green',
                        name: 'Ford',
                        id: "remoteId3",
                        owner: ownerId
                    }];
                    carMapping._mapBulk(raw, function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, raw.length);
                        assert.equal(objs[0].owner, objs[1].owner);
                        assert.equal(objs[1].owner, objs[2].owner);
                        done();
                    })
                });

                it('same owner using map', function(done) {
                    var ownerId = 'ownerId!!!334';
                    var carRaw1 = {
                        colour: 'red',
                        name: 'Aston Martin',
                        id: 'remoteId1',
                        owner: ownerId
                    };
                    var carRaw2 = {
                        colour: 'blue',
                        name: 'Lambo',
                        id: "remoteId2",
                        owner: ownerId
                    };
                    carMapping.map(carRaw1, function(err, car1) {
                        if (err) {
                            done(err);
                        } else {
                            carMapping.map(carRaw2, function(err, car2) {
                                if (err) done(err);
                                assert.equal(car1.owner, car2.owner);
                                done();
                            })
                        }
                    });
                })
            })
        });

        describe('faulted relationships', function() {
            var cars;

            var personMapping;

            beforeEach(function(done) {
                collection = new Collection('myCollection');
                personMapping = collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name'],
                    relationships: {
                        owner: {
                            mapping: 'Person',
                            type: RelationshipType.OneToMany,
                            reverse: 'cars'
                        }
                    }
                });
                collection.install(done);
            });


            describe('via remote id', function() {
                beforeEach(function(done) {
                    personMapping.map({
                        name: 'Michael Ford',
                        age: 23,
                        id: 'personRemoteId'
                    }, function(err) {
                        if (err) done(err);
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1',
                            owner: 'personRemoteId'
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2",
                            owner: 'personRemoteId'
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3",
                            owner: 'personRemoteId'
                        }];
                        carMapping._mapBulk(raw, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            cars = objs;
                            done();
                        });

                    });
                });

                it('should have mapped onto Michael', function() {
                    assert.equal(cars.length, 3);
                    assert.equal(cars[0].owner, cars[1].owner);
                    assert.equal(cars[1].owner, cars[2].owner);
                });

            });


            describe('bulk bulk', function() {
                beforeEach(function(done) {
                    cars = [];
                    personMapping.map({
                        name: 'Michael Ford',
                        age: 23,
                        id: 'personRemoteId'
                    }, function(err) {
                        if (err) done(err);
                        var raw1 = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1',
                            owner: 'personRemoteId'
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2",
                            owner: 'personRemoteId'
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3",
                            owner: 'personRemoteId'
                        }];
                        carMapping._mapBulk(raw1, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            _.each(objs, function(o) {
                                cars.push(o);
                            });
                            if (cars.length == 9) {
                                done();
                            }
                        });
                        var raw2 = [{
                            colour: 'red',
                            name: 'Peauget',
                            id: 'remoteId4',
                            owner: 'personRemoteId'
                        }, {
                            colour: 'blue',
                            name: 'Chevy',
                            id: "remoteId5",
                            owner: 'personRemoteId'
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId6",
                            owner: 'personRemoteId'
                        }];
                        carMapping._mapBulk(raw2, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            _.each(objs, function(o) {
                                cars.push(o);
                            });
                            if (cars.length == 9) {
                                done();
                            }
                        });
                        var raw3 = [{
                            colour: 'red',
                            name: 'Ferarri',
                            id: 'remoteId7',
                            owner: 'personRemoteId'
                        }, {
                            colour: 'blue',
                            name: 'Volvo',
                            id: "remoteId8",
                            owner: 'personRemoteId'
                        }, {
                            colour: 'green',
                            name: 'Dodge',
                            id: "remoteId9",
                            owner: 'personRemoteId'
                        }];
                        carMapping._mapBulk(raw3, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            _.each(objs, function(o) {
                                cars.push(o);
                            });
                            if (cars.length == 9) {
                                done();
                            }
                        });

                    });
                });

                it('should have mapped onto Michael', function() {
                    assert.equal(cars.length, 9);
                    for (var i = 0; i < 8; i++) {
                        assert.equal(cars[i].owner, cars[i + 1].owner);
                    }
                });

            });

            describe('via nested remote id', function() {
                beforeEach(function(done) {
                    personMapping.map({
                        name: 'Michael Ford',
                        age: 23,
                        id: 'personRemoteId'
                    }, function(err) {
                        if (err) done(err);
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1',
                            owner: {
                                id: 'personRemoteId'
                            }
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2",
                            owner: {
                                id: 'personRemoteId'
                            }
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3",
                            owner: {
                                id: 'personRemoteId'
                            }
                        }];
                        carMapping._mapBulk(raw, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            cars = objs;
                            done();
                        });

                    });
                });

                it('should have mapped onto Michael', function() {
                    assert.equal(cars.length, 3);
                    assert.equal(cars[0].owner, cars[1].owner);
                    assert.equal(cars[1].owner, cars[2].owner);
                });

            });

            describe('via nested remote id with unmergedChanges', function() {
                this.timeout(5000);
                beforeEach(function(done) {
                    personMapping.map({
                        name: 'Michael Ford',
                        age: 23,
                        id: 'personRemoteId'
                    }, function(err) {
                        if (err) done(err);
                        var raw = [{
                            colour: 'red',
                            name: 'Aston Martin',
                            id: 'remoteId1',
                            owner: {
                                id: 'personRemoteId'
                            }
                        }, {
                            colour: 'blue',
                            name: 'Lambo',
                            id: "remoteId2",
                            owner: {
                                id: 'personRemoteId',
                                name: 'Bob'
                            }
                        }, {
                            colour: 'green',
                            name: 'Ford',
                            id: "remoteId3",
                            owner: {
                                id: 'personRemoteId'
                            }
                        }];
                        carMapping._mapBulk(raw, function(err, objs, res) {
                            if (err) {
                                done(err);
                            }
                            cars = objs;
                            done();
                        });

                    });
                });

                it('should have mapped onto Michael', function() {
                    assert.equal(cars.length, 3);
                    assert.equal(cars[0].owner, cars[1].owner);
                    assert.equal(cars[1].owner, cars[2].owner);
                });
                it('should have changed the name', function() {
                    assert.equal(cars[0].owner.name, 'Bob');
                    assert.equal(cars[1].owner.name, 'Bob');
                    assert.equal(cars[2].owner.name, 'Bob');
                });

            })

        });


    });
});
},{"../../index":1,"../../src/cache":43,"../../src/collection":45,"../../src/object":53,"../../src/relationship":58,"../../vendor/operations.js/src/operation":108,"chai":9}],70:[function(require,module,exports){
var s = require('../../index')
    , assert = require('chai').assert;

describe('mapping!', function () {
    var Mapping = require('../../src/mapping').Mapping;

    beforeEach(function () {
        s.reset(true);
    });

    it('_fields', function () {
        var m = new Mapping({
            type: 'type',
            id: 'id',
            attributes: ['field1', 'field2']
        });
        assert.include(m._fields, 'id');
        assert.include(m._fields, 'field1');
        assert.include(m._fields, 'field2');
        assert.notInclude(m._fields, 'type');
    });

    it('attributes', function () {
        var m = new Mapping({
            type: 'type',
            id: 'id',
            attributes: ['field1', 'field2']
        });
        assert.include(m.attributes, 'field1');
        assert.include(m.attributes, 'field2');
    });

    it('type', function () {
        var m = new Mapping({
            type: 'type',
            id: 'id',
            attributes: ['field1', 'field2']
        });
        assert.equal(m.type, 'type');
    });

    it('id', function () {
        var m = new Mapping({
            type: 'type',
            id: 'id',
            attributes: ['field1', 'field2']
        });
        assert.equal(m.id, 'id');
    });




});
},{"../../index":1,"../../src/mapping":49,"chai":9}],71:[function(require,module,exports){
/*
 These tests deal with the creation of new SiestaModel objects.
 */

var s = require('../../index')
    , assert = require('chai').assert;

describe('mapping new object', function () {
    var Collection = require('../../src/collection').Collection;

    var RelationshipType = require('../../src/relationship').RelationshipType;
    var OneToManyProxy = require('../../src/oneToManyProxy').OneToManyProxy;
    var cache = require('../../src/cache');
    

    beforeEach(function () {
        s.reset(true);
    });

    describe('fields', function () {
        var collection, carMapping;

        beforeEach(function (done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(done);
        });

        it('valid', function () {
            var car = carMapping._new();
            _.each(carMapping._fields, function (f) {
                assert(car[f] !== undefined);
            });
        });

        describe('id field', function () {
            var car;
            beforeEach(function () {
                car = carMapping._new();
            });

            it('should be present', function () {
                assert.property(car, 'id');
            });

            describe('in cache', function () {
                beforeEach(function () {
                    cache.insert(car);
                    assert.equal(car, cache.get({_id: car._id}));
                    car.id = 'newRemoteId';
                });
                it('should update cache', function () {
                    assert.equal(car, cache.get({id: car.id, mapping: car.mapping}));
                });
                it('should remove previous', function () {
                    assert.equal(car, cache.get({id: car.id, mapping: car.mapping}));
                    car.id = 'brandNewRemoteId';
                    assert.equal(car, cache.get({id: car.id, mapping: car.mapping}));
                    assert.notOk(cache.get({id: 'newRemoteId', mapping: car.mapping}))
                });
                it('should remove all if set remoteid to null', function () {
                    assert.equal(car, cache.get({id: car.id, mapping: car.mapping}));
                    car.id = null;
                    assert.notOk(cache.get({id: 'newRemoteId', mapping: car.mapping}))
                })
            });
        });


    });

    describe('relationships', function () {
        var collection, carMapping, personMapping;

        function configureAPI(type, reverseName, done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'Person',
                        type: type,
                        reverse: reverseName
                    }
                }
            });
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['age', 'name']
            });
            collection.install(done);
        }

        beforeEach(function (done) {
            configureAPI(RelationshipType.OneToMany, 'cars', done);
        });

        describe('installation of proxies', function () {

            it('installs forward related object proxy', function () {
                var carObject = carMapping._new();
                assert.instanceOf(carObject.ownerProxy, OneToManyProxy);
            });

            it('installs reverse related object proxy', function () {
                var personObject = personMapping._new();
                assert.instanceOf(personObject.carsProxy, OneToManyProxy);
            });

        });

    });



});

},{"../../index":1,"../../src/cache":43,"../../src/collection":45,"../../src/oneToManyProxy":54,"../../src/relationship":58,"chai":9}],72:[function(require,module,exports){
var s = require('../../index'),
    assert = require('chai').assert;

describe('mapping queries', function() {

    var SiestaModel = require('../../src/object').SiestaModel;
    var Collection = require('../../src/collection').Collection;
    var RelationshipType = require('../../src/relationship').RelationshipType;
    var cache = require('../../src/cache');

    beforeEach(function() {
        s.reset(true);
    });

    describe('queries', function() {
        var collection, mapping;
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            mapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['color', 'name']
            });
            collection.install(function(err) {
                if (err) done(err);
                mapping.map([{
                    id: 4,
                    color: 'red',
                    name: 'Aston Martin'
                }, {
                    id: 5,
                    color: 'blue',
                    name: 'Ford'
                }], done);
            });
        });

        it('all', function(done) {
            mapping.all(function(err, cars) {
                if (err) done(err);
                assert.equal(cars.length, 2);
                _.each(cars, function(car) {
                    assert.instanceOf(car, SiestaModel);
                });
                done();
            });
        });

        it('query', function(done) {
            this.timeout(10000);
            mapping.query({
                color: 'red'
            }, function(err, cars) {
                if (err) done(err);
                assert.equal(cars.length, 1);
                _.each(cars, function(car) {
                    assert.instanceOf(car, SiestaModel);
                });
                done();
            });
        });

        it('get', function(done) {
            mapping.get(4, function(err, car) {
                if (err) done(err);
                assert.ok(car);
                assert.instanceOf(car, SiestaModel);
                assert.equal(car.color, 'red');
                done();
            });
        });


    });

    describe('reverse', function() {
        var carMapping, personMapping;

        var collection;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        type: RelationshipType.OneToMany,
                        reverse: 'cars',
                        mapping: 'Person'
                    }
                }
            });
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });



        it('cached', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin',
                owner: {
                    name: 'Michael Ford',
                    age: 2,
                    id: '2'
                },
                id: 5
            }, function(err, car) {
                if (err) done(err);
                personMapping.get('2', function(err, p) {
                    if (err) done(err);
                    assert.ok(p, 'Should be able to fetch the person');
                    p.carsProxy.get(function(err, cars) {
                        assert.equal(cars.length, 1);
                        assert.equal(cars[0].owner, p);
                        done(err);
                    });
                });
            });
        });
    });


});
},{"../../index":1,"../../src/cache":43,"../../src/collection":45,"../../src/object":53,"../../src/relationship":58,"chai":9}],73:[function(require,module,exports){
var s = require('../../index')
    , assert = require('chai').assert;

describe('mapping validation', function () {
    var Mapping =  require('../../src/mapping').Mapping;

    beforeEach(function () {
        s.reset(true);
    });

    describe('validation', function () {
        it('no type', function () {
            var m = new Mapping({
                id: 'id',
                attributes: ['field1', 'field2'],
                collection: 'myCollection'
            });
            var errors = m._validate();
            assert.equal(1, errors.length);
        });
        it('no collection', function () {
            var m = new Mapping({
                id: 'id',
                attributes: ['field1', 'field2'],
                type: 'Car'
            });
            var errors = m._validate();
            assert.equal(1, errors.length);
        });
    });
});
},{"../../index":1,"../../src/mapping":49,"chai":9}],74:[function(require,module,exports){

var s = require('../index');

var assert = require('chai').assert;
var notificationCentre = require('../src/notificationCentre').notificationCentre;

describe('Notification Centre', function () {
    beforeEach(function () {
        s.reset(true);
    });

    describe('emissions', function () {
        it('simple emissions work', function (done) {
            notificationCentre.on('blah', function () {
                done();
            });
            notificationCentre.emit('blah');
        });

        it('emissions with payloads work', function (done) {
            var p = {};
            notificationCentre.on('blah', function (payload) {
                assert.equal(payload, p);
                done();
            });
            notificationCentre.emit('blah', p);
        });
    });





});
},{"../index":1,"../src/notificationCentre":52,"chai":9}],75:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('notifications', function() {

    var Collection = require('../src/collection').Collection,
        ChangeType = require('../src/changes').ChangeType,
        util = require('../src/util')
    notificationCentre = require('../src/notificationCentre').notificationCentre;

    beforeEach(function() {
        s.reset(true);
    });

    var car;
    var collection, carMapping;
    var car;

    var notif, collectionNotif, genericNotif, localIdNotif, remoteIdNotif;

    describe('attributes', function() {
        afterEach(function() {
            notif = null;
            collectionNotif = null;
            genericNotif = null;
            car = null;
            collection = null;
            carMapping = null;
        });

        describe('set value', function() {

            beforeEach(function(done) {
                collection = new Collection('myCollection');
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colour', 'name']
                });
                collection.install(function(err) {
                    if (err) done(err);
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        if (err) {
                            done(err);
                        } else {
                            car = _car;
                            function checkDone() {
                                if (notif && 
                                    genericNotif && 
                                    collectionNotif &&
                                    localIdNotif && 
                                    remoteIdNotif) {
                                    done();
                                }
                            }
                            s.once('myCollection:Car', function(n) {
                                notif = n;
                                checkDone();
                            });
                            s.once('myCollection', function(n) {
                                collectionNotif = n;
                                checkDone();
                            });
                            s.once('Siesta', function(n) {
                                genericNotif = n;
                                checkDone();
                            });  
                            s.once(_car._id, function (n) {
                                localIdNotif = n;
                                checkDone();
                            });
                            s.once('myCollection:Car:xyz', function (n) {
                                remoteIdNotif = n;
                                checkDone();
                            });
                            car.colour = 'blue';
                        }
                    });
                });

            });

            it('all notifs equal', function () {
                assert.equal(notif, genericNotif);
                assert.equal(genericNotif, collectionNotif);
                assert.equal(collectionNotif, localIdNotif);
                assert.equal(localIdNotif, remoteIdNotif);
            })

            it('notif contains collection', function() {
                assert.equal(notif.collection, 'myCollection');
            });

            it('notif contains mapping', function() {
                assert.equal(notif.mapping, 'Car');
            });

            it('changeDict contains attribute name', function() {
                assert.equal(notif.field, 'colour');
            });

            it('changeDict contains change type', function() {
                assert.equal(notif.type, ChangeType.Set);
            });

            it('changeDict contains old value', function() {
                assert.equal(notif.old, 'red');
            });

            it('changeDict contains new value', function() {
                assert.equal(notif.new, 'blue');
            });

            it('changeDict contains new value', function() {
                assert.equal(notif._id, car._id);
            });

        });

        describe('array notifications', function() {
            beforeEach(function(done) {
                collection = new Collection('myCollection');
                carMapping = collection.mapping('Car', {
                    id: 'id',
                    attributes: ['colours', 'name']
                });
                collection.install(done);
            });

            it('sends notifications for all levels', function(done) {
                var notifs = [];
                carMapping.map({
                    colours: ['red', 'blue'],
                    name: 'Aston Martin',
                    id: 'xyz'
                }, function(err, _car) {
                    car = _car;
                    if (err) done(err);
                    var listener = function(n) {
                        notifs.push(n);
                        if (notifs.length >= 5) {
                            done();
                        }
                    };
                    s.once('myCollection:Car', listener);
                    s.once('myCollection', listener);
                    s.once('Siesta', listener);
                    s.once(_car._id, listener);
                    s.once('myCollection:Car:xyz', listener);
                    car.colours.push('green');
                });
            });

            describe('push', function() {
                beforeEach(function(done) {
                    carMapping.map({
                        colours: ['red', 'blue'],
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        car = _car;
                        if (err) done(err);
                        s.once('myCollection:Car', function(n) {
                            notif = n;
                            done();
                        });
                        car.colours.push('green');

                    });
                });

                it('notif contains collection', function() {
                    assert.equal(notif.collection, 'myCollection');
                });

                it('notif contains mapping', function() {
                    assert.equal(notif.mapping, 'Car');
                });

                it('notif contains object', function() {
                    assert.equal(notif._id, car._id);
                });

                it('changeDict contains change', function() {
                    assert.equal(notif.field, 'colours');
                    assert.equal(notif.type, ChangeType.Splice);
                    assert.equal(notif.index, 2);
                    assert.equal(notif.removed.length, 0);
                    assert.equal(notif.added.length, 1);
                });

            });

            describe('pop', function() {
                beforeEach(function(done) {
                    carMapping.map({
                        colours: ['red', 'blue'],
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        car = _car;
                        if (err) done(err);
                        s.once('myCollection:Car', function(n) {
                            notif = n;
                            done();
                        });
                        car.colours.pop();
                    });
                });

                it('notif contains collection', function() {
                    assert.equal(notif.collection, 'myCollection');
                });

                it('notif contains mapping', function() {
                    assert.equal(notif.mapping, 'Car');
                });

                it('notif contains _id', function() {
                    assert.equal(notif._id, car._id);
                });

                it('notif contains change', function() {
                    assert.equal(notif.field, 'colours');
                    assert.equal(notif.type, ChangeType.Splice);
                    assert.equal(notif.index, 1);
                    assert.equal(notif.removed.length, 1);
                    assert.include(notif.removed, 'blue');
                    assert.equal(notif.added.length, 0);
                });
            });

            describe('shift', function() {
                beforeEach(function(done) {
                    carMapping.map({
                        colours: ['red', 'blue'],
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        car = _car;
                        if (err) done(err);
                        s.once('myCollection:Car', function(n) {
                            notif = n;
                            done();
                        });
                        car.colours.shift();
                    });
                });

                it('notif contains collection', function() {
                    assert.equal(notif.collection, 'myCollection');
                });

                it('notif contains mapping', function() {
                    assert.equal(notif.mapping, 'Car');
                });

                it('notif contains id', function() {
                    assert.equal(notif._id, car._id);
                });

                it('notif contains change', function() {
                    assert.equal(notif.field, 'colours');
                    assert.equal(notif.type, ChangeType.Splice);
                    assert.equal(notif.index, 0);
                    assert.equal(notif.removed.length, 1);
                    assert.include(notif.removed, 'red');
                    assert.equal(notif.added.length, 0);

                });


            });

            describe('unshift', function() {
                beforeEach(function(done) {
                    carMapping.map({
                        colours: ['red', 'blue'],
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        car = _car;

                        s.once('myCollection:Car', function(n) {
                            notif = n;
                            done();
                        });
                        car.colours.unshift('green');
                    });

                });

                it('notif contains type', function() {
                    assert.equal(notif.collection, 'myCollection');
                });

                it('notif contains mapping', function() {
                    assert.equal(notif.mapping, 'Car');
                });

                it('notif contains object', function() {
                    assert.equal(notif._id, car._id);
                });

                it('notif contains change', function() {
                    assert.equal(notif.field, 'colours');
                    assert.equal(notif.type, ChangeType.Splice);
                    assert.equal(notif.index, 0);
                    assert.equal(notif.removed.length, 0);
                    assert.equal(notif.added.length, 1);
                });

            });

            describe('sort', function() {
                var notifs = [];

                beforeEach(function(done) {
                    notifs = [];
                    carMapping.map({
                        colours: ['red', 'green', 'blue'],
                        name: 'Aston Martin',
                        id: 'xyz'
                    }, function(err, _car) {
                        car = _car;
                        if (err) done(err);
                        var listener = function(n) {
                            notifs.push(n);
                            if (notifs.length == 2) {
                                s.removeListener('myCollection:Car', listener);
                                done();
                            }
                        };
                        s.on('myCollection:Car', listener);
                        car.colours.sort();

                    });
                });

                it('notif contains colleciton', function() {
                    _.each(notifs, function(notif) {
                        assert.equal(notif.collection, 'myCollection');
                    });
                });

                it('notif contains mapping', function() {
                    _.each(notifs, function(notif) {
                        assert.equal(notif.mapping, 'Car');
                    });
                });

                it('notif contains object', function() {
                    _.each(notifs, function(notif) {
                        assert.equal(notif._id, car._id);
                    });
                });

                it('notif contains change', function() {
                    var removalNotif;
                    var addNotif;
                    _.each(notifs, function(notif) {
                        assert.equal(notif.field, 'colours');
                        assert.equal(notif.type, ChangeType.Splice);
                        if (notif.removed.length) {
                            removalNotif = notif;
                        } else if (notif.added) {
                            addNotif = notif;
                        }
                    });


                });
            });
        });

    });

    describe('relationships', function() {
        var collection;
        var car, person;
        var carMapping, personMapping;

        var Collection = require('../src/collection').Collection;


        beforeEach(function(done) {
            s.reset(true);
            done();
        });

        describe('array', function() {

            var personNotif, personGenericNotif, personCollectionNotif;
            var carNotif, carGenericNotif, carCollectionNotif;

            describe('foreign key', function() {
                beforeEach(function(done) {
                    collection = new Collection('myCollection');

                    carMapping = collection.mapping('Car', {
                        id: 'id',
                        attributes: ['colours', 'name'],
                        relationships: {
                            owner: {
                                mapping: 'Person',
                                type: RelationshipType.OneToMany,
                                reverse: 'cars'
                            }
                        }
                    });

                    personMapping = collection.mapping('Person', {
                        id: 'id',
                        attributes: ['name', 'age']
                    });

                    collection.install(done);
                });

                describe('push', function() {

                    var anotherCar;

                    beforeEach(function(done) {
                        car = carMapping._new();
                        anotherCar = carMapping._new();
                        person = personMapping._new();
                        person.cars = [car];
                        s.on('myCollection:Person', function(n) {
                            if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                personNotif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                personCollectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                personGenericNotif = n;
                            }
                        });
                        s.on('myCollection:Car', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carNotif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carCollectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carGenericNotif = n;
                            }
                        });
                        person.cars.push(anotherCar);
                        util.next(function() {
                            notificationCentre.removeAllListeners();
                            done();
                        })
                    });

                    describe('person', function() {
                        it('type', function() {
                            assert.equal(personNotif.type, ChangeType.Splice);
                            assert.equal(personGenericNotif.type, ChangeType.Splice);
                            assert.equal(personCollectionNotif.type, ChangeType.Splice);
                        });

                        it('id', function() {
                            assert.include(personNotif.addedId, anotherCar._id);
                            assert.include(personGenericNotif.addedId, anotherCar._id);
                            assert.include(personCollectionNotif.addedId, anotherCar._id);
                        });

                        it('added', function() {
                            assert.include(personNotif.added, anotherCar);
                            assert.include(personGenericNotif.added, anotherCar);
                            assert.include(personCollectionNotif.added, anotherCar);
                        });
                    });

                    describe('car', function() {
                        it('type', function() {
                            assert.equal(carNotif.type, ChangeType.Set);
                            assert.equal(carGenericNotif.type, ChangeType.Set);
                            assert.equal(carCollectionNotif.type, ChangeType.Set);
                        });

                        it('id', function() {
                            assert.equal(carNotif.newId, person._id);
                            assert.equal(carGenericNotif.newId, person._id);
                            assert.equal(carCollectionNotif.newId, person._id);
                        });

                        it('new', function() {
                            assert.equal(carNotif.new, person);
                            assert.equal(carGenericNotif.new, person);
                            assert.equal(carCollectionNotif.new, person);
                        })
                    });
                });

                describe('splice', function(done) {

                    beforeEach(function(done) {
                        car = carMapping._new();
                        person = personMapping._new();
                        person.cars = [car];
                        s.on('myCollection:Person', function(n) {
                            if (n.type == ChangeType.Splice) {
                                personNotif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.Splice) {
                                personCollectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.Splice) {
                                personGenericNotif = n;
                            }
                        });
                        s.on('myCollection:Car', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carNotif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carCollectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.Set && n.mapping == 'Car') {
                                carGenericNotif = n;
                            }
                        });
                        person.cars.splice(0, 1);
                        util.next(function() {
                            notificationCentre.removeAllListeners();
                            done();
                        })
                    });

                    describe('person', function() {
                        it('type', function() {
                            assert.equal(personNotif.type, ChangeType.Splice);
                            assert.equal(personGenericNotif.type, ChangeType.Splice);
                            assert.equal(personCollectionNotif.type, ChangeType.Splice);
                        });

                        it('id', function() {
                            assert.include(personNotif.removedId, car._id);
                            assert.include(personGenericNotif.removedId, car._id);
                            assert.include(personCollectionNotif.removedId, car._id);
                        });

                        it('added', function() {
                            assert.include(personNotif.removed, car);
                            assert.include(personGenericNotif.removed, car);
                            assert.include(personCollectionNotif.removed, car);
                        });
                    });

                    describe('car', function() {
                        it('type', function() {
                            assert.equal(carNotif.type, ChangeType.Set);
                            assert.equal(carGenericNotif.type, ChangeType.Set);
                            assert.equal(carCollectionNotif.type, ChangeType.Set);
                        });

                        it('new id', function() {
                            assert.notOk(carNotif.newId)
                            assert.notOk(carGenericNotif.newId);
                            assert.notOk(carCollectionNotif.newId);
                        });

                        it('new', function() {
                            assert.notOk(carNotif.new);
                            assert.notOk(carGenericNotif.new);
                            assert.notOk(carCollectionNotif.new);
                        });

                        it('old', function() {
                            assert.equal(carNotif.old, person);
                            assert.equal(carGenericNotif.old, person);
                            assert.equal(carCollectionNotif.old, person);
                        });

                        it('old id', function() {
                            assert.equal(carNotif.oldId, person._id);
                            assert.equal(carGenericNotif.oldId, person._id);
                            assert.equal(carCollectionNotif.oldId, person._id);
                        });
                    });

                });

            });

            describe('many to many', function() {
                beforeEach(function(done) {
                    collection = new Collection('myCollection');

                    carMapping = collection.mapping('Car', {
                        id: 'id',
                        attributes: ['colours', 'name'],
                        relationships: {
                            owners: {
                                mapping: 'Person',
                                type: RelationshipType.ManyToMany,
                                reverse: 'cars'
                            }
                        }
                    });

                    personMapping = collection.mapping('Person', {
                        id: 'id',
                        attributes: ['name', 'age']
                    });

                    collection.install(done);
                });

                describe('no faults', function() {

                    var anotherCar;

                    describe('push', function(done) {
                        beforeEach(function(done) {
                            car = carMapping._new();
                            anotherCar = carMapping._new();
                            person = personMapping._new();
                            person.cars = [car];
                            s.on('myCollection:Person', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    personNotif = n;
                                }
                            });
                            s.on('myCollection', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    personCollectionNotif = n;
                                }
                            });
                            s.on('Siesta', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    personGenericNotif = n;
                                }
                            });
                            s.on('myCollection:Car', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carNotif = n;
                                }
                            });
                            s.on('myCollection', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carCollectionNotif = n;
                                }
                            });
                            s.on('Siesta', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carGenericNotif = n;
                                }
                            });
                            person.cars.push(anotherCar);
                            util.next(function() {
                                notificationCentre.removeAllListeners();
                                done();
                            });
                        });

                        describe('person', function() {

                            it('type', function() {
                                assert.equal(personNotif.type, ChangeType.Splice);
                                assert.equal(personGenericNotif.type, ChangeType.Splice);
                                assert.equal(personCollectionNotif.type, ChangeType.Splice);
                            });

                            it('id', function() {
                                assert.include(personNotif.addedId, anotherCar._id);
                                assert.include(personGenericNotif.addedId, anotherCar._id);
                                assert.include(personCollectionNotif.addedId, anotherCar._id);
                            });

                            it('added', function() {
                                assert.include(personNotif.added, anotherCar);
                                assert.include(personGenericNotif.added, anotherCar);
                                assert.include(personCollectionNotif.added, anotherCar);
                            });
                        });

                        describe('car', function() {
                            it('type', function() {
                                assert.equal(carNotif.type, ChangeType.Splice);
                                assert.equal(carGenericNotif.type, ChangeType.Splice);
                                assert.equal(carCollectionNotif.type, ChangeType.Splice);
                            });

                            it('id', function() {
                                assert.include(carNotif.addedId, person._id);
                                assert.include(carGenericNotif.addedId, person._id);
                                assert.include(carCollectionNotif.addedId, person._id);
                            });

                            it('added', function() {
                                assert.include(carNotif.added, person);
                                assert.include(carGenericNotif.added, person);
                                assert.include(carCollectionNotif.added, person);
                            });
                        });




                    });

                    describe('splice', function() {
                        beforeEach(function(done) {
                            car = carMapping._new();
                            person = personMapping._new();
                            person.cars = [car];
                            s.on('myCollection:Person', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    notif = n;
                                }
                            });
                            s.on('myCollection', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    collectionNotif = n;
                                }
                            });
                            s.on('Siesta', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Person') {
                                    genericNotif = n;
                                }
                            });
                            s.on('myCollection:Car', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carNotif = n;
                                }
                            });
                            s.on('myCollection', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carCollectionNotif = n;
                                }
                            });
                            s.on('Siesta', function(n) {
                                if (n.type == ChangeType.Splice && n.mapping == 'Car') {
                                    carGenericNotif = n;
                                }
                            });
                            person.cars.splice(0, 1);
                            util.next(function() {
                                notificationCentre.removeAllListeners();
                                done();
                            })
                        });


                        it('type', function() {
                            assert.equal(notif.type, ChangeType.Splice);
                            assert.equal(genericNotif.type, ChangeType.Splice);
                            assert.equal(collectionNotif.type, ChangeType.Splice);
                            assert.equal(carNotif.type, ChangeType.Splice);
                            assert.equal(carGenericNotif.type, ChangeType.Splice);
                            assert.equal(carCollectionNotif.type, ChangeType.Splice);
                        });

                    });
                });

            });

        });

    });

    describe('new object', function() {

        beforeEach(function(done) {
            notif = null;
            genericNotif = null;
            collectionNotif = null;
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(function(err) {
                if (err) done(err);
                s.on('myCollection:Car', function(n) {
                    if (n.type == ChangeType.New) {
                        notif = n;
                    }
                });
                s.on('myCollection', function(n) {
                    if (n.type == ChangeType.New) {
                        collectionNotif = n;
                    }
                });
                s.on('Siesta', function(n) {
                    if (n.type == ChangeType.New) {
                        genericNotif = n;
                    }
                });
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    id: 'xyz'
                }, function(err, _car) {
                    if (err) {
                        done(err);
                    } else {
                        car = _car;
                        notificationCentre.removeAllListeners();
                        done();
                    }
                });
            });
        });

        it('is notif', function() {
            assert.ok(notif);
        });

        it('is genericNotif', function() {
            assert.ok(genericNotif);
        });

        it('is collectionNotif', function() {
            assert.ok(collectionNotif);
        });

        it('type is New', function() {
            assert.equal(notif.type, ChangeType.New);
            assert.equal(genericNotif.type, ChangeType.New);
            assert.equal(collectionNotif.type, ChangeType.New);
        });

        it('new', function() {
            assert.equal(notif.new, car);
            assert.equal(genericNotif.new, car);
            assert.equal(collectionNotif.new, car);
        });

        it('_id', function() {
            assert.equal(notif.newId, car._id);
            assert.equal(genericNotif.newId, car._id);
            assert.equal(collectionNotif.newId, car._id);
            assert.equal(notif._id, car._id);
            assert.equal(genericNotif._id, car._id);
            assert.equal(collectionNotif._id, car._id);
        });

    });

    describe('object removal', function() {

        beforeEach(function(done) {
            notif = null;
            genericNotif = null;
            collectionNotif = null;
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(function(err) {
                if (err) done(err);
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    id: 'xyz'
                }, function(err, _car) {
                    if (err) {
                        done(err);
                    } else {
                        car = _car;
                        s.on('myCollection:Car', function(n) {
                            if (n.type == ChangeType.Remove) {
                                notif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.Remove) {
                                collectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.Remove) {
                                genericNotif = n;
                            }
                        });
                        car.remove();
                        notificationCentre.removeAllListeners();
                        done();
                    }
                });
            });
        });

        it('is notif', function() {
            assert.ok(notif);
        });

        it('is genericNotif', function() {
            assert.ok(genericNotif);
        });

        it('is collectionNotif', function() {
            assert.ok(collectionNotif);
        });

        it('type is New', function() {
            assert.equal(notif.type, ChangeType.Remove);
            assert.equal(genericNotif.type, ChangeType.Remove);
            assert.equal(collectionNotif.type, ChangeType.Remove);
        });

        it('new', function() {
            assert.equal(notif.old, car);
            assert.equal(genericNotif.old, car);
            assert.equal(collectionNotif.old, car);
        });

        it('_id', function() {
            assert.equal(notif.oldId, car._id);
            assert.equal(genericNotif.oldId, car._id);
            assert.equal(collectionNotif.oldId, car._id);
            assert.equal(notif._id, car._id);
            assert.equal(genericNotif._id, car._id);
            assert.equal(collectionNotif._id, car._id);
        });

    });

    describe('object restoration', function() {
        beforeEach(function(done) {
            notif = null;
            genericNotif = null;
            collectionNotif = null;
            collection = new Collection('myCollection');
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name']
            });
            collection.install(function(err) {
                if (err) done(err);
                carMapping.map({
                    colour: 'red',
                    name: 'Aston Martin',
                    id: 'xyz'
                }, function(err, _car) {
                    if (err) {
                        done(err);
                    } else {
                        car = _car;
                        car.remove();
                        s.on('myCollection:Car', function(n) {
                            if (n.type == ChangeType.New) {
                                notif = n;
                            }
                        });
                        s.on('myCollection', function(n) {
                            if (n.type == ChangeType.New) {
                                collectionNotif = n;
                            }
                        });
                        s.on('Siesta', function(n) {
                            if (n.type == ChangeType.New) {
                                genericNotif = n;
                            }
                        });
                        car.restore();
                        notificationCentre.removeAllListeners();
                        done();
                    }
                });
            });
        });

        it('is notif', function() {
            assert.ok(notif);
        });

        it('is genericNotif', function() {
            assert.ok(genericNotif);
        });

        it('is collectionNotif', function() {
            assert.ok(collectionNotif);
        });

        it('type is New', function() {
            assert.equal(notif.type, ChangeType.New);
            assert.equal(genericNotif.type, ChangeType.New);
            assert.equal(collectionNotif.type, ChangeType.New);
        });

        it('new', function() {
            assert.equal(notif.new, car);
            assert.equal(genericNotif.new, car);
            assert.equal(collectionNotif.new, car);
        });

        it('_id', function() {
            assert.equal(notif.newId, car._id);
            assert.equal(genericNotif.newId, car._id);
            assert.equal(collectionNotif.newId, car._id);
            assert.equal(notif._id, car._id);
            assert.equal(genericNotif._id, car._id);
            assert.equal(collectionNotif._id, car._id);
        });
    });

});
},{"../index":1,"../src/changes":44,"../src/collection":45,"../src/notificationCentre":52,"../src/util":60,"chai":9}],76:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('object!!', function() {

    var SiestaModel = require('../src/object').SiestaModel;
    var Mapping = require('../src/mapping').Mapping;
    var cache = require('../src/cache');
    var Collection = require('../src/collection').Collection;

    var mapping, collection;

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('myCollection');
        mapping = collection.mapping({
            name: 'Car',
            id: 'id',
            attributes: ['colour', 'name'],
            collection: 'myCollection'
        })
        collection.install(done);
    });

    describe('fields', function() {

        it('idField', function() {
            var r = new SiestaModel(mapping);
            assert.equal(r.idField, 'id');
        });

        it('type field', function() {
            var r = new SiestaModel(mapping);
            assert.equal(r.type, 'Car');
        });

        it('collection field', function() {
            var r = new SiestaModel(mapping);
            assert.equal(r.collection, 'myCollection');
        });

        it('type field', function() {
            var r = new SiestaModel(mapping);
            assert.notOk(r.isSaved);
        });

    });

    describe('removal', function() {

        var car;

        function remove() {
            car = new SiestaModel(mapping);
            car.colour = 'red';
            car.name = 'Aston Martin';
            car.id = '2';
            car._id = 'xyz';
            cache.insert(car);
            assert.notOk(car.removed);
            assert.ok(cache.contains(car));
            car.remove();
            assert.notOk(cache.contains(car));
            assert.ok(car.removed);
        }

        it('deletion', function() {
            remove();
        });

        it('restore', function() {
            remove();
            car.restore();
            assert.notOk(car.removed);
            assert.ok(cache.contains(car));
        });

    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/mapping":49,"../src/object":53,"chai":9}],77:[function(require,module,exports){
var s = require('../index')
    , assert = require('chai').assert;

/**
 * Assertions against the observe-js library from polymer, modified to fit browserify.
 */

describe('observer', function () {

    var ArrayObserver = require('../vendor/observe-js/src/observe').ArrayObserver;

    it('indexes', function (done) {
        var arr = [1, 2, 3];
        var observer = new ArrayObserver(arr);
        observer.open(function (splices) {
            splices.forEach(function (splice) {
                try {
                    assert.include(splice.removed, 1);
                    assert.include(splice.removed, 2);
                    assert.equal(splice.addedCount, 2);
                    assert.equal(splice.index, 0);
                    done();
                }
                catch(err) {
                    done(err);
                }
            });
        });
        arr[0] = 4;
        arr[1] = 5;
    });

    it('push',function (done) {
        var arr = [1, 2, 3];
        var observer = new ArrayObserver(arr);
        observer.open(function (splices) {
            splices.forEach(function (splice) {
                try {
                    assert.equal(splice.removed.length, 0);
                    assert.equal(splice.index, 3);
                    assert.equal(splice.addedCount, 1);
                    done();
                }
                catch (err) {
                    done(err);
                }

            });
        });
        arr.push(6);
    });

    it('sort',function (done) {
        var arr = [2, 1, 3];
        var observer = new ArrayObserver(arr);
        observer.open(function (splices) {
            done();
        });
        arr.sort();
    });

});
},{"../index":1,"../vendor/observe-js/src/observe":106,"chai":9}],78:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('new object proxy', function() {

    var RelationshipProxy = require('../src/proxy').RelationshipProxy;
    var OneToOneProxy = require('../src/oneToOneProxy').OneToOneProxy;
    var OneToManyProxy = require('../src/oneToManyProxy').OneToManyProxy;
    var ManyToManyProxy = require('../src/manyToManyProxy').ManyToManyProxy;
    var SiestaModel = require('../src/object').SiestaModel;
    var Fault = require('../src/proxy').Fault;
    var InternalSiestaError = require('../src/error').InternalSiestaError;
    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');
    var ChangeType = require('../src/changes').ChangeType;

    var carMapping, personMapping;

    var collection;

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']
        });
        personMapping = collection.mapping('Person', {
            id: 'id',
            attributes: ['name', 'age']
        });
        collection.install(done);
    });

    describe('generic', function() {
        describe('installation', function() {
            var car, person, relationship, proxy;

            beforeEach(function() {
                proxy = new RelationshipProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true
                });
                car = new SiestaModel(carMapping);
                person = new SiestaModel(personMapping);
            });

            it('throws an error if try to install twice', function() {
                proxy.install(car);
                assert.throws(function() {
                    proxy.install(car);
                }, InternalSiestaError);
            });

            describe('forward installation', function() {
                beforeEach(function() {
                    proxy = new RelationshipProxy({
                        reverseMapping: personMapping,
                        forwardMapping: carMapping,
                        reverseName: 'cars',
                        forwardName: 'owner',
                        isForward: true
                    });
                    proxy.install(car);
                });

                it('installs setter', function() {
                    assert.ok(car['setOwner']);
                });
                it('installs getter', function() {
                    assert.ok(car['getOwner']);
                });

                describe('faults', function() {
                    it('is forward', function() {
                        assert.ok(proxy.isForward);
                    });

                    it('is not reverse', function() {
                        assert.notOk(proxy.isReverse);
                    });

                    describe('no relationship', function() {
                        it('is a fault object', function() {
                            assert.instanceOf(car.owner, Fault);
                        });

                        it('is faulted, as no relationship set', function() {
                            assert.ok(car.owner.isFault);
                        });
                    });

                    describe('relationship, faulted', function() {
                        beforeEach(function() {
                            proxy._id = 'xyz';
                        });

                        it('is a fault object', function() {
                            assert.instanceOf(car.owner, Fault);
                        });

                        it('is faulted, as _id exists, but no related object', function() {
                            assert.ok(car.owner.isFault);
                        });
                    });

                    describe('relationship, faulted', function() {
                        beforeEach(function() {
                            proxy._id = 'xyz';
                            proxy.related = new SiestaModel(personMapping);
                            proxy.related._id = 'xyz';
                        });

                        it('is a fault object', function() {
                            assert.equal(car.owner, proxy.related);
                        });

                        it('is not faulted, as relationship set and related assigned', function() {
                            assert.notOk(car.owner.isFault);
                        });
                    })
                });

            });

            describe('reverse installation', function() {
                beforeEach(function() {
                    proxy = new RelationshipProxy({
                        reverseMapping: personMapping,
                        forwardMapping: carMapping,
                        reverseName: 'cars',
                        forwardName: 'owner',
                        isForward: false
                    });
                    proxy.install(person);

                });

                describe('faults', function() {
                    it('is reerse', function() {
                        assert.ok(proxy.isReverse);
                    });

                    it('is not forward', function() {
                        assert.notOk(proxy.isForward);
                    });

                    describe('no relationship', function() {
                        it('is a fault object', function() {
                            assert.instanceOf(person.cars, Fault);
                        });

                        it('is faulted, as no relationship set', function() {
                            assert.ok(person.cars.isFault);
                        });
                    });

                    describe('relationship, faulted', function() {
                        beforeEach(function() {
                            proxy._id = ['xyz'];
                        });

                        it('is a fault object', function() {
                            assert.instanceOf(person.cars, Fault);
                        });

                        it('is faulted, as relationship set', function() {
                            assert.ok(person.cars.isFault);
                        });
                    });

                    describe('relationship, faulted', function() {
                        beforeEach(function() {
                            proxy._id = 'xyz';
                            proxy.related = [new SiestaModel(carMapping)];
                            proxy.related[0]._id = 'xyz';
                        });

                        it('is a fault object', function() {
                            assert.equal(person.cars[0], proxy.related[0]);
                        });

                        it('is not faulted, as relationship set and related assigned', function() {
                            assert.notOk(person.cars.isFault);
                        });
                    })
                });
            });
        });

        describe('subclass', function() {
            var car, person, proxy;

            beforeEach(function() {
                proxy = new RelationshipProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true

                });
                car = new SiestaModel(carMapping);
                person = new SiestaModel(personMapping);
                proxy.install(car);
            });

            it('set should fail if not subclasses', function() {
                assert.throws(function() {
                    car.owner = person;
                }, InternalSiestaError);
                assert.throws(function() {
                    car.owner.set(person);
                }, InternalSiestaError);
            });

            it('get should fail if not subclasses', function() {
                assert.throws(function() {
                    car.owner.get(function() {

                    })
                }, InternalSiestaError);
            })
        })

    });

    describe('one-to-one', function() {
        var carProxy, personProxy;
        var car, person;

        describe('get', function() {
            beforeEach(function() {
                carProxy = new OneToOneProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true
                });
                personProxy = new OneToOneProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: false
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                cache.insert(person);
                cache.insert(car);
            });

            it('forward', function(done) {
                carProxy._id = person._id;
                assert.ok(carProxy.isFault);
                carProxy.get(function(err, obj) {
                    if (err) done(err);
                    assert.equal(person, obj);
                    done();
                });
            });

            it('reverse', function(done) {
                personProxy._id = car._id;
                assert.ok(personProxy.isFault);
                personProxy.get(function(err, obj) {
                    if (err) done(err);
                    assert.equal(car, obj);
                    assert.equal(personProxy.related, car);
                    done();
                });
            });
        });

        describe('set', function() {
            var carProxy, personProxy;
            var car, person;
            beforeEach(function() {
                carProxy = new OneToOneProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true
                });
                personProxy = new OneToOneProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: false
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                carProxy.isFault = false;
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                personProxy.isFault = false;
            });

            describe('none pre-existing', function() {
                describe('forward', function() {
                    it('should set forward', function() {
                        car.owner = person;
                        assert.equal(car.owner, person);
                        assert.equal(carProxy._id, person._id);
                        assert.equal(carProxy.related, person);
                    });

                    it('should set reverse', function() {
                        car.owner = person;
                        assert.equal(person.cars, car);
                        assert.equal(personProxy._id, car._id);
                        assert.equal(personProxy.related, car);
                    });
                });

                describe('backwards', function() {
                    it('should set forward', function() {
                        person.cars = car;
                        assert.equal(person.cars, car);
                        assert.equal(personProxy._id, car._id);
                        assert.equal(personProxy.related, car);

                    });

                    it('should set reverse', function() {
                        person.cars = car;
                        assert.equal(car.owner, person);
                        assert.equal(carProxy._id, person._id);
                        assert.equal(carProxy.related, person);
                    });
                });


            });

            describe('pre-existing', function() {

                var anotherPerson, anotherPersonProxy;

                beforeEach(function() {
                    anotherPerson = new SiestaModel(personMapping);
                    anotherPerson._id = 'anotherPerson';
                    anotherPersonProxy = new OneToOneProxy({
                        reverseMapping: personMapping,
                        forwardMapping: carMapping,
                        reverseName: 'cars',
                        forwardName: 'owner',
                        isForward: false
                    });
                    anotherPersonProxy.install(anotherPerson);
                    anotherPersonProxy.isFault = false;
                    cache.insert(anotherPerson);
                    cache.insert(person);
                    cache.insert(car);
                });


                describe('no fault', function() {
                    beforeEach(function() {
                        car.owner = anotherPerson;
                    });
                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owner = person;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owner = person;
                            assert.equal(person.cars, car);
                            assert.equal(personProxy._id, car._id);
                            assert.equal(personProxy.related, car);
                        });

                        it('should clear the old', function() {
                            car.owner = person;
                            assert.notOk(anotherPersonProxy.isFault);
                            assert.notOk(anotherPersonProxy._id);
                            assert.notOk(anotherPersonProxy.related);
                        });
                    });
                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = car;
                            assert.equal(person.cars, car);
                            assert.equal(personProxy._id, car._id);
                            assert.equal(personProxy.related, car);

                        });

                        it('should set reverse', function() {
                            person.cars = car;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should clear the old', function() {
                            person.cars = car;
                            assert.notOk(anotherPersonProxy._id);
                            assert.notOk(anotherPersonProxy.related);
                            assert.notOk(anotherPersonProxy.isFault);
                        });

                    });
                });

                describe('fault', function() {
                    beforeEach(function() {
                        car.owner = anotherPerson;
                        carProxy.related = undefined;
                        anotherPersonProxy.related = undefined;
                    });
                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owner = person;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owner = person;
                            assert.equal(person.cars, car);
                            assert.equal(personProxy._id, car._id);
                            assert.equal(personProxy.related, car);
                        });

                    });
                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = car;
                            assert.equal(person.cars, car);
                            assert.equal(personProxy._id, car._id);
                            assert.equal(personProxy.related, car);

                        });

                        it('should set reverse', function() {
                            person.cars = car;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                    });
                });

            });
        })
    });

    describe('foreign key', function() {
        var carProxy, personProxy;
        var car, person;

        describe('get', function() {
            beforeEach(function() {
                carProxy = new OneToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true
                });
                personProxy = new OneToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: false
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                cache.insert(person);
                cache.insert(car);
            });

            describe('get', function() {
                describe('no fault', function() {

                    beforeEach(function() {
                        carProxy.isFault = false;
                        personProxy.isFault = false;
                    });

                    it('forward', function(done) {
                        carProxy._id = person._id;
                        carProxy.related = person;
                        carProxy.get(function(err, obj) {
                            if (err) done(err);
                            assert.equal(person, obj);
                            done();
                        });
                    });

                    it('reverse', function(done) {
                        personProxy._id = [car._id];
                        personProxy.related = [car];
                        personProxy.get(function(err, cars) {
                            if (err) done(err);
                            assert.include(cars, car);
                            assert.include(personProxy.related, car);
                            done();
                        });
                    });
                });

                describe('fault', function() {
                    it('forward', function(done) {
                        carProxy._id = person._id;
                        carProxy.get(function(err, obj) {
                            if (err) done(err);
                            assert.equal(person, obj);
                            done();
                        });
                    });

                    it('reverse', function(done) {
                        personProxy._id = [car._id];
                        personProxy.get(function(err, cars) {
                            if (err) done(err);
                            assert.equal(cars.length, 1);
                            assert.include(cars, car);
                            assert.include(personProxy.related, car);
                            done();
                        });
                    });
                });

            });


        });

        describe('set', function() {
            var carProxy, personProxy;
            var car, person;
            beforeEach(function() {
                carProxy = new OneToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: true
                });
                personProxy = new OneToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owner',
                    isForward: false
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                carProxy.isFault = false;
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                personProxy.isFault = false;
            });
            describe('none pre-existing', function() {

                describe('forward', function() {
                    it('should set forward', function() {
                        car.owner = person;
                        assert.equal(car.owner, person);
                        assert.equal(carProxy._id, person._id);
                        assert.equal(carProxy.related, person);
                    });

                    it('should set reverse', function() {
                        car.owner = person;
                        assert.include(person.cars, car);
                        assert.include(personProxy._id, car._id);
                        assert.include(personProxy.related, car);
                    });

                    it('multiple', function() {
                        car.owner = person;
                        var anotherCar = new SiestaModel(carMapping);
                        anotherCar._id = 'anotherCar';
                        var anotherCarProxy = new OneToManyProxy({
                            reverseMapping: personMapping,
                            forwardMapping: carMapping,
                            reverseName: 'cars',
                            forwardName: 'owner',
                            isForward: true
                        });
                        anotherCarProxy.install(anotherCar);
                        anotherCarProxy.isFault = false;
                        anotherCar.owner = person;
                        assert.include(person.cars, car);
                        assert.include(person.cars, anotherCar);
                        assert.equal(car.owner, person);
                        assert.equal(anotherCar.owner, person);
                    })
                });

                describe('backwards', function() {
                    it('should set forward', function() {
                        person.cars = [car];
                        assert.include(person.cars, car);
                        assert.include(personProxy._id, car._id);
                        assert.include(personProxy.related, car);

                    });

                    it('should set reverse', function() {
                        person.cars = [car];
                        assert.equal(car.owner, person);
                        assert.equal(carProxy._id, person._id);
                        assert.equal(carProxy.related, person);
                    });
                });
            });
            describe('pre-existing', function() {

                var anotherPerson, anotherPersonProxy;

                beforeEach(function() {
                    anotherPerson = new SiestaModel(personMapping);
                    anotherPerson._id = 'anotherPerson';
                    anotherPersonProxy = new OneToManyProxy({
                        reverseMapping: personMapping,
                        forwardMapping: carMapping,
                        reverseName: 'cars',
                        forwardName: 'owner',
                        isForward: false
                    });
                    anotherPersonProxy.install(anotherPerson);
                    anotherPersonProxy.isFault = false;
                    cache.insert(anotherPerson);
                    cache.insert(person);
                    cache.insert(car);
                });

                describe('no fault', function() {
                    beforeEach(function() {
                        car.owner = anotherPerson;
                    });
                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owner = person;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owner = person;
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should clear the old', function() {
                            car.owner = person;
                            assert.equal(anotherPersonProxy._id.length, 0);
                            assert.equal(anotherPersonProxy.related.length, 0);
                        });

                    });
                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = [car];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should set reverse', function() {
                            person.cars = [car];
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should clear the old', function() {
                            person.cars = [car];
                            assert.equal(anotherPersonProxy._id.length, 0);
                            assert.equal(anotherPersonProxy.related.length, 0);
                        });

                    });
                });

                describe('fault', function() {
                    beforeEach(function() {
                        car.owner = anotherPerson;
                        carProxy.related = undefined;
                        anotherPersonProxy.related = undefined;
                    });
                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owner = person;
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owner = person;
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                    });
                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = [car];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should set reverse', function() {
                            person.cars = [car];
                            assert.equal(car.owner, person);
                            assert.equal(carProxy._id, person._id);
                            assert.equal(carProxy.related, person);
                        });

                    });
                });


            });
        });



    });

    describe('many to many', function() {
        var carProxy, personProxy;
        var car, person;

        describe('get', function() {
            beforeEach(function() {
                carProxy = new ManyToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owners',
                    isForward: true
                });
                personProxy = new ManyToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owners',
                    isReverse: true
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                cache.insert(person);
                cache.insert(car);
            });

            describe('no fault', function() {

                beforeEach(function() {
                    carProxy.isFault = false;
                    personProxy.isFault = false;
                });

                it('forward', function(done) {
                    carProxy._id = [person._id];
                    carProxy.related = [person];
                    carProxy.get(function(err, people) {
                        if (err) done(err);
                        assert.include(people, person);
                        assert.include(carProxy.related, person);
                        done();
                    });
                });

                it('reverse', function(done) {
                    personProxy._id = [car._id];
                    personProxy.related = [car];
                    personProxy.get(function(err, cars) {
                        if (err) done(err);
                        assert.include(cars, car);
                        assert.include(personProxy.related, car);
                        done();
                    });
                });
            });

            describe('fault', function() {
                it('forward', function(done) {
                    carProxy._id = [person._id];
                    carProxy.get(function(err, people) {
                        if (err) done(err);
                        assert.include(people, person);
                        assert.include(carProxy.related, person);
                        done();
                    });
                });

                it('reverse', function(done) {
                    personProxy._id = [car._id];
                    personProxy.get(function(err, cars) {
                        if (err) done(err);
                        assert.equal(cars.length, 1);
                        assert.include(cars, car);
                        assert.include(personProxy.related, car);
                        done();
                    });
                });
            });

        });

        describe('set', function() {
            var carProxy, personProxy;
            var car, person;
            beforeEach(function() {
                carProxy = new ManyToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owners', 
                    isForward: true
                });
                personProxy = new ManyToManyProxy({
                    reverseMapping: personMapping,
                    forwardMapping: carMapping,
                    reverseName: 'cars',
                    forwardName: 'owners',
                    isForward: false
                });
                car = new SiestaModel(carMapping);
                car._id = 'car';
                carProxy.install(car);
                carProxy.isFault = false;
                person = new SiestaModel(personMapping);
                person._id = 'person';
                personProxy.install(person);
                personProxy.isFault = false;
            });

            describe('none pre-existing', function() {

                describe('forward', function() {
                    it('should set forward', function() {
                        car.owners = [person];
                        assert.include(car.owners, person);
                        assert.include(carProxy._id, person._id);
                        assert.include(carProxy.related, person);
                    });

                    it('should set reverse', function() {
                        car.owners = [person];
                        assert.include(person.cars, car);
                        assert.include(personProxy._id, car._id);
                        assert.include(personProxy.related, car);
                    });
                });

                describe('backwards', function() {
                    it('should set forward', function() {
                        person.cars = [car];
                        assert.include(person.cars, car);
                        assert.include(personProxy._id, car._id);
                        assert.include(personProxy.related, car);

                    });

                    it('should set reverse', function() {
                        person.cars = [car];
                        assert.include(car.owners, person);
                        assert.include(carProxy._id, person._id);
                        assert.include(carProxy.related, person);
                    });
                });
            });


            describe('pre-existing', function() {

                var anotherPerson, anotherPersonProxy;

                beforeEach(function() {
                    anotherPerson = new SiestaModel(personMapping);
                    anotherPerson._id = 'anotherPerson';
                    anotherPersonProxy = new ManyToManyProxy({
                        reverseMapping: personMapping,
                        forwardMapping: carMapping,
                        reverseName: 'cars',
                        forwardName: 'owners',
                        isForward: false
                    });
                    anotherPersonProxy.install(anotherPerson);
                    anotherPersonProxy.isFault = false;
                    cache.insert(anotherPerson);
                    cache.insert(person);
                    cache.insert(car);
                });

                describe('no fault', function() {
                    beforeEach(function() {
                        car.owners = [anotherPerson];
                    });

                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owners = [person];
                            assert.include(car.owners, person);
                            assert.include(carProxy._id, person._id);
                            assert.include(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owners = [person];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should clear the old', function() {
                            car.owners = [person];
                            assert.equal(anotherPersonProxy._id.length, 0);
                            assert.equal(anotherPersonProxy.related.length, 0);
                        });

                    });

                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = [car];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should set reverse', function() {
                            person.cars = [car];
                            assert.include(car.owners, person);
                            assert.include(carProxy._id, person._id);
                            assert.include(carProxy.related, person);
                        });
                    });
                });

                describe('fault', function() {
                    beforeEach(function() {
                        car.owners = [anotherPerson];
                        carProxy.related = undefined;
                        anotherPersonProxy.related = undefined;
                    });
                    describe('forward', function() {
                        it('should set forward', function() {
                            car.owners = [person];
                            assert.include(car.owners, person);
                            assert.include(carProxy._id, person._id);
                            assert.include(carProxy.related, person);
                        });

                        it('should set reverse', function() {
                            car.owners = [person];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                    });

                    describe('backwards', function() {
                        it('should set forward', function() {
                            person.cars = [car];
                            assert.include(person.cars, car);
                            assert.include(personProxy._id, car._id);
                            assert.include(personProxy.related, car);
                        });

                        it('should set reverse', function() {
                            person.cars = [car];
                            assert.include(carProxy._id, person._id);
                        });


                    });

                });



            });
        })


    });
});
},{"../index":1,"../src/cache":43,"../src/changes":44,"../src/collection":45,"../src/error":47,"../src/manyToManyProxy":48,"../src/object":53,"../src/oneToManyProxy":54,"../src/oneToOneProxy":55,"../src/proxy":56,"chai":9}],79:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('query', function() {
    var Query = require('../src/query').Query;
    var Collection = require('../src/collection').Collection;
    var SiestaModel = require('../src/object').SiestaModel;

    beforeEach(function() {
        s.reset(true);
    });

    describe('basic', function() {
        var collection, mapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            mapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });
        it('object exists', function(done) {
            mapping.map({
                name: 'Michael',
                age: 15
            }, function(err, obj) {
                if (err) done(err);
                else {
                    assert.ok(obj);
                    var q = new Query(mapping, {
                        age: 15
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 1);
                        assert.equal(objs[0], obj);
                        done();
                    });
                }
            });
        });

        it('object does not exist', function(done) {
            mapping.map({
                name: 'Michael',
                age: 21
            }, function(err, obj) {
                if (err) done(err);
                else {
                    assert.ok(obj);
                    var q = new Query(mapping, {
                        age: 15
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 0);
                        done();
                    });
                }
            });
        });

        it('multiple matches', function(done) {
            mapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(mapping, {
                        age: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });
    });

    describe('e', function() {
        var collection, personMapping, carMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        type: 'OneToMany',
                        mapping: 'Person',
                        reverse: 'cars'
                    }
                }
            });
            collection.install(done);
        });

        describe('attributes', function() {
            it('matches', function(done) {
                personMapping.map([{
                    name: 'Michael',
                    age: 21
                }, {
                    name: 'Bob',
                    age: 21
                }], function(err, mapped) {
                    if (err) done(err);
                    else {
                        assert.ok(mapped);
                        var q = new Query(personMapping, {
                            age__e: 21
                        });
                        q.execute(function(err, objs) {
                            if (err) done(err);
                            assert.equal(objs.length, 2);
                            assert.include(objs, mapped[0]);
                            assert.include(objs, mapped[1]);
                            done();
                        });
                    }
                });
            });

            it('no matches', function(done) {
                personMapping.map([{
                    name: 'Michael',
                    age: 21
                }, {
                    name: 'Bob',
                    age: 21
                }], function(err, mapped) {
                    if (err) done(err);
                    else {
                        assert.ok(mapped);
                        var q = new Query(personMapping, {
                            age__e: 23
                        });
                        q.execute(function(err, objs) {
                            if (err) done(err);
                            assert.notOk(objs.length);
                            done();
                        });
                    }
                });
            });
        });

        describe('relationships', function() {
            it('model', function(done) {
                personMapping.map({
                    name: 'Michael',
                    age: 21
                }, function(err, person) {
                    if (err) done(err);
                    carMapping.map({
                        colour: 'red',
                        name: 'Aston Martin',
                        owner: person
                    }, function(err, car) {
                        if (err) done(err);
                        else {
                            var q = new Query(carMapping, {
                                owner__e: person
                            });
                            q.execute(function(err, objs) {
                                if (err) done(err);
                                assert.ok(objs.length);
                                done();
                            });
                        }
                    });
                });
            });
        });
    });

    describe('lt', function() {
        var collection, personMapping, carMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });

        it('matches all', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lt: 22
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });

        it('matches some', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 22
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lt: 22
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 1);
                        assert.include(objs, mapped[0]);
                        done();
                    });
                }
            });
        });

        it('no matches', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lt: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.notOk(objs.length);
                        done();
                    });
                }
            });
        });
    });

    describe('lte', function() {
        var collection, personMapping, carMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });

        it('matches all', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lte: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });

        it('matches some', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 22
            }, {
                name: 'John',
                age: 23
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lte: 22
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });

        it('no matches', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__lte: 20
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.notOk(objs.length);
                        done();
                    });
                }
            });
        });
    });

    describe('gt', function() {
        var collection, personMapping, carMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });

        it('matches all', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gt: 20
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });

        it('matches some', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 22
            }, {
                name: 'John',
                age: 23
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gt: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[1]);
                        assert.include(objs, mapped[2]);
                        done();
                    });
                }
            });
        });

        it('no matches', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gt: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.notOk(objs.length);
                        done();
                    });
                }
            });
        });
    });

    describe('gte', function() {
        var collection, personMapping, carMapping;

        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            collection.install(done);
        });

        it('matches all', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gte: 21
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[0]);
                        assert.include(objs, mapped[1]);
                        done();
                    });
                }
            });
        });

        it('matches some', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 22
            }, {
                name: 'John',
                age: 23
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gte: 22
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.equal(objs.length, 2);
                        assert.include(objs, mapped[1]);
                        assert.include(objs, mapped[2]);
                        done();
                    });
                }
            });
        });

        it('no matches', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__gte: 22
                    });
                    q.execute(function(err, objs) {
                        if (err) done(err);
                        assert.notOk(objs.length);
                        done();
                    });
                }
            });
        });
    });



    describe('errors', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        type: 'OneToMany',
                        mapping: 'Person',
                        reverse: 'cars'
                    }
                }
            });
            collection.install(done);
        });

        it('invalid op', function(done) {
            personMapping.map([{
                name: 'Michael',
                age: 21
            }, {
                name: 'Bob',
                age: 21
            }], function(err, mapped) {
                if (err) done(err);
                else {
                    assert.ok(mapped);
                    var q = new Query(personMapping, {
                        age__dfsoigsd: 21
                    });
                    q.execute(function(err, objs) {
                        assert.ok(err);
                        assert.notOk(objs);
                        done();
                    });
                }
            });
        })
    });





});
},{"../index":1,"../src/collection":45,"../src/object":53,"../src/query":57,"chai":9}],80:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('recursive relationships', function() {

    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');
    var collection;
    var Repo;

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('MyCollection');
        collection.baseURL = 'https://api.github.com';
        Repo = collection.mapping('Repo', {
            id: 'id',
            attributes: ['name'],
            relationships: {
                forkedFrom: {
                    mapping: 'Repo',
                    type: 'OneToMany',
                    reverse: 'forks'
                }
            }
        });
        collection.install(done);
    });

    it('map', function (done) {
    	var masterRepoData = {id: '5', name: 'Master Repo'};
    	Repo.map(masterRepoData, function (err, repo) {
    		if (err) {
    			done(err);
    		}
    		else {
    			var childRepoData = {id: '6', name: 'Child Repo', forkedFrom: {_id: repo._id}};
    			Repo.map(childRepoData, function (err, childRepo) {
    				if (err) {
    					done(err);
    				}
    				else {
    					assert.include(repo.forks, childRepo);
    					assert.equal(childRepo.forkedFrom, repo);
    					done();
    				}
    			});
    		}
    	});
    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"chai":9}],81:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('mapping relationships', function() {


    var Collection = require('../src/collection').Collection;
    var InternalSiestaError = require('../src/error').InternalSiestaError;
    var RelationshipType = require('../src/relationship').RelationshipType;


    beforeEach(function() {
        s.reset(true);
    });

    var collection, carMapping, personMapping;

    function configureAPI(type, done) {
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: type,
                    reverse: 'cars'
                }
            }
        });
        personMapping = collection.mapping('Person', {
            id: 'id',
            attributes: ['name', 'age']
        });
        collection.install(done);
    }

    describe('valid', function() {


        describe('Foreign Key', function() {

            beforeEach(function(done) {
                configureAPI(RelationshipType.OneToMany, function(err) {
                    if (err) done(err);
                    done();
                });
            });

            it('configures reverse mapping', function() {
                assert.equal(carMapping.relationships.owner.reverseMapping, personMapping);
            });

            it('configures reverse name', function() {
                assert.equal(carMapping.relationships.owner.reverseName, 'cars');

                it('configures forward mapping', function() {
                    assert.equal(carMapping.relationships.owner.forwardMapping, carMapping);
                });

            });
            it('configures forward name', function() {
                assert.equal(carMapping.relationships.owner.forwardName, 'owner');
            });

            it('installs on reverse', function() {
                var keys = Object.keys(personMapping.relationships.cars);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key != 'isForward' && key != 'isReverse') {
                        assert.equal(personMapping.relationships.cars[key], carMapping.relationships.owner[key]);
                    }
                }
            });


        });

        describe('OneToOne', function() {

            beforeEach(function(done) {
                configureAPI(RelationshipType.OneToOne, function(err) {
                    if (err) done(err);
                    done();
                });


            });
            it('configures reverse mapping', function() {
                assert.equal(carMapping.relationships.owner.reverseMapping, personMapping);
            });

            it('configures reverse name', function() {
                assert.equal(carMapping.relationships.owner.reverseName, 'cars');



            });

            it('configures forward mapping', function() {
                assert.equal(carMapping.relationships.owner.forwardMapping, carMapping);
            });
            it('configures forward name', function() {
                assert.equal(carMapping.relationships.owner.forwardName, 'owner');
            });

            it('installs on reverse', function() {
                var keys = Object.keys(personMapping.relationships.cars);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key != 'isForward' && key != 'isReverse') {
                        assert.equal(personMapping.relationships.cars[key], carMapping.relationships.owner[key]);
                    }
                }
            });





        });

    });



    describe('invalid', function() {
        it('No such mapping', function(done) {
            var collection = new Collection('myCollection');
            collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'asd',
                        type: RelationshipType.OneToMany,
                        reverse: 'cars'
                    }
                }
            });
            collection.install(function(err) {
                assert.ok(err);
                done();
            });
        });

        it('No such relationship type', function(done) {
            var collection = new Collection('myCollection');
            collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'Person',

                        type: 'invalidtype',
                        reverse: 'cars'
                    }
                }
            });
            collection.mapping('Person', {
                id: 'id',
                attributes: ['name', 'age']
            });

            collection.install(function(err) {
                assert.ok(err);
                done();
            });

        });
    });


});
},{"../index":1,"../src/collection":45,"../src/error":47,"../src/relationship":58,"chai":9}],82:[function(require,module,exports){
var s = require('../index')
    , assert = require('chai').assert;


describe('rest', function () {
    var Collection = require('../src/collection').Collection;
    var CollectionRegistry = require('../src/collectionRegistry').CollectionRegistry;
    var collection;


    beforeEach(function () {
        s.reset(true);
    });

    describe('Create Basic Rest API', function () {

        beforeEach(function (done) {
            collection = new Collection('myCollection');
            collection.install(done);
        });

        it('global access', function () {
            assert.equal(CollectionRegistry.myCollection, collection);
        });

    });

    describe('Object mapping registration', function () {

        var collection;
        describe('basic', function () {

            beforeEach(function (done) {
                collection = new Collection('myCollection');
                collection.mapping('Person', {
                    id: 'id',
                    attributes: ['name', 'age']
                });
                collection.install(done);
            });

            describe('raw mapping to Mapping object', function () {
                function assertMapping(collection) {
                    var rawMapping = collection._rawMappings.Person;
                    assert.ok(rawMapping);
                    var mappingObj = collection.Person;
                    assert.equal(mappingObj.type, 'Person');
                    assert.equal(mappingObj.id, 'id');
                    assert.equal(mappingObj.collection, 'myCollection');
                    assert.include(mappingObj._fields, 'name');
                    assert.include(mappingObj._fields, 'age');
                    assert.ok(mappingObj);
                }

                it('mappings', function () {
                    assertMapping(collection);
                });
            });

        });


    })

});
},{"../index":1,"../src/collection":45,"../src/collectionRegistry":46,"chai":9}],83:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('serialisers', function() {

    var Collection = require('../src/collection').Collection;
    var RelationshipType = require('../src/relationship').RelationshipType;

    var collection, carMapping, personMapping, vitalSignsMapping;


    beforeEach(function() {
        s.reset(true);
    });

    describe('id serialiser', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');
            personMapping = collection.mapping('Person', {
                attributes: ['name', 'age']
            });
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'Person',
                        type: RelationshipType.OneToMany,
                        reverse: 'cars'
                    }
                }
            });
            collection.install(done);
        });
        it('should return the id if has one', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin',
                id: 5
            }, function(err, car) {
                if (err) done(err);
                assert.equal(siesta.ext.http.Serialiser.idSerialiser(car), car.id);
                done();
            });
        });
        it('should return null if doesnt have an id', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin'
            }, function(err, car) {
                if (err) done(err);
                assert.equal(siesta.ext.http.Serialiser.idSerialiser(car), null);
                done();
            });
        });
        it('should return null if no id field', function(done) {
            personMapping.map({
                name: 'Michael Ford',
                id: 5
            }, function(err, car) {
                if (err) done(err);
                assert.equal(siesta.ext.http.Serialiser.idSerialiser(car), null);
                done();
            });
        });
    });

    describe('depth serialiser', function() {
        beforeEach(function(done) {
            collection = new Collection('myCollection');

            personMapping = collection.mapping('Person', {
                attributes: ['name', 'age'],
                id: 'id',
                relationships: {
                    vitalSigns: {
                        mapping: 'VitalSigns',
                        type: RelationshipType.OneToOne,
                        reverse: 'person'
                    }
                }
            });
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                relationships: {
                    owner: {
                        mapping: 'Person',
                        type: RelationshipType.OneToMany,
                        reverse: 'cars'
                    }
                }
            });
            vitalSignsMapping = collection.mapping('VitalSigns', {
                id: 'id',
                attributes: ['heartRate', 'bloodPressure']
            });
            collection.install(done);

        });

        it('depth 0', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin',
                id: 5,
                owner: {
                    name: 'Michael Ford',
                    id: 28
                }
            }, function(err, car) {
                if (err) done(err);
                siesta.ext.http.Serialiser.depthSerializer(0)(car, function(err, data) {
                    if (err) done(err);
                    assert.equal(data.colour, car.colour);
                    assert.equal(data.name, car.name);
                    assert.equal(data.id, car.id);
                    assert.equal(data.owner, 28);
                    done();
                });
            });
        });

        it('depth 1', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin',
                id: 5,
                owner: {
                    name: 'Michael Ford',
                    id: 28,
                    vitalSigns: {
                        id: 35,
                        heartRate: 65
                    }
                }
            }, function(err, car) {
                if (err) done(err);
                siesta.ext.http.Serialiser.depthSerializer(1)(car, function(err, data) {
                    if (err) done(err);
                    assert.equal(data.colour, car.colour);
                    assert.equal(data.name, car.name);
                    assert.equal(data.id, car.id);
                    assert.equal(data.owner.id, 28);
                    assert.equal(data.owner.vitalSigns, 35);
                    done();
                });
            });
        });

        it('depth 2', function(done) {
            carMapping.map({
                colour: 'red',
                name: 'Aston Martin',
                id: 5,
                owner: {
                    name: 'Michael Ford',
                    id: 28,
                    vitalSigns: {
                        id: 35,
                        heartRate: 65
                    }
                }
            }, function(err, car) {
                if (err) done(err);
                siesta.ext.http.Serialiser.depthSerializer(2)(car, function(err, data) {
                    if (err) done(err);
                    assert.equal(data.colour, car.colour);
                    assert.equal(data.name, car.name);
                    assert.equal(data.id, car.id);
                    assert.equal(data.owner.id, 28);
                    assert.equal(data.owner.vitalSigns.heartRate, 65);
                    done();
                });
            });
        });

    });

    describe('availibility on siesta', function() {
        it('id, anglophone', function () {
            assert.equal(s.serialisers.id, siesta.ext.http.Serialiser.idSerialiser);
        });

        it('root, anglophone', function () {
            assert.equal(s.serialisers.depth, siesta.ext.http.Serialiser.depthSerializer);
        });
        it('id, american', function () {
            assert.equal(s.serializers.id, siesta.ext.http.Serialiser.idSerialiser);
        });

        it('root, american', function () {
            assert.equal(s.serializers.depth, siesta.ext.http.Serialiser.depthSerializer);
        });
    });


});
},{"../index":1,"../src/collection":45,"../src/relationship":58,"chai":9}],84:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('singleton mapping', function() {

    var SiestaModel = require('../src/object').SiestaModel;
    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');
    var store = require('../src/store');

    var collection, carMapping;

    function CarObject() {
        SiestaModel.apply(this, arguments);
    }

    CarObject.prototype = Object.create(SiestaModel.prototype);

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('Car');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            singleton: true
        });
        collection.install(done);
    });

    it('should map onto the same singleton object, even if a different identifier', function(done) {
        carMapping.map({
            colour: 'red',
            id: 5
        }, function(err, car) {
            if (err) done(err);
            carMapping.map({
                colour: 'blue',
                id: 10
            }, function(err, car2) {
                if (err) done(err);
                assert.equal(car, car2);
                assert.equal(car.colour, 'blue');
                assert.equal(car.id, 10);
                done();
            });
        });
    });

    it('should map onto the same singleton object', function(done) {
        carMapping.map({
            colour: 'red'
        }, function(err, car) {
            if (err) done(err);
            carMapping.map({
                colour: 'blue'
            }, function(err, car2) {
                if (err) done(err);
                assert.equal(car, car2);
                assert.equal(car.colour, 'blue');
                done();
            });
        });
    });



    it('cache should return singleton', function(done) {
        carMapping.map({
            colour: 'red',
            id: 5
        }, function(err, car) {
            if (err) done(err);
            var obj = cache.get({
                mapping: carMapping
            });
            assert.equal(obj, car);
            done();
        });
    });

    it('get should simply return the car', function(done) {
        this.timeout(5000);
        carMapping.map({
            colour: 'red',
            id: 5
        }, function(err, car) {
            if (err) done(err);
            carMapping.get(function(err, _car) {
                if (err) done(err);
                assert.equal(car, _car);
                done();
            });
        });
    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/object":53,"../src/store":59,"chai":9}],85:[function(require,module,exports){
var siesta = require('../index');
var assert = require('chai').assert;

describe('statistics', function() {
    var Car, Person, coll;

    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');

    beforeEach(function(done) {
        siesta.reset(true);
        coll = new Collection('myCollection');
        Car = coll.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            relationships: {
                owner: {
                    mapping: 'Person',
                    type: 'OneToMany',
                    reverse: 'cars'
                }
            }
        });
        Person = coll.mapping('Person', {
            id: 'id',
            attributes: ['age', 'name']
        });
        coll.install(done);
    });

    before(function() {
        siesta.ext.storageEnabled = false;
    });
    after(function() {
        siesta.ext.storageEnabled = true;
    });
    describe('collection level', function() {
        describe('single mapping', function() {
            it('no objects', function(done) {
                coll.count(function(err, n) {
                    if (err) done(err);
                    assert.equal(n, 0);
                    done();
                });
            });

            it('one object', function(done) {
                Car.map({
                    colour: 'red',
                    name: 'Aston Martin'
                }, function(err, obj) {
                    if (err) done(err);
                    coll.count(function(err, n) {
                        if (err) done(err);
                        assert.equal(n, 1);
                        done();
                    });
                });
            });

            it('multiple objects', function(done) {
                Car.map([{
                    colour: 'red',
                    name: 'Aston Martin'
                }, {
                    colour: 'blue',
                    name: 'Bentley'
                }, {
                    colour: 'green',
                    name: 'Lambo'
                }], function(err) {
                    if (err) done(err);
                    coll.count(function(err, n) {
                        if (err) done(err);
                        assert.equal(n, 3);
                        done();
                    });
                });
            });
        });
        describe('multiple mappings', function() {
            it('multiple objects', function(done) {
                Car.map([{
                    colour: 'red',
                    name: 'Aston Martin'
                }, {
                    colour: 'blue',
                    name: 'Bentley'
                }, {
                    colour: 'green',
                    name: 'Lambo'
                }], function(err) {
                    if (err) done(err);
                    Person.map([{
                        age: 24,
                        name: 'Michael Ford'
                    }, {
                        age: 25,
                        name: 'John Doe'
                    }], function(err) {
                        if (err) done(err);
                        coll.count(function(err, n) {
                            if (err) done(err);
                            assert.equal(n, 5);
                            done();
                        });
                    });
                });
            });
        });
    });


});
},{"../index":1,"../src/cache":43,"../src/collection":45,"chai":9}],86:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('generation of changes during array operations', function () {

//     var collection;
//     var car, person;
//     var carMapping, personMapping;

//     var Collection = require('../src/collection').Collection;
    
//     var ChangeType = require('../src/changes').ChangeType;
//     var RelationshipType = require('../src/relationship').RelationshipType;
//     var util = require('../src/util');

//     beforeEach(function (done) {
//         s.reset(true);
//         done();
//     });

//     describe('against attributes', function () {

//         beforeEach(function (done) {
//             collection = new Collection('myCollection');

//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colours', 'name']
//             });

//             personMapping = collection.mapping('Person', {
//                 id: 'id',
//                 attributes: ['name', 'age']
//             });

//             collection.install(done);
//         });

//         it('push', function (done) {
//             car = carMapping._new();
//             car.colours = [];
//             s.ext.storage.changes.resetChanges();
//             car.colours.push('red');
//             util.next(function () {
//                 assert.equal(1, s.ext.storage.changes.allChanges.length);
//                 var change = s.ext.storage.changes.allChanges[0];
//                 assert.equal(change.type, ChangeType.Splice);
//                 assert.include(change.added, 'red');
//                 assert.equal(change.index, 0);
//                 assert.equal(change.field, 'colours');
//                 done();
//             });
//         });

//         it('splice', function (done) {
//             car = carMapping._new();
//             car.colours = ['red'];
//             s.ext.storage.changes.resetChanges();
//             car.colours.splice(0, 1);
//             util.next(function () {
//                 assert.equal(1, s.ext.storage.changes.allChanges.length);
//                 var change = s.ext.storage.changes.allChanges[0];
//                 assert.equal(change.type, ChangeType.Splice);
//                 assert.include(change.removed, 'red');
//                 assert.equal(change.index, 0);
//                 assert.equal(change.field, 'colours');
//                 done();
//             });
//         });

//         it('sort', function (done) {
//             car = carMapping._new();
//             car.colours = ['red', 'blue', 'green'];
//             s.ext.storage.changes.resetChanges();
//             car.colours.sort();
//             // Red is removed and inserted elsewhere.
//             util.next(function () {
//                 assert.equal(2, s.ext.storage.changes.allChanges.length);
//                 done();
//             });
//         });

//     });

//     describe('against relationships', function () {

//         describe('foreign key', function () {

//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');

//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name'],
//                     relationships: {
//                         owner: {
//                             mapping: 'Person',
//                             type: RelationshipType.OneToMany,
//                             reverse: 'cars'
//                         }
//                     }
//                 });

//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age']
//                 });

//                 collection.install(done);
//             });

//             it('push', function (done) {
//                 car = carMapping._new();
//                 var anotherCar = carMapping._new();
//                 person = personMapping._new();
//                 person.cars = [car];
//                 s.ext.storage.changes.resetChanges();
//                 person.cars.push(anotherCar);
//                 util.next(function () {
//                     assert.equal(car.owner, person);
//                     assert.equal(anotherCar.owner, person);
//                     var allChanges = s.ext.storage.changes.allChanges;
//                     assert.equal(allChanges.length, 2);
//                     var splicePredicate = function (x) {return x.type === ChangeType.Splice};
//                     var spliceChange = _.find(allChanges, splicePredicate);
//                     assert.equal(spliceChange.type, ChangeType.Splice);
//                     assert.include(spliceChange.added, anotherCar);
//                     assert.equal(spliceChange.index, 1);
//                     assert.equal(spliceChange.field, 'cars');
//                     done();
//                 });
//             });
//             it('splice', function (done) {
//                 car = carMapping._new();
//                 person = personMapping._new();
//                 person.cars = [car];
//                 s.ext.storage.changes.resetChanges();
//                 person.cars.splice(0, 1);
//                 util.next(function () {
//                     assert.notOk(car.ownerProxy._id);
//                     assert.notOk(car.ownerProxy.related);
//                     var allChanges = s.ext.storage.changes.allChanges;
//                     assert.equal(allChanges.length, 2);
//                     var splicePredicate = function (x) {return x.type === ChangeType.Splice};
//                     var spliceChange = _.find(allChanges, splicePredicate);
//                     assert.include(spliceChange.removed, car);
//                     assert.equal(spliceChange.type, ChangeType.Splice);
//                     done();
//                 });
//             });

//         });

//         describe('many to many', function () {
//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');

//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name'],
//                     relationships: {
//                         owners: {
//                             mapping: 'Person',
//                             type: RelationshipType.ManyToMany,
//                             reverse: 'cars'
//                         }
//                     }
//                 });

//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age']
//                 });

//                 collection.install(done);
//             });

//             describe('no faults', function () {
//                 it('push', function (done) {
//                     car = carMapping._new();
//                     var anotherCar = carMapping._new();
//                     person = personMapping._new();
//                     person.cars = [car];
//                     s.ext.storage.changes.resetChanges();
//                     person.cars.push(anotherCar);
//                     util.next(function () {
//                         assert.include(car.owners, person, 'original car should have owner');
//                         assert.include(anotherCar.owners, person, 'new car should have owner');
//                         var allChanges = s.ext.storage.changes.allChanges;
//                         assert.equal(allChanges.length, 2);
//                         var splicePredicate = function (x) {return x._id === person._id};
//                         var spliceChange = _.find(allChanges, splicePredicate);
//                         assert.equal(spliceChange.type, ChangeType.Splice);
//                         assert.include(spliceChange.added, anotherCar);
//                         assert.equal(spliceChange.index, 1);
//                         assert.equal(spliceChange.field, 'cars');
//                         done();
//                     });
//                 });

//                 it('splice', function (done) {
//                     car = carMapping._new();
//                     person = personMapping._new();
//                     person.cars = [car];
//                     s.ext.storage.changes.resetChanges();
//                     person.cars.splice(0, 1);
//                     util.next(function () {
//                         var allChanges = s.ext.storage.changes.allChanges;
//                         assert.equal(allChanges.length, 2);
//                         var personPred = function (x) {return x._id === person._id};
//                         var personChange = _.find(allChanges, personPred);
//                         var carPred = function (x) {return x._id === car._id};
//                         var carChange = _.find(allChanges, carPred);
//                         assert.include(personChange.removed, car);
//                         assert.notOk(car.ownersProxy._id.length);
//                         assert.notOk(car.ownersProxy.related.length);
//                         assert.equal(personChange.type, ChangeType.Splice);
//                         done();
//                     });
//                 });
//             });

//             describe('fault in the reverse', function () {
//                 it('push', function (done) {
//                     car = carMapping._new();
//                     var anotherCar = carMapping._new();
//                     person = personMapping._new();
//                     person.cars = [car];
//                     s.ext.storage.changes.resetChanges();
//                     car.ownersProxy.related = null;
//                     person.cars.push(anotherCar);
//                     util.next(function () {
//                         var allChanges = s.ext.storage.changes.allChanges;
//                         assert.equal(allChanges.length, 2);
//                         var splicePredicate = function (x) {return x._id === person._id};
//                         var spliceChange = _.find(allChanges, splicePredicate);
//                         assert.equal(spliceChange.type, ChangeType.Splice);
//                         assert.include(spliceChange.addedId, anotherCar._id);
//                         assert.equal(spliceChange.index, 1);
//                         assert.equal(spliceChange.field, 'cars');
//                         done();
//                     });
//                 });

//                 it('splice', function (done) {
//                     car = carMapping._new();
//                     person = personMapping._new();
//                     person.cars = [car];
//                     s.ext.storage.changes.resetChanges();
//                     car.ownersProxy.related = null;
//                     person.cars.splice(0, 1);
//                     util.next(function () {
//                         var allChanges = s.ext.storage.changes.allChanges;
//                         assert.equal(allChanges.length, 2);
//                         var personPred = function (x) {return x._id === person._id};
//                         var personChange = _.find(allChanges, personPred);
//                         var carPred = function (x) {return x._id === car._id};
//                         var carChange = _.find(allChanges, carPred);
//                         assert.include(personChange.removed, car);
//                         assert.notOk(car.ownersProxy._id.length);
//                         assert.equal(personChange.type, ChangeType.Splice);
//                         done();
//                     });
//                 });
//             });




//         });

//     });
// });
},{}],87:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('attribute s.ext.storage.changes', function () {

//     var Collection = require('../src/collection').Collection
//         , ChangeType = require('../src/changes').ChangeType;

//     beforeEach(function () {
//         s.reset(true);
//     });

//     describe('attributes', function () {
//         var collection, carMapping;
//         var car;

//         var notif, collectionNotif, genericNotif;

//         afterEach(function () {
//             notif = null;
//             collectionNotif = null;
//             genericNotif = null;
//             car = null;
//             collection = null;
//             carMapping = null;
//         });

//         describe('set', function () {

//             beforeEach(function (done) {

//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colour', 'name']
//                 });
//                 collection.install(done);

//             });

//             it('no previous value', function () {
//                 var model = carMapping._new();
//                 model.colour = 'red';
//                 var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                 assert.equal(cs.length, 1);
//                 var c = cs[0];
//                 assert.equal(c.type, ChangeType.Set);
//                 assert.equal(c.new, 'red');
//                 assert.equal(c._id, model._id);
//                 assert.equal(c.collection, 'myCollection');
//                 assert.equal(c.mapping, 'Car');
//                 assert.equal(c.field, 'colour');
//                 assert.notOk(c.old);
//             });

//             it('has previous value', function () {
//                 var model = carMapping._new();
//                 model.__values.colour = 'blue';
//                 model.colour = 'red';
//                 var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                 assert.equal(cs.length, 1);
//                 var c = cs[0];
//                 assert.equal(c.type, ChangeType.Set);
//                 assert.equal(c.new, 'red');
//                 assert.equal(c.old, 'blue');
//                 assert.equal(c._id, model._id);
//                 assert.equal(c.collection, 'myCollection');
//                 assert.equal(c.mapping, 'Car');
//                 assert.equal(c.field, 'colour');
//             });

//             it('remote id', function () {
//                 var model = carMapping._new();
//                 model.id = 'xyz';
//                 var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                 assert.equal(cs.length, 1);
//                 var c = cs[0];
//                 assert.equal(c.type, ChangeType.Set);
//                 assert.equal(c.new, 'xyz');
//                 assert.notOk(c.old);
//                 assert.equal(c._id, model._id);
//                 assert.equal(c.collection, 'myCollection');
//                 assert.equal(c.mapping, 'Car');
//                 assert.equal(c.field, 'id');
//             });

//         });

//         describe('array', function () {
//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name']
//                 });
//                 collection.install(done);
//             });

//             describe('set', function () {
//                 it('no previous value', function () {
//                     var model = carMapping._new();
//                     model.colours = ['green', 'blue'];
//                     var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                     assert.equal(cs.length, 1);
//                     var c = cs[0];
//                     assert.equal(c.type, ChangeType.Set);
//                     assert.equal(c.new, model.colours);
//                     assert.notOk(c.old);
//                     assert.equal(c._id, model._id);
//                     assert.equal(c.collection, 'myCollection');
//                     assert.equal(c.mapping, 'Car');
//                     assert.equal(c.field, 'colours');
//                 });

//                 it('has previous value', function () {
//                     var model = carMapping._new();
//                     var oldColours = ['purple', 'red'];
//                     model.__values.colours = oldColours;
//                     model.colours = ['green', 'blue'];
//                     var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                     assert.equal(cs.length, 1);
//                     var c = cs[0];
//                     assert.equal(c.type, ChangeType.Set);
//                     assert.equal(c.new, model.colours);
//                     assert.equal(c.old, oldColours);
//                     assert.equal(c._id, model._id);
//                     assert.equal(c.collection, 'myCollection');
//                     assert.equal(c.mapping, 'Car');
//                     assert.equal(c.field, 'colours');
//                 });
//             });

//             it('push', function (done) {
//                 var model = carMapping._new();
//                 model.colours = [];
//                 s.ext.storage.changes.resetChanges();
//                 model.colours.push('red');
//                 setTimeout(function () {
//                     var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                     assert.equal(cs.length, 1);
//                     var c = cs[0];
//                     assert.equal(c.type, ChangeType.Splice);
//                     assert.equal(c.index, 0);
//                     assert.equal(c.removed.length, 0);
//                     assert.equal(c.added.length, 1);
//                     assert.equal(c.added[0], 'red');
//                     assert.equal(c._id, model._id);
//                     assert.equal(c.collection, 'myCollection');
//                     assert.equal(c.mapping, 'Car');
//                     assert.equal(c.field, 'colours');
//                     done();
//                 });
//             });

//             it('index', function (done) {
//                 var model = carMapping._new();
//                 model.colours = ['blue', 'green', 'purple'];
//                 s.ext.storage.changes.resetChanges();
//                 model.colours[1] = 'red';
//                 setTimeout(function () {
//                     var cs = s.ext.storage.changes.changesForIdentifier(model._id);
//                     assert.equal(cs.length, 1);
//                     var c = cs[0];
//                     assert.equal(c.type, ChangeType.Splice);
//                     assert.equal(c.index, 1);
//                     assert.equal(c.removed.length, 1);
//                     assert.equal(c.removed[0], 'green');
//                     assert.equal(c.added.length, 1);
//                     assert.equal(c.added[0], 'red');
//                     assert.equal(c._id, model._id);
//                     assert.equal(c.collection, 'myCollection');
//                     assert.equal(c.mapping, 'Car');
//                     assert.equal(c.field, 'colours');
//                     done();
//                 });
//             });

//         });

//     });

// });
},{}],88:[function(require,module,exports){
// var chai = require('chai');
// var s = require('../index')
//     , assert = chai.assert;

// var mappingOperation = require('../src/mappingOperation');
// var BulkMappingOperation = mappingOperation.BulkMappingOperation;
// var util = require('../src/util');
// var RelationshipType = require('../src/relationship').RelationshipType;
// var Collection = require('../src/collection').Collection;
// var cache = require('../src/cache');
// var collection;
// var Repo, User;


// describe('bulk mapping operation', function () {
//     describe('general', function () {
//         beforeEach(function (done) {
//             s.reset(true);
//             collection = new Collection('MyCollection');
//             collection.baseURL = 'https://api.github.com';
//             Repo = collection.mapping('Repo', {
//                 id: 'id',
//                 attributes: ['name', 'full_name', 'description'],
//                 relationships: {
//                     owner: {
//                         mapping: 'User',
//                         type: RelationshipType.OneToMany,
//                         reverse: 'repositories'
//                     }
//                 }
//             });
//             User = collection.mapping('User', {
//                 id: 'id',
//                 attributes: ['login']
//             });
//             collection.install(done);
//         });


//         describe('new', function () {

//             describe('foreign key', function () {
//                 describe('reverse', function () {
//                     it('existing', function (done) {
//                         s.ext.storage.Pouch.getPouch().post({
//                             id: '5',
//                             name: 'Old Name',
//                             full_name: 'Old Full Name',
//                             collection: 'MyCollection',
//                             type: 'Repo'
//                         }, function (err, resp) {
//                             if (err) {
//                                 done(err);
//                             }
//                             else {
//                                 var data = [
//                                     {
//                                         login: 'mike',
//                                         id: '123',
//                                         repositories: [
//                                             {id: '5', name: 'Repo', full_name: 'A Big Repo'}
//                                         ]
//                                     }
//                                 ];
//                                 var op = new BulkMappingOperation({mapping: User, data: data});
//                                 op.onCompletion(function () {
//                                     if (op.error) {
//                                         done(op.error);
//                                     }
//                                     else {
//                                         var objects = op.result;
//                                         try {
//                                             assert.equal(objects.length, 1);
//                                             var obj = objects[0];
//                                             assert.equal(obj.login, 'mike');
//                                             assert.equal(obj.id, '123');
//                                             assert.equal(obj.repositories.length, 1);
//                                             var repo = obj.repositories[0];
//                                             assert.equal(repo.id, 5);
//                                             assert.equal(repo.name, 'Repo');
//                                             assert.equal(repo.full_name, 'A Big Repo');
//                                             assert.equal(repo._id, resp.id);
//                                             assert.equal(repo.owner, obj);
//                                             done();
//                                         }
//                                         catch (err) {
//                                             done(err);
//                                         }
//                                     }

//                                 });
//                                 op.start();
//                             }

//                         })
//                     })
//                 });
//             });
//         });
//     });

//     describe('singleton...', function () {
//         var op;

//         beforeEach(function (done) {
//             s.reset(true);

//             collection = new Collection('MyCollection');
//             collection.baseURL = 'https://api.github.com';
//             Repo = collection.mapping('Repo', {
//                 id: 'id',
//                 attributes: ['name', 'full_name', 'description'],
//                 relationships: {
//                     owner: {
//                         mapping: 'User',
//                         type: RelationshipType.OneToMany,
//                         reverse: 'repositories'
//                     }
//                 }
//             });
//             User = collection.mapping('User', {
//                 id: 'id',
//                 attributes: ['login'],
//                 singleton: true
//             });
//             collection.install(done);
//         });

//         describe('existing, faulted', function () {

//             beforeEach(function (done) {
//                 var doc = {id: '567', _id: 'localId', type: 'User', collection: 'MyCollection'};
//                 s.ext.storage.Pouch.getPouch().put(doc, function (err, resp) {
//                     if (err) done(err);
//                     doc._rev = resp.rev;
//                     var data = [
//                         {login: 'mike', id: '123'},
//                         {login: 'bob', id: '1234'}
//                     ];
//                     op = new BulkMappingOperation({mapping: User, data: data});
//                     done();
//                 });
//             });

//             it('lookupSingleton', function (done) {
//                 op._lookupSingleton(function (err) {
//                     if (!err) {
//                         assert.equal(op.objects.length, 2);
//                         assert.equal(op.objects[0]._id, 'localId');
//                         assert.equal(op.objects[0], op.objects[1]);
//                     }
//                     done(err);
//                 });
//             });

//             it('map', function (done) {
//                 op.onCompletion(function () {
//                     var err = op.error;
//                     if (!err) {
//                         assert.equal(op.objects.length, 2);
//                         assert.equal(op.objects[0]._id, 'localId');
//                         assert.equal(op.objects[0], op.objects[1]);
//                         assert.equal(op.objects[0].login, 'bob');
//                         assert.equal(op.objects[0].id, '1234');
//                     }
//                     done(err);
//                 });
//                 op.start();
//             });
//         });
//     });
// });
},{}],89:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('./util').assert;

// describe('changes!', function () {

//     var ChangeType = require('../src/changes').ChangeType;
//     var RelationshipType = require('../src/relationship').RelationshipType;

//     var InternalSiestaError = require('../src/error').InternalSiestaError;

//     var Collection = require('../src/collection').Collection;

//     var cache = require('../src/cache');

//     var coreChanges = require('../src/changes');

//     var Change = coreChanges.Change;
//     var util = require('../src/util');

//     var collection, carMapping;

//     beforeEach(function () {
//         s.reset(true);
//     });

//     describe('registering changes', function () {
//         beforeEach(function (done) {
//             collection = new Collection('myCollection');
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colour', 'name']
//             });
//             collection.install(done);
//         });

//         it('registers a change', function () {
//             coreChanges.registerChange({
//                 collection: collection,
//                 mapping: carMapping,
//                 _id: 'xyz'
//             });
//             var objChanges = s.ext.storage.changes.changes[collection.name][carMapping.type]['xyz'];
//             assert.equal(objChanges.length, 1);
//             var change = objChanges[0];
//             assert.equal(change.collection, collection);
//             assert.equal(change.mapping, carMapping);
//             assert.equal(change._id, 'xyz');
//         });

//         describe('errors', function () {
//             it('should throw an error if no mapping', function () {
//                 assert.throws(
//                     function () {
//                         coreChanges.registerChange({
//                             collection: collection,
//                             _id: 'xyz'
//                         })
//                     }, InternalSiestaError
//                 );
//             });

//             it('should throw an error if no collection', function () {
//                 assert.throws(
//                     function () {
//                         coreChanges.registerChange({
//                             mapping: carMapping,
//                             _id: 'xyz'
//                         })
//                     }, InternalSiestaError
//                 );
//             });

//             it('should throw an error if no _id', function () {
//                 assert.throws(
//                     function () {
//                         coreChanges.registerChange({
//                             mapping: carMapping,
//                             collection: collection
//                         })
//                     }, InternalSiestaError
//                 );
//             })
//         });
//     });

//     describe('all s.ext.storage.changes', function () {
//         beforeEach(function (done) {
//             collection = new Collection('myCollection');
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colour', 'name']
//             });
//             collection.install(done);
//         });

//         it('all s.ext.storage.changes', function () {
//             s.ext.storage.changes.changes = {
//                 collection: {
//                     mapping1: {
//                         xyz: ['adsd', 'asdas']
//                     },
//                     mapping2: {
//                         xyz1: ['dsasda', 'fh43']
//                     }
//                 },
//                 anotherCollection: {
//                     anotherMapping: {
//                         obj1: ['asd'],
//                         obj2: ['123', '567']
//                     }
//                 }
//             };

//             assert.equal(s.ext.storage.changes.allChanges.length, 7);
//             assert.include(s.ext.storage.changes.allChanges, 'adsd');
//             assert.include(s.ext.storage.changes.allChanges, 'asdas');
//             assert.include(s.ext.storage.changes.allChanges, 'dsasda');
//             assert.include(s.ext.storage.changes.allChanges, 'fh43');
//             assert.include(s.ext.storage.changes.allChanges, 'asd');
//             assert.include(s.ext.storage.changes.allChanges, '123');
//             assert.include(s.ext.storage.changes.allChanges, '567');
//         });
//     });

//     describe('applying changes', function () {

//         describe('set', function () {
//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colour', 'name']
//                 });
//                 collection.install(done);
//             });

//             it('set', function () {
//                 var obj = carMapping._new({colour: 'red', name: 'Aston Martin'});
//                 var c = new Change();
//                 c.collection = collection._name;
//                 c.mapping = carMapping.type;
//                 c.field = 'colour';
//                 c.type = ChangeType.Set;
//                 c.new = 'blue';
//                 c.old = 'red';
//                 c._id = obj._id;
//                 c.apply(obj);
//                 assert.equal(obj.colour, 'blue');
//             });

//             describe('errors', function () {


//                 it('incorrect _id', function () {
//                     var obj = carMapping._new({colour: 'red', name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection._name;
//                     c.mapping = carMapping.type;
//                     c.field = 'colour';
//                     c.type = ChangeType.Set;
//                     c.new = 'blue';
//                     c.old = 'red';
//                     c._id = 'randomid';
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });
//                 it('old does not match current', function () {
//                     var obj = carMapping._new({colour: 'red', name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection._name;
//                     c.mapping = carMapping.type;
//                     c.field = 'colour';
//                     c.type = ChangeType.Set;
//                     c.new = 'blue';
//                     c.old = 'purple';
//                     c._id = obj._id;
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });
//             })
//         });
//         describe('splice', function () {

//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name']
//                 });
//                 collection.install(done);
//             });

//             it('works', function () {
//                 var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                 var c = new Change();
//                 c.collection = collection;
//                 c.mapping = carMapping;
//                 c.field = 'colours';
//                 c.type = ChangeType.Splice;
//                 c.index = 1;
//                 c.added = ['green'];
//                 c.removed = ['blue'];
//                 c._id = obj._id;
//                 c.apply(obj);
//                 assert.equal(obj.colours.length, 2);
//                 assert.equal(obj.colours[0], 'red');
//                 assert.equal(obj.colours[1], 'green');
//             });

//             describe('errors', function () {
//                 it('no remove or added', function () {
//                     var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection;
//                     c.mapping = carMapping;
//                     c.field = 'colours';
//                     c.type = ChangeType.Splice;
//                     c.index = 2;
//                     c._id = obj._id;
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });
//                 it('no index', function () {
//                     var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection;
//                     c.mapping = carMapping;
//                     c.field = 'colours';
//                     c.type = ChangeType.Splice;
//                     c.added = ['green'];
//                     c.removedCount = 1;
//                     c._id = obj._id;
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });
//                 it('removed doesnt match', function () {
//                     var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection;
//                     c.mapping = carMapping;
//                     c.field = 'colours';
//                     c.type = ChangeType.Splice;
//                     c.index = 1;
//                     c.added = ['green'];
//                     c.removed = ['purple'];
//                     c._id = obj._id;
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });
//             });
//         });
//         describe('remove', function () {
//             it('works', function () {
//                 var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                 var c = new Change();
//                 c.collection = collection;
//                 c.mapping = carMapping;
//                 c.field = 'colours';
//                 c.type = ChangeType.Delete;
//                 c.removed = ['red'];
//                 c._id = obj._id;
//                 c.apply(obj);
//                 assert.equal(obj.colours.length, 1);
//                 assert.equal(obj.colours[0], 'blue');
//             });
//             describe('errors', function () {
//                 it('no removed', function () {
//                     var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                     var c = new Change();
//                     c.collection = collection;
//                     c.mapping = carMapping;
//                     c.field = 'colours';
//                     c.type = ChangeType.Delete;
//                     c._id = obj._id;
//                     assert.throws(function () {
//                         c.apply(obj);
//                     }, InternalSiestaError);
//                 });

//             });
//         })

//     });

//     describe('merge changes', function () {
//         function testMerge(changes, docs, callback) {
//             var db = s.ext.storage.Pouch.getPouch();
//             db.bulkDocs(docs, function (err) {
//                 if (err) {
//                     callback(err);
//                 }
//                 else {
//                     s.ext.storage.changes.changes = changes;
//                     s.ext.storage.changes.mergeChanges(function (err) {
//                         if (err) {
//                             callback(err);
//                         }
//                         else {
//                             db.allDocs({keys: _.pluck(docs, '_id'), include_docs: true}, function (err, resp) {
//                                 if (err) {
//                                     callback(err);
//                                 }
//                                 else {
//                                     callback(null, _.pluck(resp.rows, 'doc'));
//                                 }
//                             })
//                         }
//                     });
//                 }
//             });
//         }

//         describe('set', function () {


//             describe('attribute', function () {
//                 beforeEach(function (done) {
//                     collection = new Collection('myCollection');
//                     carMapping = collection.mapping('Car', {
//                         id: 'id',
//                         attributes: ['colour', 'name']
//                     });
//                     collection.install(done);
//                 });
//                 it('set attribute', function (done) {
//                     var changes = {
//                         myCollection: {
//                             Car: {
//                                 localId: [
//                                     new Change({
//                                         collection: collection._name,
//                                         mapping: carMapping.type,
//                                         field: 'colour',
//                                         type: ChangeType.Set,
//                                         new: 'blue',
//                                         old: 'red',
//                                         _id: 'localId'
//                                     })
//                                 ]
//                             }
//                         }
//                     };

//                     var docs = [
//                         {
//                             _id: 'localId',
//                             name: 'Aston Martin',
//                             colour: 'red',
//                             collection: 'myCollection',
//                             type: 'Car'
//                         }
//                     ];

//                     testMerge(changes, docs, function (err, docs) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var doc = docs[0];
//                             assert.equal(doc.colour, 'blue');
//                             assert.notOk(s.ext.storage.changes.allChanges.length);
//                             done();
//                         }
//                     });
//                 });

//             });

//             describe('relationship', function () {
//                 var personMapping;
//                 describe('foreign key', function () {
//                     beforeEach(function (done) {
//                         collection = new Collection('myCollection');
//                         carMapping = collection.mapping('Car', {
//                             id: 'id',
//                             attributes: ['colour', 'name'],
//                             relationships: {
//                                 owner: {
//                                     type: RelationshipType.OneToMany,
//                                     reverse: 'cars',
//                                     mapping: 'Person'
//                                 }
//                             }
//                         });
//                         personMapping = collection.mapping('Person', {
//                             id: 'id',
//                             attributes: ['name', 'age']
//                         });
//                         collection.install(done);
//                     });

//                     it('forward', function (done) {
//                         var changes = {
//                             myCollection: {
//                                 Car: {
//                                     carId: [
//                                         new Change({
//                                             collection: collection._name,
//                                             mapping: carMapping.type,
//                                             field: 'owner',
//                                             type: ChangeType.Set,
//                                             newId: 'personId',
//                                             oldId: null,
//                                             _id: 'carId'
//                                         })
//                                     ]
//                                 }
//                             }
//                         };
//                         var docs = [
//                             {
//                                 _id: 'carId',
//                                 name: 'Aston Martin',
//                                 colour: 'red',
//                                 collection: 'myCollection',
//                                 type: 'Car'
//                             }
//                         ];

//                         testMerge(changes, docs, function (err, docs) {
//                             if (err) {
//                                 done(err);
//                             }
//                             else {
//                                 var doc = docs[0];
//                                 assert.equal(doc.owner, 'personId');
//                                 done();
//                             }
//                         });
//                     });

//                     it('reverse', function (done) {
//                         var changes = {
//                             myCollection: {
//                                 Car: {
//                                     personId: [
//                                         new Change({
//                                             collection: collection._name,
//                                             mapping: carMapping.type,
//                                             field: 'owner',
//                                             type: ChangeType.Set,
//                                             newId: ['carId1', 'carId2', 'carId3'],
//                                             oldId: null,
//                                             _id: 'personId'
//                                         })
//                                     ]
//                                 }
//                             }
//                         };
//                         var docs = [
//                             {
//                                 _id: 'personId',
//                                 name: 'Michael Ford',
//                                 age: 24,
//                                 collection: 'myCollection',
//                                 type: 'Person'
//                             }
//                         ];

//                         testMerge(changes, docs, function (err, docs) {
//                             if (err) {
//                                 done(err);
//                             }
//                             else {
//                                 var doc = docs[0];
//                                 assert.arrEqual(doc.owner, ['carId1', 'carId2', 'carId3']);
//                                 done();
//                             }
//                         });
//                     });
//                 });


//             });

//         });

//     });

//     describe('apply changes', function () {

//         describe('attribute', function () {

//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name']
//                 });
//                 collection.install(done);
//             });

//             it('set', function () {
//                 var obj = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                 var c = new Change({
//                     collection: collection,
//                     mapping: carMapping,
//                     field: 'colours',
//                     type: ChangeType.Set,
//                     new: 'blue',
//                     old: 'red',
//                     _id: obj._id
//                 });
//                 c.applySiestaModel(obj);
//                 assert.equal(obj.colours, 'blue');
//             });

//             it('set, old is wrong', function () {
//                 var obj = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                 var c = new Change({
//                     collection: collection,
//                     mapping: carMapping,
//                     field: 'colours',
//                     type: ChangeType.Set,
//                     new: 'blue',
//                     old: 'green',
//                     _id: obj._id
//                 });
//                 assert.throws(function () {
//                     c.applySiestaModel(obj);
//                 }, InternalSiestaError);
//             });

//             it('splice', function () {
//                 var obj = carMapping._new({colours: ['red', 'blue'], name: 'Aston Martin'});
//                 var c = new Change({
//                     collection: collection,
//                     mapping: carMapping,
//                     field: 'colours',
//                     type: ChangeType.Splice,
//                     index: 1,
//                     added: ['green'],
//                     removed: ['blue'],
//                     _id: obj._id
//                 });
//                 c.apply(obj);
//                 assert.equal(obj.colours.length, 2);
//                 assert.equal(obj.colours[0], 'red');
//                 assert.equal(obj.colours[1], 'green');
//             });

//         });

//         describe('relationships', function () {

//             var personMapping;

//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colours', 'name'],
//                     relationships: {
//                         owner: {
//                             type: RelationshipType.OneToMany,
//                             reverse: 'cars',
//                             mapping: 'Person'
//                         }
//                     }
//                 });
//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age']
//                 });
//                 collection.install(done);
//             });

//             describe('set', function () {

//                 describe('no old', function () {
//                     it('new only', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             new: person,
//                             old: null,
//                             _id: car._id
//                         });
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, person._id, 'Should set _id');
//                         assert.equal(proxy.related, person, 'Should set person');
//                         assert.equal(car.owner, person);
//                     });

//                     it('newId only', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             newId: person._id,
//                             old: null,
//                             _id: car._id
//                         });
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, person._id, 'Should set _id');
//                         // person object should be pulled from cache.
//                         assert.equal(proxy.related, person, 'Should set person');
//                         assert.equal(car.owner, person);
//                     });

//                     it('both new and newId', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             newId: person._id,
//                             new: person,
//                             old: null,
//                             _id: car._id
//                         });
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, person._id, 'Should set _id');
//                         assert.equal(proxy.related, person, 'Should set person');
//                         assert.equal(car.owner, person);
//                     });
//                 });

//                 describe('old', function () {
//                     it('new and old only', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         car.owner = person;
//                         var newOwner = carMapping._new({name: 'Bob', age: 24});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             new: newOwner,
//                             old: person,
//                             _id: car._id
//                         });
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, newOwner._id, 'Should set _id');
//                         assert.equal(proxy.related, newOwner, 'Should set person');
//                         assert.equal(car.owner, newOwner);
//                     });

//                     it('newId and oldId only, no fault', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         car.owner = person;
//                         var newOwner = carMapping._new({name: 'Bob', age: 24});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             newId: newOwner._id,
//                             oldId: person._id,
//                             _id: car._id
//                         });
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, newOwner._id, 'Should set _id');
//                         assert.equal(proxy.related, newOwner, 'Should set person');
//                         assert.equal(car.owner, newOwner);
//                     });

//                     it('newId and oldId only, fault', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         car.owner = person;
//                         var newOwner = carMapping._new({name: 'Bob', age: 24});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             newId: newOwner._id,
//                             oldId: person._id,
//                             _id: car._id
//                         });
//                         cache.reset();
//                         c.applySiestaModel(car);
//                         var proxy = car.ownerProxy;
//                         assert.equal(proxy._id, newOwner._id, 'Should set _id');
//                         assert.notOk(proxy.related);
//                         assert.ok(proxy.isFault);
//                     });

//                 });


//                 describe('errors', function () {
//                     it('invalid oldId', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             new: person,
//                             oldId: 'xyz',
//                             _id: car._id
//                         });
//                         assert.throws(function () {
//                             c.applySiestaModel(car);
//                         }, InternalSiestaError);
//                     });
//                     it('invalid old', function () {
//                         var car = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                         var person = personMapping._new({name: 'Michael Ford', age: 23});
//                         var c = new Change({
//                             collection: collection,
//                             mapping: carMapping,
//                             field: 'owner',
//                             type: ChangeType.Set,
//                             new: person,
//                             old: {_id: 'xyz'},
//                             _id: car._id
//                         });
//                         assert.throws(function () {
//                             c.applySiestaModel(car);
//                         }, InternalSiestaError);
//                     });

//                 })

//             });

//             describe('splice', function () {

//                 it('removed only', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         removed: [car1],
//                         _id: person._id
//                     });
//                     c.applySiestaModel(person);
//                     var proxy = person.carsProxy;
//                     assert.equal(proxy._id.length, 1);
//                     assert.include(proxy._id, car2._id);
//                     assert.equal(proxy.related.length, 1);
//                     assert.include(proxy.related, car2);
//                     assert.equal(person.cars.length, 1);
//                 });

//                 it('removedId only, no fault', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         removedId: [car1._id],
//                         _id: person._id
//                     });
//                     c.applySiestaModel(person);
//                     var proxy = person.carsProxy;
//                     assert.equal(proxy._id.length, 1);
//                     assert.include(proxy._id, car2._id);
//                     assert.equal(proxy.related.length, 1);
//                     assert.include(proxy.related, car2);
//                     assert.equal(person.cars.length, 1);
//                 });

//                 it('removedId only, fault', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         removedId: [car1._id],
//                         _id: person._id
//                     });
//                     cache.reset();
//                     var proxy = person.carsProxy;
//                     proxy.related = null;
//                     c.applySiestaModel(person);
//                     assert.equal(proxy._id.length, 1);
//                     assert.include(proxy._id, car2._id);
//                     assert.ok(proxy.isFault);
//                 });

//                 it('added only', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     var car3 = carMapping._new({colours: 'purple', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         added: [car3],
//                         _id: person._id
//                     });
//                     c.applySiestaModel(person);
//                     var proxy = person.carsProxy;
//                     assert.equal(proxy._id.length, 3);
//                     assert.include(proxy._id, car3._id);
//                     assert.equal(proxy.related.length, 3);
//                     assert.include(proxy.related, car3);
//                     assert.equal(person.cars.length, 3);
//                 });


//                 it('addedId only, no fault', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     var car3 = carMapping._new({colours: 'purple', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         addedId: [car3._id],
//                         _id: person._id
//                     });
//                     c.applySiestaModel(person);
//                     var proxy = person.carsProxy;
//                     assert.equal(proxy._id.length, 3);
//                     assert.include(proxy._id, car3._id);
//                     assert.equal(proxy.related.length, 3);
//                     assert.include(proxy.related, car3);
//                     assert.equal(person.cars.length, 3);
//                 });


//                 it('addedId only, fault', function () {
//                     var person = personMapping._new({name: 'Michael Ford', age: 23});
//                     var car1 = carMapping._new({colours: 'red', name: 'Aston Martin'});
//                     var car2 = carMapping._new({colours: 'blue', name: 'Aston Martin'});
//                     var car3 = carMapping._new({colours: 'purple', name: 'Aston Martin'});
//                     person.cars = [car1, car2];
//                     var c = new Change({
//                         collection: collection,
//                         mapping: personMapping,
//                         field: 'cars',
//                         type: ChangeType.Splice,
//                         index: 0,
//                         addedId: [car3._id],
//                         _id: person._id
//                     });
//                     cache.reset();
//                     c.applySiestaModel(person);
//                     var proxy = person.carsProxy;
//                     assert.equal(proxy._id.length, 3);
//                     assert.include(proxy._id, car3._id);
//                     assert.notOk(proxy.related);
//                     assert.ok(proxy.isFault);
//                 });


//             });


//         });

//     });

//     describe('save', function () {

//         var collection, carMapping, personMapping;
//         var car, person, carChanges, personChanges;

//         beforeEach(function (done) {
//             collection = new Collection('myCollection');
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colour', 'name'],
//                 relationships: {
//                     owner: {
//                         type: RelationshipType.OneToMany,
//                         reverse: 'cars',
//                         mapping: 'Person'
//                     }
//                 }
//             });
//             personMapping = collection.mapping('Person', {
//                 id: 'id',
//                 attributes: ['age', 'name']
//             });
//             collection.install(function (err) {
//                 if (err) done(err);
//                 personMapping.map({name: 'Michael Ford', age: 23}, function (err, _person) {
//                     if (err) done(err);
//                     person = _person;
//                     carMapping.map({colour: 'red', name: 'Aston Martin', owner: person}, function (err, _car) {
//                         if (err) done(err);
//                         car = _car;
//                         util.next(function () {
//                             carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             collection.save(done);
//                         });
//                     });
//                 });
//             });
//         });

//         describe('registers changes', function () {
//             it('forward', function () {
//                 assert.equal(carChanges.length, 3);
//                 _.chain(carChanges).pluck('_id').each(function (x) {assert.equal(x, car._id);});
//                 _.chain(carChanges).pluck('collection').each(function (x) {assert.equal(x, 'myCollection');});
//                 _.chain(carChanges).pluck('mapping').each(function (x) {assert.equal(x, 'Car');});
//                 var colourChange = _.findWhere(carChanges, {field: 'colour'});
//                 assert.ok(colourChange);
//                 assert.equal(colourChange.new, 'red');
//                 assert.notOk(colourChange.old);
//                 var nameChange = _.findWhere(carChanges, {field: 'name'});
//                 assert.ok(nameChange);
//                 assert.equal(nameChange.new, 'Aston Martin');
//                 assert.notOk(nameChange.old);
//                 var ownerChange = _.findWhere(carChanges, {field: 'owner'});
//                 assert.ok(ownerChange);
//                 assert.equal(ownerChange.new, person);
//                 assert.equal(ownerChange.newId, person._id);
//                 assert.notOk(ownerChange.old);
//             });

//             it('reverse', function () {

//             });
//         });

//         describe('saves', function () {
//             it('saves changes', function (done) {
//                 s.ext.storage.changes.mergeChanges(function (err) {
//                     if (err) done(err);
//                     assert.notOk(s.ext.storage.changes.allChanges.length);
//                     s.ext.storage.Pouch.getPouch().get(car._id, function (err, doc) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             assert.equal(doc.colour, 'red');
//                             assert.equal(doc.name, 'Aston Martin');
//                             assert.equal(doc.collection, 'myCollection');
//                             assert.equal(doc.mapping, 'Car');
//                             done();
//                         }
//                     });
//                 })
//             });
//         })

//     });

// });
},{}],90:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;


// describe('indexes', function () {

//     beforeEach(function () {
//         s.reset(true);
//     });

//     describe('Index', function () {
//         it('index name', function () {
//             var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//             assert.equal(i._getName(), 'myCollection_Index_Car_colour_name');
//             i = new s.ext.storage.Index('myCollection', 'Car', ['name', 'colour']);
//             assert.equal(i._getName(), 'myCollection_Index_Car_colour_name');
//         });

//         describe('map func', function () {



//             it('map func', function () {
//                 var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//                 var emissions = [];

//                 function emit(id, doc) {
//                     emissions.push({id: id, doc: doc});
//                 }

//                 var rawMap = i._constructMapFunction();
//                 eval('var mapFunc = ' + rawMap);
//                 mapFunc({type: 'Car', colour: 'red', name: 'Aston Martin', collection: 'myCollection'});
//                 assert.equal(1, emissions.length);
//                 var emission = emissions[0];
//                 assert.equal(emission.id, 'red_Aston Martin')
//             });



//         });


//         // Check that queries using the s.ext.storage.index work as expected with s.ext.storage.PouchDB.
//         it('pouchdb s.ext.storage.index', function (done) {
//             var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//             var view = i._constructPouchDbView();
//             s.ext.storage.Pouch.getPouch().put(view, function (err, resp) {
//                 if (err) done(err);
//                 s.ext.storage.Pouch.getPouch().post({type: 'Car', colour: 'red', name: 'Aston Martin', collection: 'myCollection'}, function (err, resp) {
//                     if (err) done(err);
//                     s.ext.storage.Pouch.getPouch().query(i._getName(), {key: 'red_Aston Martin'}, function (err, resp) {
//                         if (err) done(err);
//                         assert.equal(resp.total_rows, 1);
//                         done();
//                     });
//                 });
//             });
//         });

//         it('installation', function (done) {
//             var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//             i.install(function (err) {
//                 if (err) done(err);
//                 assert.include(s.ext.storage.Index.indexes, i);
//                 s.ext.storage.Pouch.getPouch().get('_design/' + i._getName(), function (err, doc) {
//                     if (err) done(err);
//                     assert.ok(doc);
//                     done();
//                 });
//             });
//         })
//     });

//     describe('Indexes', function () {
//         it('field combinations', function () {
//             var combinations = s.ext.storage.index._getFieldCombinations(['field1', 'field2', 'field3']);
//             assert.equal(8, combinations.length);
//         });

//         it('indexes', function () {
//             var indexes = s.ext.storage.index._constructIndexes('myCollection', 'Car', ['field1', 'field2', 'field3']);
//             assert.equal(8, indexes.length);
//             _.each(indexes, function (i) {assert.ok(i.install)});
//         });

//         it('bulk installation', function (done) {
//             s.ext.storage.index.installIndexes('myCollection', 'Car', ['field1', 'field2', 'field3'], function (err) {
//                 if (err) done(err);
//                 // Should be able to handle conflicts.
//                 s.ext.storage.index.installIndexes('myCollection', 'Car', ['field1', 'field2', 'field3'], function (err) {
//                     done(err);
//                 });
//             });
//         });
//     });


// });



    // describe('index installation', function () {

    //     it('installation', function (done) {
    //         var m = new Mapping({
    //             type: 'Type',
    //             id: 'id',
    //             attributes: ['field1', 'field2'],
    //             collection: 'myCollection'
    //         });
    //         m.install(function (err) {
    //             if (err) done(err);
    //             var indexes = s.ext.storage.Index.indexes;
    //             assert.equal(indexes.length, 2);
    //             done();
    //         });
    //     });

    //     it('no indexes specified', function () {
    //         var m = new Mapping({
    //             type: 'Type',
    //             id: 'id',
    //             attributes: ['field1', 'field2'],
    //             collection: 'myCollection'
    //         });
    //         var indexes = m.getIndexesToInstall();
    //         assert.equal(indexes.length, 1);
    //         assert.include(indexes, 'id');
    //     });

    //     it('indexes specified', function () {
    //         var m = new Mapping({
    //             type: 'Type',
    //             id: 'id',
    //             attributes: ['field1', 'field2'],
    //             collection: 'myCollection',
    //             indexes: ['field1']
    //         });
    //         var indexes = m.getIndexesToInstall();
    //         assert.equal(indexes.length, 2);
    //         assert.include(indexes, 'id');
    //         assert.include(indexes, 'field1');
    //     });

    //     it('invalid indexes specified', function () {
    //         var m = new Mapping({
    //             type: 'Type',
    //             id: 'id',
    //             attributes: ['field1', 'field2'],
    //             collection: 'myCollection',
    //             indexes: ['fgdofgndfog']
    //         });
    //         var indexes = m.getIndexesToInstall();
    //         assert.equal(indexes.length, 1);
    //         assert.include(indexes, 'id');
    //     });

    // });
},{}],91:[function(require,module,exports){
// /**
//  * An integration test that creates two complex collections and then establishes inter-collection relationships
//  * between the mappings in each before creating objects etc.
//  *
//  * We then proceed to test various aspects of the system.
//  */

// var s = require('../../index')
//     , assert = require('chai').assert;

// var Collection = require('../../src/collection').Collection;
// var RelationshipType = require('../../src/relationship').RelationshipType;
// var cache = require('../../src/cache');

// var async = require('async');

// describe('intercollection relationships', function () {
//     var myOfflineCollection;
//     var myOnlineCollection;

//     beforeEach(function (done) {
//         s.reset(true);
//         var finishedCreatingMyOfflineCollection = false;

//         myOfflineCollection = new Collection('MyOfflineCollection');

//         myOfflineCollection.mapping('Folder', {
//             attributes: ['name'],
//             relationships: {
//                 createdBy: {
//                     mapping: 'User',
//                     type: RelationshipType.OneToMany,
//                     reverse: 'folders'
//                 }
//             }
//         });

//         myOfflineCollection.mapping('DownloadedPhoto', {
//             attributes: ['creationDate'],
//             relationships: {
//                 createdBy: {
//                     mapping: 'User',
//                     type: RelationshipType.OneToMany,
//                     reverse: 'files'
//                 },
//                 folder: {
//                     mapping: 'Folder',
//                     type: RelationshipType.OneToMany,
//                     reverse: 'files'
//                 },
//                 photo: {
//                     mapping: 'MyOnlineCollection.Photo',
//                     type: RelationshipType.OneToOne,
//                     reverse: 'file'
//                 }
//             }
//         });

//         myOfflineCollection.mapping('User', {
//             attributes: ['username'],
//             indexes: ['username']
//         });

//         myOfflineCollection.install(function (err) {
//             if (err) done(err);
//             finishedCreatingMyOfflineCollection = true;
//             if (finishedCreatingMyOnlineCollection) {
//                 done();
//             }
//         });

//         var finishedCreatingMyOnlineCollection = false;

//         myOnlineCollection = new Collection('MyOnlineCollection');

//         myOnlineCollection.mapping('Photo', {
//             id: 'photoId',
//             attributes: ['height', 'width', 'url'],
//             relationships: {
//                 createdBy: {
//                     mapping: 'User',
//                     type: RelationshipType.OneToMany,
//                     reverse: 'photos'
//                 }
//             }
//         });

//         myOnlineCollection.mapping('User', {
//             id: 'userId',
//             attributes: ['username', 'name']
//         });

//         myOnlineCollection.install(function (err) {
//             if (err) done(err);
//             if (finishedCreatingMyOfflineCollection) {
//                 done();
//             }
//         });
//     });

//     function mapRemoteUsers(callback) {
//         myOnlineCollection.User.map([
//             {username: 'mtford', name: 'Michael Ford', userId: '1'},
//             {username: 'blahblah', name: 'Blah Blah', userId: '2'},
//             {username: 'bobm', name: 'Bob Marley', userId: '3'}
//         ], callback);
//     }

//     function mapRemotePhotos(callback) {
//         myOnlineCollection.Photo.map([
//             {height: 500, width: 500, url: 'http://somewhere/image.jpeg', photoId: '10', createdBy: '1'},
//             {height: 1500, width: 1500, url: 'http://somewhere/image2.jpeg', photoId: '11', createdBy: '1'},
//             {height: 500, width: 750, url: 'http://somewhere/image3.jpeg', photoId: '12', createdBy: '2'}
//         ], callback);
//     }

//     function mapOfflineUsers(callback) {
//         myOfflineCollection.User.map([
//             {username: 'mike'},
//             {username: 'gaz'}
//         ], callback);
//     }

//     function installOfflineFixtures(callback) {
//         mapOfflineUsers(function (err) {
//             if (!err) {
//                 myOfflineCollection.save(callback);
//             }
//             else {
//                 callback(err);
//             }
//         });
//     }

//     function installOnlineFixtures(callback) {
//         async.series([
//             mapRemoteUsers,
//             mapRemotePhotos
//         ], function (err) {
//             if (!err) {
//                 myOnlineCollection.save(callback);
//             }
//             else {
//                 callback(err);
//             }
//         });
//     }

//     describe('can install', function () {
//         it('Can install offline fixtures', function (done) {
//             installOfflineFixtures(function (err) {
//                 if (err) done(err);
//                 assert.notOk(s.ext.storage.changes.allChanges.length);
//                 done();
//             });
//         });

//         it('can install online fixtures', function (done) {
//             installOnlineFixtures(function (err) {
//                 if (err) done(err);
//                 assert.notOk(s.ext.storage.changes.allChanges.length);
//                 done();
//             });
//         });

//         it('can install both', function (done) {
//             installOfflineFixtures(function (err) {
//                 if (err) done(err);
//                 installOnlineFixtures(function (err) {
//                     if (err) done(err);
//                     assert.notOk(s.ext.storage.changes.allChanges.length);
//                     done();
//                 });
//             });
//         })
//     });


//     /**
//      * Execute the integration test. Seperated out into a function so can be executed having manipulated s.ext.storage.Pouch
//      */
//     function tests() {
//         describe('local queries', function () {
//             describe('offline', function () {
//                 it('should return mike when querying for him', function (done) {
//                     myOfflineCollection.User.query({username: 'gaz'}, function (err, users) {
//                         if (err) done(err);
//                         assert.equal(users.length, 1);
//                         assert.equal(users[0].username, 'gaz');
//                         done();
//                     });
//                 });
//             });

//             describe('online', function () {

//                 it('should return 3 users when run a local all query against users', function (done) {
//                     myOnlineCollection.User.all(function (err, users) {
//                         if (err) done(err);
//                         assert.equal(users.length, 3);
//                         done();
//                     });
//                 });

//                 it('should return 3 photos when run a local all query against photos', function (done) {
//                     myOnlineCollection.Photo.all(function (err, photos) {
//                         if (err) done(err);
//                         assert.equal(photos.length, 3);
//                         done();
//                     });
//                 });

//                 it('should return 2 photos with height 500', function (done) {
//                     this.timeout(10000);
//                     myOnlineCollection.Photo.query({height: 500}, function (err, photos) {
//                         if (err) done(err);
//                         assert.equal(photos.length, 2);
//                         _.each(photos, function (p) {
//                             assert.equal(p.height, 500);
//                         });
//                         done();
//                     });
//                 });

//                 it('should return 1 photo with height 500, width, 750', function (done) {
//                     this.timeout(10000);
//                     myOnlineCollection.Photo.query({height: 500, width: 750}, function (err, photos) {
//                         if (err) done(err);
//                         assert.equal(photos.length, 1);
//                         assert.equal(photos[0].height, 500);
//                         assert.equal(photos[0].width, 750);
//                         done();
//                     });
//                 });

//                 it('should be able to query by remote identifier', function (done) {
//                     myOnlineCollection.User.get('1', function (err, user) {
//                         if (err) done(err);
//                         assert.equal(user.userId, '1');
//                         done();
//                     })
//                 })


//             });
//         });
//         describe('relationship mappings', function () {
//             describe('online', function () {
//                 function assertNumPhotos(userId, numPhotos, done) {
//                     myOnlineCollection.User.get(userId, function (err, user) {
//                         if (err) done(err);
//                         assert.ok(user);
//                         assert.equal(user.userId, userId);
//                         var proxy = user.photosProxy;
//                         proxy.get(function (err, photos) {
//                             if (err) done(err);
//                             assert.equal(photos ? photos.length : 0, numPhotos);
//                             done();
//                         });
//                     })
//                 }

//                 it('user with id 1 should have 2 photos', function (done) {
//                     assertNumPhotos('1', 2, done);
//                 });

//                 it('user with id 2 should have 1 photo...', function (done) {
//                     assertNumPhotos('2', 1, done);
//                 });

//                 it('user with id 3 should have no photos', function (done) {
//                     assertNumPhotos('3', 0, done);
//                 });

//             });

//         });
//     }

//     describe('no cache', function () {
//         beforeEach(function (done) {
//             installOfflineFixtures(function (err) {
//                 if (err) done(err);
//                 installOnlineFixtures(function (err) {
//                     if (err) done(err);
//                     cache.reset();
//                     done();
//                 });
//             });
//         });
//         tests();
//     });

// //    describe('cached', function () {
// //        beforeEach(function (done) {
// //            installOfflineFixtures(function (err) {
// //                if (err) done(err);
// //                installOnlineFixtures(done);
// //            });
// //        });
// //        tests();
// //    });


// });
},{}],92:[function(require,module,exports){
// var s = require('../../index')
//     , assert = require('chai').assert;

// describe('perform mapping', function () {


//     var Collection = require('../../src/collection').Collection;
//     var RelationshipType = require('../../src/relationship').RelationshipType;

//     var SiestaModel = require('../../src/object').SiestaModel;
//     var cache = require('../../src/cache');
//     var Operation = require('../../vendor/operations.js/src/operation').Operation;

//     var collection, carMapping, personMapping;

//     beforeEach(function () {
//         collection = null;
//         carMapping = null;
//         personMapping = null;
//         s.reset(true);
//     });

//     afterEach(function () {
//         var numIncomplete = 0;
//         _.each(Operation.running, function (op) {
//             if (!op.completed) {
//                 numIncomplete++;
//             }
//         });
//         assert.notOk(numIncomplete);
//     });


//     describe('no relationships', function () {
//         var obj;

//         beforeEach(function (done) {
//             collection = new Collection('myCollection');
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colour', 'name']
//             });
//             collection.install(function (err) {
//                 if (err) done(err);
//                 carMapping.map({colour: 'red', name: 'Aston Martin', id: 'dfadf'}, function (err, _obj) {
//                     if (err) {
//                         done(err);
//                     }
//                     obj = _obj;
//                     done();
//                 });
//             });
//         });

//         describe('existing in pouch', function () {

//             describe('via id', function () {
//                 var newObj;
//                 beforeEach(function (done) {
//                     var doc = {_id: 'localId', type: 'Car', collection: 'myCollection', colour: 'red', id: 'remoteId'};
//                     s.ext.storage.Pouch.getPouch().put(doc, function (err, doc) {
//                         if (err) done(err);
//                         carMapping.map({colour: 'blue', id: 'remoteId'}, function (err, obj) {
//                             if (err) done(err);
//                             newObj = obj;
//                             done();
//                         });
//                     });

//                 });

//                 it('should be mapped onto the old object', function () {
//                     assert.equal(newObj._id, 'localId');
//                 });

//                 it('should have the new colour', function () {
//                     assert.equal(newObj.colour, 'blue');
//                 });

//             });

//             describe('via _id', function () {
//                 var newObj;
//                 beforeEach(function (done) {
//                     var doc = {_id: 'localId', type: 'Car', collection: 'myCollection', colour: 'red', id: 'remoteId'};
//                     s.ext.storage.Pouch.getPouch().put(doc, function (err, doc) {
//                         if (err) done(err);
//                         carMapping.map({colour: 'blue', _id: 'localId'}, function (err, obj) {
//                             if (err) {
//                                 console.error(err);
//                                 done(err);
//                             }
//                             newObj = obj;
//                             done();
//                         });
//                     });
//                 });

//                 it('should be mapped onto the old object', function () {
//                     assert.equal(newObj._id, 'localId');
//                 });

//                 it('should have the new colour', function () {
//                     assert.equal(newObj.colour, 'blue');
//                 });
//                 it('obj removed from cache should not have the new colour', function () {
//                     assert.notEqual(obj.colour, 'blue');
//                 });
//             });
//         });


//     });

//     describe('with relationship', function () {

//         describe('foreign key', function () {
//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age']
//                 });
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colour', 'name'],
//                     relationships: {
//                         owner: {
//                             mapping: 'Person',
//                             type: RelationshipType.OneToMany,
//                             reverse: 'cars'
//                         }
//                     }
//                 });
//                 collection.install(done);
//             });

//             describe('faulted relationship', function () {
//                 var person, car;

//                 beforeEach(function (done) {
//                     var doc = {name: 'Michael Ford', age: 23, id: 'personRemoteId', collection: 'myCollection', type: 'Person', _id: 'personLocalId'};
//                     s.ext.storage.Pouch.getPouch().put(doc, function (err) {
//                         if (err) done(err);
//                         carMapping.map({name: 'Bentley', colour: 'black', owner: 'personRemoteId', id: 'carRemoteId'}, function (err, _car) {
//                             if (err) {
//                                 done(err);
//                             }
//                             car = _car;
//                             person = car.owner;
//                             done();
//                         });
//                     });

//                 });

//                 it('should have mapped onto Michael', function () {
//                     assert.equal(person.name, 'Michael Ford');
//                     assert.equal(person.age, 23);
//                 });

//             });

//         });


//     });


  
//     describe('bulk', function () {
//         describe('new', function () {
//             describe('no relationships', function () {
//                 beforeEach(function (done) {
//                     collection = new Collection('myCollection');
//                     carMapping = collection.mapping('Car', {
//                         id: 'id',
//                         attributes: ['colour', 'name']
//                     });
//                     collection.install(done);
//                 });

//                 it('all valid', function (done) {
//                     var raw = [
//                         {colour: 'red', name: 'Aston Martin', id: 'remoteId1sdfsdfdsfgsdf'},
//                         {colour: 'blue', name: 'Lambo', id: "remoteId2dfgdfgdfg"},
//                         {colour: 'green', name: 'Ford', id: "remoteId3dfgdfgdfgdfg"}
//                     ];
//                     carMapping._mapBulk(raw, function (err, objs) {
//                         if (err) done(err);
//                         assert.equal(objs.length, raw.length);
//                         assert.equal(objs[0].colour, 'red');
//                         assert.equal(objs[1].colour, 'blue');
//                         assert.equal(objs[2].colour, 'green');
//                         done();
//                     })
//                 });
//             });
//             describe('foreign key', function () {
//                 var personMapping;

//                 beforeEach(function (done) {
//                     collection = new Collection('myCollection');
//                     personMapping = collection.mapping('Person', {
//                         id: 'id',
//                         attributes: ['name', 'age']
//                     });
//                     carMapping = collection.mapping('Car', {
//                         id: 'id',
//                         attributes: ['colour', 'name'],
//                         relationships: {
//                             owner: {
//                                 mapping: 'Person',
//                                 type: RelationshipType.OneToMany,
//                                 reverse: 'cars'
//                             }
//                         }
//                     });
//                     collection.install(done);
//                 });

//                 it('same owner using _mapBulk', function (done) {
//                     var ownerId = 'ownerId462345345';
//                     var raw = [
//                         {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: ownerId},
//                         {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: ownerId},
//                         {colour: 'green', name: 'Ford', id: "remoteId3", owner: ownerId}
//                     ];
//                     carMapping._mapBulk(raw, function (err, objs) {
//                         if (err) done(err);
//                         assert.equal(objs.length, raw.length);
//                         assert.equal(objs[0].owner, objs[1].owner);
//                         assert.equal(objs[1].owner, objs[2].owner);
//                         done();
//                     })
//                 });

//                 it('same owner using map', function (done) {
//                     var ownerId = 'ownerId!!!334';
//                     var carRaw1 = {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: ownerId};
//                     var carRaw2 = {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: ownerId};
//                     carMapping.map(carRaw1, function (err, car1) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             carMapping.map(carRaw2, function (err, car2) {
//                                 if (err) done(err);
//                                 assert.equal(car1.owner, car2.owner);
//                                 done();
//                             })
//                         }
//                     });
//                 })
//             })
//         });

//         describe('faulted relationships', function () {
//             var cars;

//             var personMapping;

//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');
//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age']
//                 });
//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['colour', 'name'],
//                     relationships: {
//                         owner: {
//                             mapping: 'Person',
//                             type: RelationshipType.OneToMany,
//                             reverse: 'cars'
//                         }
//                     }
//                 });
//                 collection.install(done);
//             });


//             describe('via remote id', function () {
//                 beforeEach(function (done) {
//                     personMapping.map({name: 'Michael Ford', age: 23, id: 'personRemoteId'}, function (err) {
//                         if (err) done(err);
//                         cache.reset();
//                         var raw = [
//                             {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: 'personRemoteId'},
//                             {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: 'personRemoteId'},
//                             {colour: 'green', name: 'Ford', id: "remoteId3", owner: 'personRemoteId'}
//                         ];
//                         carMapping._mapBulk(raw, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             cars = objs;
//                             done();
//                         });

//                     });
//                 });

//                 it('should have mapped onto Michael', function () {
//                     assert.equal(cars.length, 3);
//                     assert.equal(cars[0].owner, cars[1].owner);
//                     assert.equal(cars[1].owner, cars[2].owner);
//                 });

//             });


//             describe('bulk bulk', function () {
//                 beforeEach(function (done) {
//                     cars = [];
//                     personMapping.map({name: 'Michael Ford', age: 23, id: 'personRemoteId'}, function (err) {
//                         if (err) done(err);
//                         cache.reset();
//                         var raw1 = [
//                             {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: 'personRemoteId'},
//                             {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: 'personRemoteId'},
//                             {colour: 'green', name: 'Ford', id: "remoteId3", owner: 'personRemoteId'}
//                         ];
//                         carMapping._mapBulk(raw1, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             _.each(objs, function (o) {
//                                 cars.push(o);
//                             });
//                             if (cars.length == 9) {
//                                 done();
//                             }
//                         });
//                         var raw2 = [
//                             {colour: 'red', name: 'Peauget', id: 'remoteId4', owner: 'personRemoteId'},
//                             {colour: 'blue', name: 'Chevy', id: "remoteId5", owner: 'personRemoteId'},
//                             {colour: 'green', name: 'Ford', id: "remoteId6", owner: 'personRemoteId'}
//                         ];
//                         carMapping._mapBulk(raw2, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             _.each(objs, function (o) {
//                                 cars.push(o);
//                             });
//                             if (cars.length == 9) {
//                                 done();
//                             }
//                         });
//                         var raw3 = [
//                             {colour: 'red', name: 'Ferarri', id: 'remoteId7', owner: 'personRemoteId'},
//                             {colour: 'blue', name: 'Volvo', id: "remoteId8", owner: 'personRemoteId'},
//                             {colour: 'green', name: 'Dodge', id: "remoteId9", owner: 'personRemoteId'}
//                         ];
//                         carMapping._mapBulk(raw3, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             _.each(objs, function (o) {
//                                 cars.push(o);
//                             });
//                             console.log(cars.length);
//                             if (cars.length == 9) {
//                                 done();
//                             }
//                         });

//                     });
//                 });

//                 it('should have mapped onto Michael', function () {
//                     assert.equal(cars.length, 9);
//                     for (var i = 0; i < 8; i++) {
//                         assert.equal(cars[i].owner, cars[i + 1].owner);
//                     }
//                 });

//             });

//             describe('via nested remote id', function () {
//                 beforeEach(function (done) {
//                     personMapping.map({name: 'Michael Ford', age: 23, id: 'personRemoteId'}, function (err) {
//                         if (err) done(err);
//                         cache.reset();
//                         var raw = [
//                             {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: {id: 'personRemoteId'}},
//                             {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: {id: 'personRemoteId'}},
//                             {colour: 'green', name: 'Ford', id: "remoteId3", owner: {id: 'personRemoteId'}}
//                         ];
//                         carMapping._mapBulk(raw, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             cars = objs;
//                             done();
//                         });

//                     });
//                 });

//                 it('should have mapped onto Michael', function () {
//                     assert.equal(cars.length, 3);
//                     assert.equal(cars[0].owner, cars[1].owner);
//                     assert.equal(cars[1].owner, cars[2].owner);
//                 });

//             });

//             describe('via nested remote id with unmergedChanges', function () {
//                 this.timeout(5000);
//                 beforeEach(function (done) {
//                     personMapping.map({name: 'Michael Ford', age: 23, id: 'personRemoteId'}, function (err) {
//                         if (err) done(err);
//                         cache.reset();
//                         var raw = [
//                             {colour: 'red', name: 'Aston Martin', id: 'remoteId1', owner: {id: 'personRemoteId'}},
//                             {colour: 'blue', name: 'Lambo', id: "remoteId2", owner: {id: 'personRemoteId', name: 'Bob'}},
//                             {colour: 'green', name: 'Ford', id: "remoteId3", owner: {id: 'personRemoteId'}}
//                         ];
//                         carMapping._mapBulk(raw, function (err, objs, res) {
//                             if (err) {
//                                 done(err);
//                             }
//                             cars = objs;
//                             done();
//                         });

//                     });
//                 });

//                 it('should have mapped onto Michael', function () {
//                     assert.equal(cars.length, 3);
//                     assert.equal(cars[0].owner, cars[1].owner);
//                     assert.equal(cars[1].owner, cars[2].owner);
//                 });
//                 it('should have changed the name', function () {
//                     assert.equal(cars[0].owner.name, 'Bob');
//                     assert.equal(cars[1].owner.name, 'Bob');
//                     assert.equal(cars[2].owner.name, 'Bob');
//                 });

//             })

//         });


//     });
// });
},{}],93:[function(require,module,exports){
// var s = require('../../index'),
//     assert = require('chai').assert;

// describe('performance', function() {

//     var Collection = require('../../src/collection').Collection;
//     var cache = require('../../src/cache');
//     var collection;
//     var Repo, User, Fork, Follow;

//     beforeEach(function(done) {
//         s.reset(true);
//         collection = new Collection('MyCollection');
//         collection.baseURL = 'https://api.github.com';
//         Repo = collection.mapping('Repo', {
//             id: 'id',
//             attributes: ['name', 'full_name', 'description', 'html_url', 'watchers_count', 'stargazers_count', 'forks'],
//             relationships: {
//                 owner: {
//                     mapping: 'User',
//                     type: 'OneToMany',
//                     reverse: 'repositories'
//                 }
//             }
//         });
//         Fork = collection.mapping('Fork', {
//             relationships: {
//                 source: {
//                     mapping: 'Repo',
//                     type: 'OneToMany',
//                     reverse: 'forked_to'
//                 },
//                 fork: {
//                     mapping: 'Repo',
//                     type: 'OneToOne',
//                     reverse: 'forked_from'
//                 }
//             }
//         });
//         Follow = collection.mapping('Follow', {
//             relationships: {
//                 followed: {
//                     mapping: 'User',
//                     type: 'OneToMany',
//                     reverse: 'followers'
//                 },
//                 follower: {
//                     mapping: 'User',
//                     type: 'OneToMany',
//                     reverse: 'following'
//                 }
//             }
//         });
//         User = collection.mapping('User', {
//             id: 'id',
//             attributes: ['login', 'avatar_url']
//         });
//         collection.install(done);
//     });

//     describe('fresh database', function() {

//         /**
//          * On Mike's Mac, 3.4ghz Intel Core i5, 16gb 1600Mhz DDR3, OSX 10.9.3, logging disabled:
//          *    - 11/9/2014 13:16: 2.415 secs
//          *    - 12/9/2014 08:36: 1.084 secs
//          *    - 13/9/2014 08:46: 0.53 secs
//          *
//          * On Mike's MacBook Air, 1.7 GHz Intel Core i5, 4 GB 1333 MHz DDR3, OSX 10.10 Beta, logging disabled:
//          *    - 26/9/2014 11:42: 0.987 secs
//          */
//         it('xyz', function(done) {
//             this.timeout(10000);
//             var json = require('./repos').repos;
//             Repo.map(json, done);
//         });

//         it('store', function(done) {
//             this.timeout(10000);
//             var json = require('./repos').repos;
//             Repo.map(json, function(err, objs) {
//                 if (err) done(err);
//                 siesta.save(function(err) {
//                     if (err) done(err);
//                     cache.reset();
//                     var idents = _.pluck(objs, 'id');
//                     var results = {
//                         cached: {},
//                         notCached: idents
//                     };
//                     siesta.ext.storage.store.getMultipleRemoteFrompouch(Repo, idents, results, function() {
//                         assert.equal(30, Object.keys(results.cached).length);
//                         assert.notOk(results.notCached.length);
//                         done();
//                     });
//                 });
//             });
//         });

//         it('fork', function(done) {
//             this.timeout(8000);
//             var repos = require('./repos').repos;
//             Repo.map(repos, function(err, objs) {
//                 if (err) done(err);
//                 var forks = require('./repos').forks;
//                 var rawFork = _.map(forks, function(f) {
//                     return {
//                         fork: f,
//                         source: {
//                             _id: objs[0]._id
//                         }
//                     };
//                 });
//                 Fork.map(rawFork, function(err, forks) {
//                     if (err) done(err);
//                     assert.equal(forks.length, 6);
//                     for (var i = 0; i < forks.length; i++) {
//                         var fork = forks[i];
//                         assert.equal(fork.source, objs[0]);
//                     }
//                     done();
//                 });
//             });
//         });

//         it('follow', function(done) {
//             this.timeout(8000);
//             var repos = require('./repos').repos;
//             Repo.map(repos, function(err, objs) {
//                 if (err) done(err);
//                 var user = objs[0].owner;

//                 Follow.map(require('./repos').follows, function(err, followers) {
//                     done();
//                 });
//             });
//         });

//         describe('proxies', function() {
//             describe('User', function() {
//                 it('followersProxy', function() {
//                     User.map({id: '5'}, function(err, obj) {
//                         assert.ok(obj['followersProxy']);
//                     });
//                 });

//                 it('followingProxy', function() {
//                       User.map({id: '5'}, function(err, obj) {
//                         assert.ok(obj['followingProxy']);
//                     });
//                 });
//             });


    

//         });


//     });


// });
},{}],94:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;


// describe('pouch doc adapter', function () {

//     var Collection = require('../src/collection').Collection;

//     var InternalSiestaError = require('../src/error').InternalSiestaError;
//     var RelationshipType = require('../src/relationship').RelationshipType;

//     var SiestaModel = require('../src/object').SiestaModel;
//     var cache = require('../src/cache');
//     var coreChanges = require('../src/changes');
//     var ChangeType = coreChanges.ChangeType;

//     beforeEach(function () {
//         s.reset(true);
//     });

//     describe('from pouch to siesta', function () {
//         describe('new', function () {

//             describe('simple', function () {
//                 var collection;
//                 beforeEach(function (done) {
//                     collection = new Collection('myCollection');
//                     collection.mapping('Person', {
//                         id: 'id',
//                         attributes: ['name', 'age'],
//                         indexes: ['name', 'age']
//                     });
//                     collection.install(done);
//                 });

//                 it('absorbs properties', function () {
//                     var doc = {name: 'Michael', type: 'Person', collection: 'myCollection', age: 23, _id: 'randomId', _rev: 'randomRev'};
//                     var obj = s.ext.storage.Pouch.toNew(doc);
//                     assert.equal(obj.name, 'Michael');
//                     assert.equal(obj.age, 23);
//                     assert.ok(obj.isSaved);
//                 });

//             });

//         });

//         describe('toSiesta', function () {

//             var collection, personMapping;

//             beforeEach(function (done) {
//                 collection = new Collection('MyOnlineCollection');
//                 personMapping = collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['age', 'name']
//                 });
//                 collection.install(done);
//             });

//             it('existing', function (done) {
//                 var doc = {name: 'Michael', age: 12, _id: 'localId', collection: 'MyOnlineCollection', type: 'Person'};
//                 s.ext.storage.Pouch.getPouch().put(doc, function (err, resp) {
//                     if (err) done(err);
//                     collection.Person.map({_id: 'localId', age: 23}, function (err, person) {
//                         if (err) done(err);
//                         assert.equal(person._id, doc._id);
//                         collection.save(function (err) {
//                             if (err) done(err);
//                             s.ext.storage.Pouch.getPouch().get(person._id, function (err, doc) {
//                                 if (err) done(err);
//                                 var objs = s.ext.storage.Pouch.toSiesta([doc]);
//                                 assert.equal(objs.length, 1);
//                                 assert.equal(objs[0], person);
//                                 done();
//                             });
//                         });
//                     });
//                 });
//             });

//             it('new', function (done) {
//                 collection.Person.map({name: 'Michael', age: 23}, function (err, person) {
//                     if (err) done(err);
//                     collection.save(function (err) {
//                         if (err) done(err);
//                         s.ext.storage.Pouch.getPouch().get(person._id, function (err, doc) {
//                             if (err) done(err);
//                             doc._id = 'randomid';
//                             doc._rev = 'randomrev';
//                             doc.id = 'randomremoteid';
//                             if (err) done(err);
//                             var objs = s.ext.storage.Pouch.toSiesta([doc]);
//                             assert.equal(objs.length, 1);
//                             assert.notEqual(objs[0], person);
//                             assert.instanceOf(objs[0], SiestaModel);
//                             done();
//                         });
//                     });
//                 });
//             });

//             it('cached', function (done) {
//                 collection.Person.map({name: 'Michael', age: 23, id: '2'}, function (err, person) {
//                     if (err) done(err);
//                     collection.save(function (err) {
//                         if (err) done(err);
//                         s.ext.storage.Pouch.getPouch().get(person._id, function (err, doc) {
//                             if (err) done(err);
//                             var objs = s.ext.storage.Pouch.toSiesta([doc]);
//                             assert.equal(objs.length, 1);
//                             assert.equal(objs[0], person);
//                             assert.instanceOf(objs[0], SiestaModel);
//                             done();
//                         });
//                     });
//                 });
//             })


//         });

//         describe('validation', function () {
//             it('No API field', function () {
//                 assert.throw(_.bind(s.ext.storage.Pouch._validate, s.ext.storage.Pouch, {type: 'Car'}), InternalSiestaError);
//             });

//             it('No type field', function (done) {
//                 var collection = new Collection('myCollection');
//                 collection.install(function (err) {
//                     if (err) done(err);
//                     assert.throw(_.bind(s.ext.storage.Pouch._validate, s.ext.storage.Pouch, {collection: 'myCollection'}), InternalSiestaError);
//                     done();
//                 });
//             });

//             it('non existent API', function () {
//                 assert.throw(_.bind(s.ext.storage.Pouch._validate, s.ext.storage.Pouch, {collection: 'myCollection', type: 'Car'}), InternalSiestaError);
//             });

//             it('non existent type', function (done) {
//                 var collection = new Collection('myCollection');
//                 collection.install(function (err) {
//                     if (err) done(err);
//                     assert.throw(_.bind(s.ext.storage.Pouch._validate, s.ext.storage.Pouch, {collection: 'myCollection', type: 'Car'}), InternalSiestaError);
//                     done();
//                 });
//             });

//             it('valid', function (done) {
//                 var collection = new Collection('myCollection');
//                 collection.mapping('Person', {
//                     id: 'id',
//                     attributes: ['name', 'age'],
//                     indexes: ['name', 'age']
//                 });
//                 collection.install(function (err) {
//                     if (err) done(err);
//                     var mapping = s.ext.storage.Pouch._validate({name: 'Michael', type: 'Person', collection: 'myCollection', age: 23});
//                     assert.ok(mapping);
//                     done();
//                 });
//             });

//         });

//         describe('changes', function () {
//             var collection, carMapping;
//             beforeEach(function (done) {
//                 collection = new Collection('myCollection');

//                 carMapping = collection.mapping('Car', {
//                     id: 'id',
//                     attributes: ['name', 'colour']
//                 });
//                 collection.install(done);

//             });

//             it('pouch adapter should apply unmerged s.ext.storage.changes', function (done) {
//                 var doc = {
//                     collection: 'myCollection',
//                     type: 'Car',
//                     colour: 'red',
//                     _id: 'localId',
//                     name: 'Aston Martin'
//                 };
//                 s.ext.storage.Pouch.getPouch().put(doc, function (err, resp) {
//                     if (err) done(err);
//                     doc._rev = resp.rev;
//                     s.ext.storage.changes.registerChange({
//                         collection: collection._name,
//                         mapping: carMapping.type,
//                         field: 'colour',
//                         type: ChangeType.Set,
//                         new: 'blue',
//                         old: 'red',
//                         _id: 'localId'
//                     });
//                     s.ext.storage.changes.registerChange({
//                         collection: collection._name,
//                         mapping: carMapping.type,
//                         field: 'name',
//                         type: ChangeType.Set,
//                         new: 'Bentley',
//                         old: 'Aston Martin',
//                         _id: 'localId'
//                     });
//                     var models = s.ext.storage.Pouch.toSiesta([doc]);
//                     assert.equal(models[0].colour, 'blue');
//                     assert.equal(models[0].name, 'Bentley');
//                     done();
//                 });

//             });
//         });


//     });

//     describe('from siesta to pouch', function () {

//         var collection, personMapping, carMapping;

//         beforeEach(function (done) {
//             collection = new Collection('myCollection');
//             personMapping = collection.mapping('Person', {
//                 id: 'id',
//                 attributes: ['name', 'age'],
//                 indexes: ['name', 'age']
//             });
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['name', 'colour'],
//                 relationships: {
//                     owner: {
//                         mapping: 'Person',
//                         type: RelationshipType.OneToMany,
//                         reverse: 'cars'
//                     }
//                 }
//             });
//             collection.install(done);
//         });

//         it('should convert objects with no relationships successfully', function (done) {
//             personMapping.map({name: 'Michael', age: 23, id: 'xyz'}, function (err, person) {
//                 if (err) done(err);
//                 var adapted = s.ext.storage.Pouch.from(person);
//                 assert.equal(adapted.name, 'Michael');
//                 assert.equal(adapted.age, 23);
//                 assert.equal(adapted.id, 'xyz');
//                 assert.equal(adapted._id, person._id);
//                 assert.equal(adapted.type, person.mapping.type);
//                 assert.equal(adapted.collection, person.collection);
//                 done();
//             });
//         });

//         it('should convert objects with relationship successfully', function (done) {
//             personMapping.map({name: 'Michael', age: 23, id: 'xyz'}, function (err, person) {
//                 if (err) done(err);
//                 carMapping.map({name: 'Aston Martin', id: 'xyz123', owner: {_id: person._id}}, function (err, car) {
//                     if (err) done(err);
//                     var adapted = s.ext.storage.Pouch.from(car);
//                     assert.equal(adapted.name, 'Aston Martin');
//                     assert.equal(adapted.id, 'xyz123');
//                     assert.equal(adapted._id, car._id);
//                     assert.equal(adapted.type, car.mapping.type);
//                     assert.equal(adapted.collection, car.collection);
//                     assert.equal(adapted.owner, person._id);
//                     done();
//                 });
//             });

//         });


//     });

// });
},{}],95:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('new object proxy', function () {

//     var RelationshipProxy = require('../src/proxy').RelationshipProxy;
//     var OneToOneProxy = require('../src/oneToOneProxy').OneToOneProxy;
//     var OneToManyProxy = require('../src/oneToManyProxy').OneToManyProxy;
//     var ManyToManyProxy = require('../src/manyToManyProxy').ManyToManyProxy;
//     var SiestaModel = require('../src/object').SiestaModel;
//     var Fault = require('../src/proxy').Fault;
//     var InternalSiestaError = require('../src/error').InternalSiestaError;
//     var Collection = require('../src/collection').Collection;
//     var cache = require('../src/cache');
//     var ChangeType = require('../src/changes').ChangeType;

//     var carMapping, personMapping;

//     var collection;

//     beforeEach(function (done) {
//         s.reset(true);
//         collection = new Collection('myCollection');
//         carMapping = collection.mapping('Car', {
//             id: 'id',
//             attributes: ['colour', 'name']
//         });
//         personMapping = collection.mapping('Person', {
//             id: 'id',
//             attributes: ['name', 'age']
//         });
//         collection.install(done);
//     });

//     describe('foreign key', function () {
//         var carProxy, personProxy;
//         var car, person;

//         describe('get', function () {
//             beforeEach(function () {
//                 carProxy = new OneToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owner'
//                 });
//                 personProxy = new OneToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owner'
//                 });
//                 car = new SiestaModel(carMapping);
//                 car._id = 'car';
//                 carProxy.install(car);
//                 person = new SiestaModel(personMapping);
//                 person._id = 'person';
//                 personProxy.install(person);
//                 cache.insert(person);
//                 cache.insert(car);
//             });


//         });

//         describe('set', function () {
//             var carProxy, personProxy;
//             var car, person;
//             beforeEach(function () {
//                 carProxy = new OneToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owner'
//                 });
//                 personProxy = new OneToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owner'
//                 });
//                 car = new SiestaModel(carMapping);
//                 car._id = 'car';
//                 carProxy.install(car);
//                 carProxy.isFault = false;
//                 person = new SiestaModel(personMapping);
//                 person._id = 'person';
//                 personProxy.install(person);
//                 personProxy.isFault = false;
//             });
       
//             describe('pre-existing', function () {

//                 var anotherPerson, anotherPersonProxy;

//                 beforeEach(function () {
//                     anotherPerson = new SiestaModel(personMapping);
//                     anotherPerson._id = 'anotherPerson';
//                     anotherPersonProxy = new OneToManyProxy({
//                         reverseMapping: personMapping,
//                         forwardMapping: carMapping,
//                         reverseName: 'cars',
//                         forwardName: 'owner'
//                     });
//                     anotherPersonProxy.install(anotherPerson);
//                     anotherPersonProxy.isFault = false;
//                     cache.insert(anotherPerson);
//                     cache.insert(person);
//                     cache.insert(car);
//                 });

//                 describe('no fault', function () {
//                     beforeEach(function () {
//                         car.owner = anotherPerson;
//                     });
//                     describe('forward', function () {

//                         it('generates correct s.ext.storage.changes', function () {
//                             car.owner = person;
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.equal(personChange.index, 0);
//                             assert.equal(personChange.added.length, 1);
//                             assert.include(personChange.added, car);
//                             assert.equal(personChange.addedId.length, 1);
//                             assert.include(personChange.addedId, car._id);
//                             assert.equal(personChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1, 'First change addedId populated');
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.index, 0);
//                             assert.equal(secondAnotherPersonChange.added.length, 0);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owner');
//                             assert.equal(secondCarChange.new, person);
//                             assert.equal(secondCarChange.newId, person._id);
//                             assert.equal(secondCarChange.old, anotherPerson);
//                             assert.equal(secondCarChange.oldId, anotherPerson._id);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owner');
//                             assert.equal(firstCarChange.newId, anotherPerson._id);
//                             assert.equal(firstCarChange.new, anotherPerson);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });

//                     });
//                     describe('backwards', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             person.cars = [car];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.notOk(personChange.old);
//                             assert.notOk(personChange.oldId);
//                             assert.equal(personChange.new.length, 1);
//                             assert.equal(personChange.newId.length, 1);
//                             assert.include(personChange.newId, car._id);
//                             assert.include(personChange.new, car);
//                             assert.equal(personChange.type, ChangeType.Set);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.removedId.length, 0);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.index, 0);
//                             assert.equal(secondAnotherPersonChange.added.length, 0);
//                             assert.equal(secondAnotherPersonChange.addedId.length, 0);
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owner');
//                             assert.equal(secondCarChange.newId, person._id);
//                             assert.equal(secondCarChange.new, person);
//                             assert.equal(secondCarChange.old, anotherPerson);
//                             assert.equal(secondCarChange.oldId, anotherPerson._id);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owner');
//                             assert.equal(firstCarChange.new, anotherPerson);
//                             assert.equal(firstCarChange.newId, anotherPerson._id);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });
//                     });
//                 });

//                 describe('fault', function () {
//                     beforeEach(function () {
//                         car.owner = anotherPerson;
//                         carProxy.related = undefined;
//                         anotherPersonProxy.related = undefined;
//                     });
//                     describe('forward', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             car.owner = person;
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.equal(personChange.index, 0);
//                             assert.equal(personChange.addedId.length, 1);
//                             assert.include(personChange.addedId, car._id);
//                             assert.equal(personChange.added.length, 1);
//                             assert.include(personChange.added, car);
//                             assert.equal(personChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Delete);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owner');
//                             assert.equal(secondCarChange.new, person);
//                             // Due to the fault.
//                             assert.notOk(secondCarChange.old);
//                             assert.equal(secondCarChange.newId, person._id);
//                             assert.equal(secondCarChange.oldId, anotherPerson._id);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owner');
//                             assert.equal(firstCarChange.newId, anotherPerson._id);
//                             assert.equal(firstCarChange.new, anotherPerson);
//                             assert.notOk(firstCarChange.old);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });

//                     });
//                     describe('backwards', function () {

//                         it('generates correct s.ext.storage.changes', function () {
//                             person.cars = [car];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.notOk(personChange.old);
//                             assert.equal(personChange.newId.length, 1);
//                             assert.include(personChange.newId, car._id);
//                             assert.equal(personChange.new.length, 1);
//                             assert.include(personChange.new, car);
//                             assert.equal(personChange.newId.length, 1);
//                             assert.include(personChange.newId, car._id);
//                             assert.equal(personChange.type, ChangeType.Set);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.removedId.length, 0);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Delete);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owner');
//                             assert.equal(secondCarChange.newId, person._id);
//                             assert.equal(secondCarChange.oldId, anotherPerson._id);
//                             assert.equal(secondCarChange.new, person);
//                             // Due to fault.
//                             assert.notOk(secondCarChange.old);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owner');
//                             assert.equal(firstCarChange.newId, anotherPerson._id);
//                             assert.equal(firstCarChange.new, anotherPerson);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });

//                     });
//                 });


//             });
//         });



//     });

//     describe('many to many', function () {
//         var carProxy, personProxy;
//         var car, person;

//         describe('get', function () {
//             beforeEach(function () {
//                 carProxy = new ManyToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owners'
//                 });
//                 personProxy = new ManyToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owners'
//                 });
//                 car = new SiestaModel(carMapping);
//                 car._id = 'car';
//                 carProxy.install(car);
//                 person = new SiestaModel(personMapping);
//                 person._id = 'person';
//                 personProxy.install(person);
//                 cache.insert(person);
//                 cache.insert(car);
//             });


//         });

//         describe('set', function () {
//             var carProxy, personProxy;
//             var car, person;
//             beforeEach(function () {
//                 carProxy = new ManyToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owners'
//                 });
//                 personProxy = new ManyToManyProxy({
//                     reverseMapping: personMapping,
//                     forwardMapping: carMapping,
//                     reverseName: 'cars',
//                     forwardName: 'owners'
//                 });
//                 car = new SiestaModel(carMapping);
//                 car._id = 'car';
//                 carProxy.install(car);
//                 carProxy.isFault = false;
//                 person = new SiestaModel(personMapping);
//                 person._id = 'person';
//                 personProxy.install(person);
//                 personProxy.isFault = false;
//             });

//             describe('pre-existing', function () {

//                 var anotherPerson, anotherPersonProxy;

//                 beforeEach(function () {
//                     anotherPerson = new SiestaModel(personMapping);
//                     anotherPerson._id = 'anotherPerson';
//                     anotherPersonProxy = new ManyToManyProxy({
//                         reverseMapping: personMapping,
//                         forwardMapping: carMapping,
//                         reverseName: 'cars',
//                         forwardName: 'owners'
//                     });
//                     anotherPersonProxy.install(anotherPerson);
//                     anotherPersonProxy.isFault = false;
//                     cache.insert(anotherPerson);
//                     cache.insert(person);
//                     cache.insert(car);
//                 });

//                 describe('no fault', function () {
//                     beforeEach(function () {
//                         car.owners = [anotherPerson];
//                     });

//                     describe('forward', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             car.owners = [person];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.equal(personChange.index, 0);
//                             assert.equal(personChange.addedId.length, 1);
//                             assert.include(personChange.addedId, car._id);
//                             assert.equal(personChange.added.length, 1);
//                             assert.include(personChange.added, car);
//                             assert.equal(personChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.index, 0);
//                             assert.equal(secondAnotherPersonChange.added.length, 0);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owners');
//                             assert.equal(secondCarChange.old.length, 1);
//                             assert.equal(secondCarChange.new.length, 1);
//                             assert.include(secondCarChange.new, person);
//                             assert.equal(secondCarChange.newId.length, 1);
//                             assert.include(secondCarChange.newId, person._id);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owners');
//                             assert.equal(firstCarChange.new.length, 1);
//                             assert.include(firstCarChange.new, anotherPerson);
//                             assert.equal(firstCarChange.newId.length, 1);
//                             assert.include(firstCarChange.newId, anotherPerson._id);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });

//                     });

//                     describe('backwards', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             person.cars = [car];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 1);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.notOk(personChange.old);
//                             assert.equal(personChange.new.length, 1);
//                             assert.include(personChange.new, car);
//                             assert.equal(personChange.newId.length, 1);
//                             assert.include(personChange.newId, car._id);
//                             assert.equal(personChange.type, ChangeType.Set);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.removedId.length, 0);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owners');
//                             assert.equal(secondCarChange.index, 1);
//                             assert.equal(secondCarChange.type, ChangeType.Splice);
//                             assert.include(secondCarChange.added, person);
//                             assert.include(secondCarChange.addedId, person._id);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owners');
//                             assert.include(firstCarChange.new, anotherPerson);
//                             assert.include(firstCarChange.newId, anotherPerson._id);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                         });
//                     });
//                 });

//                 describe('fault', function () {
//                     beforeEach(function () {
//                         car.owners = [anotherPerson];
//                         carProxy.related = undefined;
//                         anotherPersonProxy.related = undefined;
//                     });
//                     describe('forward', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             car.owners = [person];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 2);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             var secondAnotherPersonChange = anotherPersonChanges[1];
//                             assert.equal(personChange.type, ChangeType.Splice);
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.equal(personChange.index, 0);
//                             assert.equal(personChange.addedId.length, 1);
//                             assert.include(personChange.addedId, car._id);
//                             assert.equal(personChange.added.length, 1);
//                             assert.include(personChange.added, car);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.equal(firstAnotherPersonChange.removedId.length, 0);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(secondAnotherPersonChange.type, ChangeType.Delete);
//                             assert.equal(secondAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(secondAnotherPersonChange.mapping, 'Person');
//                             assert.equal(secondAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(secondAnotherPersonChange.field, 'cars');
//                             assert.equal(secondAnotherPersonChange.removed.length, 1);
//                             assert.include(secondAnotherPersonChange.removed, car);
//                             assert.equal(secondAnotherPersonChange.removedId.length, 1);
//                             assert.include(secondAnotherPersonChange.removedId, car._id);
//                             assert.equal(secondCarChange.type, ChangeType.Set);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owners');
//                             assert.equal(secondCarChange.oldId.length, 1);
//                             assert.equal(secondCarChange.newId.length, 1);
//                             assert.include(secondCarChange.new, person);
//                             assert.include(secondCarChange.newId, person._id);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owners');
//                             assert.equal(firstCarChange.new.length, 1);
//                             assert.equal(firstCarChange.newId.length, 1);
//                             assert.include(firstCarChange.new, anotherPerson);
//                             assert.include(firstCarChange.newId, anotherPerson._id);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                         });

//                     });

//                     describe('backwards', function () {
//                         it('generates correct s.ext.storage.changes', function () {
//                             person.cars = [car];
//                             var carChanges = s.ext.storage.changes.changesForIdentifier(car._id);
//                             assert.equal(carChanges.length, 2);
//                             var personChanges = s.ext.storage.changes.changesForIdentifier(person._id);
//                             assert.equal(personChanges.length, 1);
//                             var anotherPersonChanges = s.ext.storage.changes.changesForIdentifier(anotherPerson._id);
//                             assert.equal(anotherPersonChanges.length, 1);
//                             var personChange = personChanges[0];
//                             var firstCarChange = carChanges[0];
//                             var secondCarChange = carChanges[1];
//                             var firstAnotherPersonChange = anotherPersonChanges[0];
//                             assert.equal(personChange.type, ChangeType.Set);
//                             assert.equal(personChange.collection, 'myCollection');
//                             assert.equal(personChange.mapping, 'Person');
//                             assert.equal(personChange._id, person._id);
//                             assert.equal(personChange.field, 'cars');
//                             assert.notOk(personChange.old);
//                             assert.equal(personChange.new.length, 1);
//                             assert.equal(personChange.newId.length, 1);
//                             assert.include(personChange.newId, car._id);
//                             assert.include(personChange.new, car);
//                             assert.equal(firstAnotherPersonChange.type, ChangeType.Splice);
//                             assert.equal(firstAnotherPersonChange.collection, 'myCollection');
//                             assert.equal(firstAnotherPersonChange.mapping, 'Person');
//                             assert.equal(firstAnotherPersonChange._id, anotherPerson._id);
//                             assert.equal(firstAnotherPersonChange.field, 'cars');
//                             assert.equal(firstAnotherPersonChange.index, 0);
//                             assert.equal(firstAnotherPersonChange.added.length, 1);
//                             assert.equal(firstAnotherPersonChange.addedId.length, 1);
//                             assert.include(firstAnotherPersonChange.addedId, car._id);
//                             assert.include(firstAnotherPersonChange.added, car);
//                             assert.equal(firstAnotherPersonChange.removed.length, 0);
//                             assert.equal(firstAnotherPersonChange.removedId.length, 0);
//                             assert.equal(secondCarChange.type, ChangeType.Splice);
//                             assert.equal(secondCarChange.collection, 'myCollection');
//                             assert.equal(secondCarChange.mapping, 'Car');
//                             assert.equal(secondCarChange._id, car._id);
//                             assert.equal(secondCarChange.field, 'owners');
//                             assert.equal(secondCarChange.index, 1);
//                             assert.include(secondCarChange.addedId, person._id);
//                             assert.include(secondCarChange.added, person);
//                             assert.equal(firstCarChange.type, ChangeType.Set);
//                             assert.equal(firstCarChange.collection, 'myCollection');
//                             assert.equal(firstCarChange.mapping, 'Car');
//                             assert.equal(firstCarChange._id, car._id);
//                             assert.equal(firstCarChange.field, 'owners');
//                             assert.include(firstCarChange.new, anotherPerson);
//                             assert.include(firstCarChange.newId, anotherPerson._id);
//                             assert.notOk(firstCarChange.old);
//                             assert.notOk(firstCarChange.oldId);
//                         });


//                     });

//                 });



//             });
//         })


//     });
// });


},{}],96:[function(require,module,exports){
// var s = require('../../index')
//     , assert = require('chai').assert;

// describe('proxy integration', function () {

//     var Collection = require('../../src/collection').Collection;
//     var cache = require('../../src/cache');
//     var RelationshipType = require('../../src/relationship').RelationshipType;

//     var carMapping, personMapping;

//     var collection;

//     beforeEach(function (done) {
//         s.reset(true);
//         collection = new Collection('myCollection');
//         carMapping = collection.mapping('Car', {
//             id: 'id',
//             attributes: ['colour', 'name'],
//             relationships: {
//                 owner: {
//                     type: RelationshipType.OneToMany,
//                     reverse: 'cars',
//                     mapping: 'Person'
//                 }
//             }
//         });
//         personMapping = collection.mapping('Person', {
//             id: 'id',
//             attributes: ['name', 'age']
//         });
//         collection.install(done);
//     });

//     it('xyz', function (done) {
//         carMapping.map({
//             colour: 'red',
//             name: 'Aston Martin', owner: {
//                 name: 'Michael Ford',
//                 age: 2,
//                 id: 2
//             },
//             id: 5
//         }, function (err, car) {
//             if (err) done(err);
//             collection.save(function (err) {
//                 if (err) done(err);
//                 cache.reset();
//                 personMapping.get(2, function (err, p) {
//                     var proxy = p.carsProxy;
//                     assert.ok(p.cars.isFault);
//                     p.carsProxy.get(function (err, cars) {
//                         assert.equal(cars.length, 1);
//                         done(err);
//                     });
//                 });
//             });
//         });
//     });

// });
},{}],97:[function(require,module,exports){
// var s = require('../../index'),
//     assert = require('chai').assert;

// describe('mapping queries', function() {

//     var SiestaModel = require('../../src/object').SiestaModel;
//     var Collection = require('../../src/collection').Collection;
//     var RelationshipType = require('../../src/relationship').RelationshipType;
//     var cache = require('../../src/cache');

//     beforeEach(function() {
//         s.reset(true);
//     });

//     describe('queries', function() {
//         var collection, mapping;
//         beforeEach(function(done) {
//             collection = new Collection('myCollection');
//             mapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['color', 'name']
//             });
//             collection.install(function(err) {
//                 if (err) done(err);
//                 s.ext.storage.Pouch.getPouch().bulkDocs([{
//                     type: 'Car',
//                     id: 4,
//                     color: 'red',
//                     name: 'Aston Martin',
//                     collection: 'myCollection'
//                 }, {
//                     type: 'Car',
//                     id: 5,
//                     color: 'blue',
//                     name: 'Ford',
//                     collection: 'myCollection'
//                 }], function(err) {
//                     done(err);
//                 });
//             });
//         });


//         it('all', function(done) {
//             cache.reset();
//             mapping.all(function(err, cars) {
//                 if (err) done(err);
//                 assert.equal(cars.length, 2);
//                 _.each(cars, function(car) {
//                     assert.instanceOf(car, SiestaModel);
//                 });
//                 done();
//             });
//         });

//         it('query', function(done) {
//             this.timeout(10000);
//             cache.reset();
//             mapping.query({
//                 color: 'red'
//             }, function(err, cars) {
//                 if (err) done(err);
//                 assert.equal(cars.length, 1);
//                 _.each(cars, function(car) {
//                     assert.instanceOf(car, SiestaModel);
//                 });
//                 done();
//             });
//         });

//         it('get', function(done) {
//             cache.reset();
//             mapping.get(4, function(err, car) {
//                 if (err) done(err);
//                 assert.ok(car);
//                 assert.instanceOf(car, SiestaModel);
//                 assert.equal(car.color, 'red');
//                 done();
//             });
//         });

//     });

//     describe('reverse', function() {
//         var carMapping, personMapping;

//         var collection;

//         beforeEach(function(done) {
//             collection = new Collection('myCollection');
//             carMapping = collection.mapping('Car', {
//                 id: 'id',
//                 attributes: ['colour', 'name'],
//                 relationships: {
//                     owner: {
//                         type: RelationshipType.OneToMany,
//                         reverse: 'cars',
//                         mapping: 'Person'
//                     }
//                 }
//             });
//             personMapping = collection.mapping('Person', {
//                 id: 'id',
//                 attributes: ['name', 'age']
//             });
//             collection.install(done);
//         });


//         it('not cached', function(done) {
//             this.timeout(5000);
//             carMapping.map({
//                 colour: 'red',
//                 name: 'Aston Martin',
//                 owner: {
//                     name: 'Michael Ford',
//                     age: 2,
//                     id: '2'
//                 },
//                 id: 5
//             }, function(err, car) {
//                 if (err) done(err);
//                 collection.save(function(err) {
//                     if (err) done(err);
//                     cache.reset();
//                     personMapping.get('2', function(err, p) {
//                         if (err) done(err);
//                         assert.ok(p, 'Should be able to fetch the person');
//                         p.carsProxy.get(function(err, cars) {
//                             if (err) done(err);
//                             try {
//                                 assert.equal(cars.length, 1);
//                             } catch (err) {
//                                 done(err);
//                             }
//                             cars[0].owner.get(function(err, owner) {
//                                 if (err) done(err);
//                                 assert.equal(cars[0].owner, p);
//                                 done();
//                             })

//                         });
//                     });
//                 });
//             });
//         });
//     });


// });
},{}],98:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('query', function () {
//     var Query = require('../src/query').Query;
//     var Collection = require('../src/collection').Collection;
//     var SiestaModel = require('../src/object').SiestaModel;

//     beforeEach(function () {
//         s.reset(true);
//     });

//     // TODO: Storage

//     // describe('raw query', function () {
//     //     it('design doc name', function () {
//     //         var name = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'})._getDesignDocName();
//     //         assert.equal(name, '_design/myCollection_Index_Car_colour_name');
//     //     });


//     //     it('fields', function () {
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         var fields = q._getFields();
//     //         assert.include(fields, 'colour');
//     //         assert.include(fields, 'name');
//     //     });

//     //     it('construct key', function () {
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         var key = q._constructKey();
//     //         assert.equal(key, 'red_Aston Martin');
//     //     });

//     //     it('execute with no rows and no index', function (done) {
//     //         this.timeout(10000); // Can take quite a long time sometimes.
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         q.execute(function (err, results) {
//     //             if (done) done(err);
//     //             assert.equal(results.length, 0);
//     //             done();
//     //         });
//     //     });

//     //     it('execute with index', function (done) {
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//     //         i.install(function (err) {
//     //             if (err) done(err);
//     //             q.execute(function (err, results) {
//     //                 if (done) done(err);
//     //                 assert.equal(results.length, 0);
//     //                 done();
//     //             });
//     //         });
//     //     });

//     //     it('execute with index with rows', function (done) {
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         var i = new s.ext.storage.Index('myCollection', 'Car', ['colour', 'name']);
//     //         i.install(function (err) {
//     //             if (err) done(err);
//     //             s.ext.storage.Pouch.getPouch().post({'type': 'Car', colour: 'red', name: 'Aston Martin', collection: 'myCollection'}, function (err) {
//     //                 if (err) done(err);
//     //                 q.execute(function (err, results) {
//     //                     if (done) done(err);
//     //                     assert.equal(results.length, 1);
//     //                     done();
//     //                 });
//     //             });
//     //         });
//     //     });

//     //     it('execute without index with rows', function (done) {
//     //         this.timeout(10000); // Can take quite a long time sometimes.
//     //         var q = new s.ext.storage.RawQuery('myCollection', 'Car', {colour: 'red', name: 'Aston Martin'});
//     //         s.ext.storage.Pouch.getPouch().post({'type': 'Car', colour: 'red', name: 'Aston Martin', collection: 'myCollection'}, function (err) {
//     //             if (err) done(err);
//     //             q.execute(function (err, results) {
//     //                 if (done) done(err);
//     //                 assert.equal(results.length, 1);
//     //                 done();
//     //             });
//     //         });
//     //     });


//     // });

//     // describe('query', function () {
//     //     var collection, mapping;

//     //     it('asdasd', function (done) {
//     //         collection = new Collection('myCollection');
//     //         mapping = collection.mapping('Person', {
//     //             id: 'id',
//     //             attributes: ['name', 'age']
//     //         });
//     //         collection.install(function (err) {
//     //             if (err) done(err);
//     //             s.ext.storage.Pouch.getPouch().post({type: 'Person', age: 23, collection: 'myCollection', name: 'Michael'}, function (err, resp) {
//     //                 if (err) done(err);
//     //                 var q = new Query(mapping, {age: 23});
//     //                 q.execute(function (err, objs) {
//     //                     if (err) done(err);
//     //                     try {
//     //                         assert.ok(objs.length);
//     //                         _.each(objs, function (obj) {
//     //                             assert.instanceOf(obj, SiestaModel);
//     //                         });
//     //                         done();
//     //                     }
//     //                     catch (err) {
//     //                         done(err);
//     //                     }

//     //                 });
//     //             });
//     //         });


//     //     })
//     // });


// });
},{}],99:[function(require,module,exports){
// var s = require('../../index')
//     , assert = require('chai').assert;

// describe('raw query behaviour', function () {

//     beforeEach(function () {
//         s.reset(true);
//     });

//     describe('data types', function () {

//         describe('indexed', function () {
//             describe('singular', function () {

//                 beforeEach(function (done) {
//                     var index = new s.ext.storage.Index('myCollection', 'Car', ['id']);
//                     index.install(done);
//                 });

//                 it('string', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 'blah'
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 'blah'});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('numeric', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('numeric with string query', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: '5'});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('string with numeric query', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: '5'
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });


//             });

//             describe('multiple', function () {

//                 beforeEach(function (done) {
//                     var index = new s.ext.storage.Index('myCollection', 'Car', ['id', 'colour', 'age']);
//                     index.install(done);
//                 });

//                 it('numeric', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5,
//                         age: 2
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5, colour: 'red', age: 2});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('string', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: '5',
//                         age: 2
//                     }, function (err) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: '5', colour: 'red', age: 2});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });




//             });
//         });

//         describe('not indexed', function () {
//             describe('singular', function () {

//                 it('string', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 'blah'
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 'blah'});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('numeric', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('numeric with string query', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: '5'});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//                 it('string with numeric query', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: '5'
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });


//             });

//             describe('multiple', function () {


//                 it('numeric', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: 5,
//                         age: 2
//                     }, function (err, resp) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: 5, colour: 'red', age: 2});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });  

//                 it('string', function (done) {
//                     s.ext.storage.Pouch.getPouch().post({
//                         type: 'Car',
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         collection: 'myCollection',
//                         id: '5',
//                         age: 2
//                     }, function (err) {
//                         if (err) {
//                             done(err);
//                         }
//                         else {
//                             var q = new s.ext.storage.RawQuery('myCollection', 'Car', {id: '5', colour: 'red', age: 2});
//                             q.execute(function (err, docs) {
//                                 if (err) done(err);
//                                 assert.equal(docs.length, 1);
//                                 done();
//                             });
//                         }
//                     });
//                 });

//             });
//         });

//     });

// });
},{}],100:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('singleton mapping', function () {

//     var SiestaModel = require('../src/object').SiestaModel;
//     var Collection = require('../src/collection').Collection;
//     var cache = require('../src/cache');
//     var store = require('../src/store');

//     var collection, carMapping;

//     function CarObject() {
//         SiestaModel.apply(this, arguments);
//     }

//     CarObject.prototype = Object.create(SiestaModel.prototype);

//     beforeEach(function (done) {
//         s.reset(true);
//         collection = new Collection('Car');
//         carMapping = collection.mapping('Car', {
//             id: 'id',
//             attributes: ['colour', 'name'],
//             singleton: true
//         });
//         collection.install(done);
//     });


//     it('store should return singleton', function (done) {
//         this.timeout(5000);
//         carMapping.map({colour: 'red', id: 5}, function (err, car) {
//             if (err) done(err);
//             collection.save(function (err) {
//                 if (err) done(err);
//                 cache.reset();
//                 store.get({mapping: carMapping}, function (err, obj) {
//                     if (err) done(err);
//                     assert.equal(obj._id, car._id);
//                     done();
//                 });
//             });
//         });
//     });



// });
},{}],101:[function(require,module,exports){
// var siesta = require('../index');
// var assert = require('chai').assert;

// describe('statistics', function() {
//     var Car, Person, coll;

//     var Collection = require('../src/collection').Collection;
//     var cache = require('../src/cache');

//     beforeEach(function(done) {
//         siesta.reset(true);
//         coll = new Collection('myCollection');
//         Car = coll.mapping('Car', {
//             id: 'id',
//             attributes: ['colour', 'name'],
//             relationships: {
//                 owner: {
//                     mapping: 'Person',
//                     type: 'OneToMany',
//                     reverse: 'cars'
//                 }
//             }
//         });
//         Person = coll.mapping('Person', {
//             id: 'id',
//             attributes: ['age', 'name']
//         });
//         coll.install(done);
//     });

//     describe('no faults', function() {
//         describe('collection level', function() {
//             describe('single mapping', function() {
//                 it('no objects', function(done) {
//                     coll.count(function(err, n) {
//                         if (err) done(err);
//                         assert.equal(n, 0);
//                         done();
//                     });
//                 });

//                 it('one object', function(done) {
//                     Car.map({
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, function(err, obj) {
//                         if (err) done(err);
//                         coll.count(function(err, n) {
//                             if (err) done(err);
//                             assert.equal(n, 1);
//                             done();
//                         });
//                     });
//                 });

//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo'
//                     }], function(err) {
//                         if (err) done(err);
//                         coll.count(function(err, n) {
//                             if (err) done(err);
//                             assert.equal(n, 3);
//                             done();
//                         });
//                     });
//                 });
//             });
//             describe('multiple mappings', function() {
//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo'
//                     }], function(err) {
//                         if (err) done(err);
//                         Person.map([{
//                             age: 24,
//                             name: 'Michael Ford'
//                         }, {
//                             age: 25,
//                             name: 'John Doe'
//                         }], function(err) {
//                             if (err) done(err);
//                             coll.count(function(err, n) {
//                                 if (err) done(err);
//                                 assert.equal(n, 5);
//                                 done();
//                             });
//                         });
//                     });
//                 });
//             });
//         });
//     });
//     describe('all faulted', function() {
//         describe('collection level', function() {
//             describe('single mapping', function() {
//                 it('one object', function(done) {
//                     Car.map({
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, function(err, obj) {
//                         if (err) done(err);
//                         siesta.save(function(err) {
//                             if (err) done(err);
//                             cache.reset();
//                             coll.count(function(err, n) {
//                                 if (err) done(err);
//                                 assert.equal(n, 1);
//                                 done();
//                             });
//                         });
//                     });
//                 });

//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo'
//                     }], function(err) {
//                         if (err) done(err);
//                         siesta.save(function(err) {
//                             if (err) done(err);
//                             cache.reset();
//                             coll.count(function(err, n) {
//                                 if (err) done(err);
//                                 assert.equal(n, 3);
//                                 done();
//                             });
//                         });
//                     });
//                 });
//             });
//             describe('multiple mappings', function() {
//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo'
//                     }], function(err) {
//                         if (err) done(err);

//                         Person.map([{
//                             age: 24,
//                             name: 'Michael Ford'
//                         }, {
//                             age: 25,
//                             name: 'John Doe'
//                         }], function(err) {
//                             if (err) done(err);
//                             siesta.save(function(err) {
//                                 if (err) done(err);
//                                 cache.reset();
//                                 cache.reset();
//                                 coll.count(function(err, n) {
//                                     if (err) done(err);
//                                     assert.equal(n, 5);
//                                     done();
//                                 });
//                             });
//                         });
//                     });

//                 });
//             });
//         });

//     });
//     describe('some faulted', function() {
//         describe('collection level', function() {
//             describe('single mapping', function() {
//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         id: '1'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley',
//                         id: '2'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo',
//                         id: '3'
//                     }], function(err, objs) {
//                         if (err) done(err);
//                         siesta.save(function(err) {
//                             if (err) done(err);
//                             delete cache._localCache()[objs[1]._id];
//                             coll.count(function(err, n) {
//                                 if (err) done(err);
//                                 assert.equal(n, 3);
//                                 done();
//                             });
//                         });
//                     });
//                 });
//             });
//             describe('multiple mappings', function() {
//                 it('multiple objects', function(done) {
//                     Car.map([{
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         id: '1'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley',
//                         id: '2'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo',
//                         id: '3'
//                     }], function(err, cars) {
//                         if (err) done(err);
//                         Person.map([{
//                             age: 24,
//                             name: 'Michael Ford',
//                             id: '4'
//                         }, {
//                             age: 25,
//                             name: 'John Doe',
//                             id: '5'
//                         }], function(err, people) {
//                             if (err) done(err);
//                             siesta.save(function(err) {
//                                 if (err) done(err);
//                                 delete cache._localCache()[cars[1]._id];
//                                 delete cache._localCache()[people[1]._id];
//                                 coll.count(function(err, n) {
//                                     if (err) done(err);
//                                     assert.equal(n, 5);
//                                     done();
//                                 });
//                             });
//                         });
//                     });

//                 });
//             });
//         });

//     });


//     describe('all faulted, then mapped again', function() {
//         describe('collection level', function() {
//             describe('single mapping', function() {
//                 it('one object', function(done) {
//                     var data = {
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         id: '1'
//                     };
//                     Car.map(data, function(err) {
//                         if (err) done(err);
//                         siesta.save(function(err) {
//                             if (err) done(err);
//                             cache.reset();
//                             Car.map(data, function(err) {
//                                 if (err) done(err);
//                                 coll.count(function(err, n) {
//                                     if (err) done(err);
//                                     assert.equal(n, 1);
//                                     done();
//                                 });
//                             });
//                         });
//                     });
//                 });

//                 it('multiple objects', function(done) {
//                     var data = [{
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         id: '1'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley',
//                         id: '2'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo',
//                         id: '3'
//                     }];
//                     Car.map(data, function(err) {
//                         if (err) done(err);
//                         siesta.save(function(err) {
//                             if (err) done(err);
//                             cache.reset();
//                             Car.map(data, function(err) {
//                                 if (err) done(err);
//                                 coll.count(function(err, n) {
//                                     if (err) done(err);
//                                     assert.equal(n, 3);
//                                     done();
//                                 });
//                             });
//                         });
//                     });
//                 });
//             });
//             describe('multiple mappings', function() {
//                 it('multiple objects', function(done) {
//                     var carData = [{
//                         colour: 'red',
//                         name: 'Aston Martin',
//                         id: '1'
//                     }, {
//                         colour: 'blue',
//                         name: 'Bentley',
//                         id: '2'
//                     }, {
//                         colour: 'green',
//                         name: 'Lambo',
//                         id: '3'
//                     }];
//                     Car.map(carData, function(err) {
//                         if (err) done(err);
//                         var personData = [{
//                             age: 24,
//                             name: 'Michael Ford',
//                             id: '4'
//                         }, {
//                             age: 25,
//                             name: 'John Doe',
//                             id: '5'
//                         }];
//                         Person.map(personData, function(err) {
//                             if (err) done(err);
//                             siesta.save(function(err) {
//                                 if (err) done(err);
//                                 cache.reset();
//                                 Car.map(carData, function(err) {
//                                     if (err) done(err);
//                                     Person.map(personData, function(err) {
//                                         if (err) done(err);
//                                         siesta.save(function(err) {
//                                             if (err) done(err);
//                                             var pouch = siesta.ext.storage.Pouch.getPouch();
//                                             pouch.query(function(doc) {
//                                                 if (doc.type == 'Car') {
//                                                     emit(doc._id, doc);
//                                                 }
//                                             }, function(err, resp) {
//                                                 dump('err', err);
//                                                 dump('resp', resp);
//                                                 coll.count(function(err, n) {
//                                                     if (err) done(err);
//                                                     assert.equal(n, 5);
//                                                     done();
//                                                 });
//                                             });

//                                         });
//                                     });
//                                 });
//                             });
//                         });
//                     });

//                 });
//             });
//         });

//     });



// });
},{}],102:[function(require,module,exports){
// var s = require('../index')
//     , assert = require('chai').assert;

// describe('store', function () {
//     var Store = require('../src/store');
//     var SiestaModel = require('../src/object').SiestaModel;
//     var Collection = require('../src/collection').Collection;
//     var cache = require('../src/cache');

//     var carMapping, collection;

//     beforeEach(function (done) {
//         s.reset(true);
//         collection = new Collection('myCollection');
//         carMapping = collection.mapping('Car', {
//             id: 'id',
//             attributes: ['colour', 'name']
//         });
//         collection.install(done);
//     });

//     describe('get', function () {

//         it('in pouch, have _id', function (done) {
//             var pouchid = 'pouchId';
//             s.ext.storage.Pouch.getPouch().put({type: 'Car', collection: 'myCollection', colour: 'red', _id: pouchid}, function (err, doc) {
//                 if (err) done(err);
//                 Store.get({_id: pouchid}, function (err, obj) {
//                     if (err) done(err);
//                     var cachedObject = cache.get({_id: obj._id});
//                     try {
//                         assert.equal(cachedObject, obj);
//                         done();
//                     }
//                     catch (err) {
//                         done(err);
//                     }
//                 });
//             });
//         });

//         it('in pouch, dont have _id', function (done) {
//             var pouchid = 'pouchId';
//             var remoteId = 'xyz';
//             s.ext.storage.Pouch.getPouch().put({type: 'Car', collection: 'myCollection', colour: 'red', _id: pouchid, id: remoteId}, function (err, doc) {
//                 if (err) done(err);
//                 Store.get({id: remoteId, mapping: carMapping}, function (err, doc) {
//                     if (err) done(err);
//                     done();
//                 });
//             });
//         });

//         describe('multiple', function () {

//             describe('getMultiple', function () {

//                 describe('not cached', function () {
//                     beforeEach(function (done) {
//                         s.ext.storage.Pouch.getPouch().bulkDocs(
//                             [
//                                 {type: 'Car', collection: 'myCollection', colour: 'red', _id: 'localId1', id: 'remoteId1'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'blue', _id: 'localId2', id: 'remoteId2'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'green', _id: 'localId3', id: 'remoteId3'}
//                             ],
//                             function (err) {
//                                 done(err);
//                             }
//                         );
//                     });
//                     it('getMultiple should return multiple', function (done) {
//                         Store.getMultiple([
//                             {_id: 'localId1'},
//                             {_id: 'localId2'},
//                             {_id: 'localId3'}
//                         ], function (err, docs) {
//                             if (err) done(err);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         });
//                     });

//                     it('get should proxy to getMultiple if _id is an array', function (done) {
//                         Store.get({_id: ['localId1', 'localId2', 'localId3']}, function (err, docs) {
//                             if (err) done(err);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         });
//                     });


//                 });

//             });

//             describe('getMultipleLocal', function () {

//                 describe('not cached', function () {

//                     beforeEach(function (done) {
//                         s.ext.storage.Pouch.getPouch().bulkDocs(
//                             [
//                                 {type: 'Car', collection: 'myCollection', colour: 'red', _id: 'localId1', id: 'remoteId1'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'blue', _id: 'localId2', id: 'remoteId2'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'green', _id: 'localId3', id: 'remoteId3'}
//                             ],
//                             function (err) {
//                                 done(err);
//                             }
//                         );
//                     });

//                     it('xyz', function (done) {
//                         Store.getMultipleLocal(['localId1', 'localId2', 'localId3'], function (err, docs) {
//                             if (err) done(err);
//                             assert.equal(docs.length, 3);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         })
//                     })
//                 });
//                 describe('partially cached', function () {
//                     var cars;

//                     beforeEach(function (done) {
//                         var o = carMapping._new({colour: 'red', id: 'remoteId1'});
//                         var o2 = carMapping._new({colour: 'green', id: 'remoteId3'});
//                         cars = [o, o2];
//                         cache.insert(o);
//                         cache.insert(o2);
//                         s.ext.storage.Pouch.getPouch().bulkDocs(
//                             [
//                                 {type: 'Car', collection: 'myCollection', colour: 'blue', _id: 'localId2', id: 'remoteId2'}
//                             ],
//                             function (err) {
//                                 done(err);
//                             }
//                         );
//                     });

//                     it('xyz', function (done) {
//                         var localIdentifiers = _.pluck(cars, '_id');
//                         localIdentifiers.push('localId2');
//                         Store.getMultipleLocal(localIdentifiers, function (err, docs) {
//                             if (err) done(err);
//                             assert.equal(docs.length, 3);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         })
//                     })
//                 });

//             });

//             describe('getMultipleRemote', function () {
//                 describe('not cached', function () {

//                     beforeEach(function (done) {
//                         s.ext.storage.Pouch.getPouch().bulkDocs(
//                             [
//                                 {type: 'Car', collection: 'myCollection', colour: 'red', _id: 'localId1', id: 'remoteId1'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'blue', _id: 'localId2', id: 'remoteId2'},
//                                 {type: 'Car', collection: 'myCollection', colour: 'green', _id: 'localId3', id: 'remoteId3'}
//                             ],
//                             function (err) {
//                                 done(err);
//                             }
//                         );
//                     });

//                     it('xyz', function (done) {
//                         Store.getMultipleRemote(['remoteId1', 'remoteId2', 'remoteId3'], carMapping, function (err, docs) {
//                             if (err) done(err);
//                             assert.equal(docs.length, 3);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         })
//                     })
//                 });
//                 describe('partially cached', function () {
//                     var cars;

//                     beforeEach(function (done) {
//                         carMapping.map([
//                             {colour: 'red', id: 'remoteId1'},
//                             {colour: 'green', id: 'remoteId3'}
//                         ], function (err, _cars) {
//                             if (err) done(err);
//                             cars = _cars;
//                             s.ext.storage.Pouch.getPouch().bulkDocs(
//                                 [
//                                     {type: 'Car', collection: 'myCollection', colour: 'blue', _id: 'localId2', id: 'remoteId2'}
//                                 ],
//                                 function (err) {
//                                     done(err);
//                                 }
//                             );
//                         });
//                     });

//                     it('xyz', function (done) {
//                         Store.getMultipleRemote(['remoteId1', 'remoteId2', 'remoteId3'], carMapping, function (err, docs) {
//                             if (err) done(err);
//                             assert.equal(docs.length, 3);
//                             _.each(docs, function (d) {
//                                 assert.instanceOf(d, SiestaModel);
//                             });
//                             done();
//                         })
//                     })


//                 });

//             })


//         });

//     });


// });
},{}],103:[function(require,module,exports){
var s = require('../index'),
    assert = require('chai').assert;

describe('store......', function() {
    var Store = require('../src/store');
    var SiestaModel = require('../src/object').SiestaModel;
    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');

    var carMapping, collection;

    beforeEach(function(done) {
        s.reset(true);
        collection = new Collection('myCollection');
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']
        });
        collection.install(done);
    });

    describe('get', function() {
        it('already cached', function(done) {
            var model = new SiestaModel(carMapping);
            var pouchId = 'pouchId';
            model._id = pouchId;
            cache.insert(model);
            Store.get({
                _id: pouchId
            }, function(err, doc) {
                if (err) done(err);
                assert.equal(doc, model);
                done();
            });
        });

        describe('multiple', function() {

            describe('getMultiple', function() {
                //TODO
            });

            describe('getMultipleLocal', function() {
                var cars;

                beforeEach(function() {
                    var o = carMapping._new({
                        colour: 'red',
                        id: 'remoteId1'
                    });
                    var o1 = carMapping._new({
                        colour: 'blue',
                        id: 'remoteId2'
                    });
                    var o2 = carMapping._new({
                        colour: 'green',
                        id: 'remoteId3'
                    });
                    cars = [o, o1, o2];
                    cache.insert(o);
                    cache.insert(o1);
                    cache.insert(o2);
                });

                it('xyz', function(done) {
                    Store.getMultipleLocal(_.pluck(cars, '_id'), function(err, docs) {
                        if (err) done(err);
                        assert.equal(docs.length, 3);
                        _.each(docs, function(d) {
                            assert.instanceOf(d, SiestaModel);
                        });
                        done();
                    })
                })


            });

            describe('getMultipleRemote', function() {
                describe('cached', function() {

                    var cars;

                    beforeEach(function() {
                        var o = carMapping._new({
                            colour: 'red',
                            id: 'remoteId1'
                        });
                        var o1 = carMapping._new({
                            colour: 'blue',
                            id: 'remoteId2'
                        });
                        var o2 = carMapping._new({
                            colour: 'green',
                            id: 'remoteId3'
                        });
                        cars = [o, o1, o2];
                        cache.insert(o);
                        cache.insert(o1);
                        cache.insert(o2);
                    });

                    it('xyz', function(done) {
                        Store.getMultipleRemote(_.pluck(cars, 'id'), carMapping, function(err, docs) {
                            if (err) done(err);
                            assert.equal(docs.length, 3);
                            _.each(docs, function(d) {
                                assert.instanceOf(d, SiestaModel);
                            });
                            done();
                        })
                    })


                });

            })


        });

    });


});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/object":53,"../src/store":59,"chai":9}],104:[function(require,module,exports){
var s = require('../index')
    , assert = require('chai').assert;

describe('subclassing', function () {

    var SiestaModel = require('../src/object').SiestaModel;
    var InternalSiestaError = require('../src/error').InternalSiestaError;
    var Collection = require('../src/collection').Collection;
    var cache = require('../src/cache');

    var collection, carMapping;

    function CarObject() {
        SiestaModel.apply(this, arguments);
    }

    CarObject.prototype = Object.create(SiestaModel.prototype);

    beforeEach(function (done) {
        s.reset(true);
        collection = new Collection('Car');

        collection.install(done);
    });

    function installMapping(mapping, callback) {
        mapping.install(function (err) {
            if (err) callback(err);
            else {
                mapping.installRelationships();
                mapping.installReverseRelationships();
                callback();
            }
        });
    }

    it('should instantiate with subclass if present', function (done) {
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name'],
            subclass: CarObject
        });
        installMapping(carMapping, function () {
            var car = carMapping._new({colour: 'red', name: 'Aston Martin'});
            assert.instanceOf(car, CarObject);
            done();
        });

    });

    it('should instantiate with SiestaModel if not present', function (done) {
        carMapping = collection.mapping('Car', {
            id: 'id',
            attributes: ['colour', 'name']
        });
        installMapping(carMapping, function () {
            var car = carMapping._new({colour: 'red', name: 'Aston Martin'});
            assert.instanceOf(car, SiestaModel);
            done();
        });

    });

    it('should throw an error if setup prototype, but do not call super', function () {
        function CarObject() {}

        CarObject.prototype = Object.create(SiestaModel.prototype);
        assert.throws(function () {
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                subclass: CarObject
            });
        }, InternalSiestaError);
    });


    it('should throw an error if do not call super or setup prototype', function () {
        function CarObject() {
        }

        assert.throws(function () {
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                subclass: CarObject
            });
        }, InternalSiestaError);
    });

    it('should throw an error if do not use a new instance of the prototype, as this is an anti-pattern', function () {
        function CarObject() {
            SiestaModel.apply(this, arguments);
        }

        CarObject.prototype = SiestaModel.prototype;
        assert.throws(function () {
            carMapping = collection.mapping('Car', {
                id: 'id',
                attributes: ['colour', 'name'],
                subclass: CarObject
            });
        }, InternalSiestaError);
    });

});
},{"../index":1,"../src/cache":43,"../src/collection":45,"../src/error":47,"../src/object":53,"chai":9}],105:[function(require,module,exports){
var s = require('../index')
    , assert = require('chai').assert;


var util = require('../src/util');
var q = require('q');

describe('constructCallbackAndPromiseHandler', function () {
    describe('no error or result', function () {
        function doSomethingWithNoErrorOrResult (callback) {
            setTimeout(callback);
        }

        it('promise returns', function (done) {
            var deferred = q.defer();
            doSomethingWithNoErrorOrResult (util.constructCallbackAndPromiseHandler(null, deferred));
            deferred.promise.then(function () {
                done();
            });
        });

        it('callback returns', function (done) {
            doSomethingWithNoErrorOrResult (util.constructCallbackAndPromiseHandler(done));
        });

        it('promise & callback returns', function (done) {
            var deferred = q.defer();
            var callbackReturned = false;
            var promiseReturned = false;
            doSomethingWithNoErrorOrResult(util.constructCallbackAndPromiseHandler(function () {
                callbackReturned = true;
                if (callbackReturned && promiseReturned) done();
            }, deferred));
            deferred.promise.then(function () {
                promiseReturned = true;
                if (callbackReturned && promiseReturned) done();
            });
        });
    });

    describe('an error, no result', function () {
        function doSomethingWithAnError (callback) {
            setTimeout(function () {
                callback('some error');
            });
        }

        it('promise returns', function (done) {
            var deferred = q.defer();
            doSomethingWithAnError (util.constructCallbackAndPromiseHandler(null, deferred));
            deferred.promise.fail(function () {
                done();
            });
        });

        it('callback returns', function (done) {
            doSomethingWithAnError (util.constructCallbackAndPromiseHandler(function (err) {
                assert.ok(err);
                done();
            }));
        });

        it('promise & callback returns', function (done) {
            var deferred = q.defer();
            var callbackReturned = false;
            var promiseReturned = false;
            doSomethingWithAnError(util.constructCallbackAndPromiseHandler(function (err) {
                assert.ok(err);
                callbackReturned = true;
                if (callbackReturned && promiseReturned) done();
            }, deferred));
            deferred.promise.fail(function () {
                promiseReturned = true;
                if (callbackReturned && promiseReturned) done();
            });
        });
    });

    describe('no error and a single result', function () {
        function doSomethingWithNoErrorAndASingleResult (callback) {
            setTimeout(function () {
                callback(null, 'result');
            });
        }

        it('promise returns', function (done) {
            var deferred = q.defer();
            doSomethingWithNoErrorAndASingleResult(util.constructCallbackAndPromiseHandler(null, deferred));
            deferred.promise.then(function () {
                done();
            });
        });

        it('callback returns', function (done) {
            doSomethingWithNoErrorAndASingleResult (util.constructCallbackAndPromiseHandler(function (err, res) {
                assert.notOk(err);
                assert.equal(res, 'result');
                done();
            }));
        });

        it('promise & callback returns', function (done) {
            var deferred = q.defer();
            var callbackReturned = false;
            var promiseReturned = false;
            doSomethingWithNoErrorAndASingleResult(util.constructCallbackAndPromiseHandler(function () {
                callbackReturned = true;
                if (callbackReturned && promiseReturned) done();
            }, deferred));
            deferred.promise.then(function (res) {
                assert.equal(res, 'result');
                promiseReturned = true;
                if (callbackReturned && promiseReturned) done();
            });
        });

    });

    describe('no error and multiple results', function () {
        function doSomethingWithNoErrorAndMultipleResults (callback) {
            setTimeout(function () {
                callback(null, 'result1', 'result2', 'result3');
            });
        }

        it('promise returns', function (done) {
            var deferred = q.defer();
            doSomethingWithNoErrorAndMultipleResults(util.constructCallbackAndPromiseHandler(null, deferred));
            deferred.promise.then(function () {
                done();
            });
        });

        it('callback returns', function (done) {
            doSomethingWithNoErrorAndMultipleResults (util.constructCallbackAndPromiseHandler(function (err, res1, res2, res3) {
                assert.notOk(err);
                assert.equal(res1, 'result1');
                assert.equal(res2, 'result2');
                assert.equal(res3, 'result3');
                done();
            }));
        });

        it('promise & callback returns', function (done) {
            var deferred = q.defer();
            var callbackReturned = false;
            var promiseReturned = false;
            doSomethingWithNoErrorAndMultipleResults(util.constructCallbackAndPromiseHandler(function (err, res1, res2, res3) {
                try {
                    assert.equal(res1, 'result1');
                    assert.equal(res2, 'result2');
                    assert.equal(res3, 'result3');
                }
                catch (e) {
                    done(e);
                }

                callbackReturned = true;
                if (callbackReturned && promiseReturned) done();
            }, deferred));
            deferred.promise.then(function (res1, res2, res3) {
                try {
                    assert.equal(res1, 'result1');
                    // Promise resolution only accepts one result...
                    assert.notOk(res2);
                    assert.notOk(res3);
                }
                catch (e) {
                    done(e);
                }
                promiseReturned = true;
                if (callbackReturned && promiseReturned) done();
            });
        });
    });





});
},{"../index":1,"../src/util":60,"chai":9,"q":42}],106:[function(require,module,exports){
(function (global){
/*
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

(function(global) {
  'use strict';

  var testingExposeCycleCount = global.testingExposeCycleCount;

  // Detect and do basic sanity checking on Object/Array.observe.
  function detectObjectObserve() {
    if (typeof Object.observe !== 'function' ||
        typeof Array.observe !== 'function') {
      return false;
    }

    var records = [];

    function callback(recs) {
      records = recs;
    }

    var test = {};
    var arr = [];
    Object.observe(test, callback);
    Array.observe(arr, callback);
    test.id = 1;
    test.id = 2;
    delete test.id;
    arr.push(1, 2);
    arr.length = 0;

    Object.deliverChangeRecords(callback);
    if (records.length !== 5)
      return false;

    if (records[0].type != 'add' ||
        records[1].type != 'update' ||
        records[2].type != 'delete' ||
        records[3].type != 'splice' ||
        records[4].type != 'splice') {
      return false;
    }

    Object.unobserve(test, callback);
    Array.unobserve(arr, callback);

    return true;
  }

  var hasObserve = detectObjectObserve();

  function detectEval() {
    // Don't test for eval if we're running in a Chrome App environment.
    // We check for APIs set that only exist in a Chrome App context.
    if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
      return false;
    }

    // Firefox OS Apps do not allow eval. This feature detection is very hacky
    // but even if some other platform adds support for this function this code
    // will continue to work.
    if (navigator.getDeviceStorage) {
      return false;
    }

    try {
      var f = new Function('', 'return true;');
      return f();
    } catch (ex) {
      return false;
    }
  }

  var hasEval = detectEval();

  function isIndex(s) {
    return +s === s >>> 0 && s !== '';
  }

  function toNumber(s) {
    return +s;
  }

  function isObject(obj) {
    return obj === Object(obj);
  }

  var numberIsNaN = global.Number.isNaN || function(value) {
    return typeof value === 'number' && global.isNaN(value);
  }

  function areSameValue(left, right) {
    if (left === right)
      return left !== 0 || 1 / left === 1 / right;
    if (numberIsNaN(left) && numberIsNaN(right))
      return true;

    return left !== left && right !== right;
  }

  var createObject = ('__proto__' in {}) ?
    function(obj) { return obj; } :
    function(obj) {
      var proto = obj.__proto__;
      if (!proto)
        return obj;
      var newObject = Object.create(proto);
      Object.getOwnPropertyNames(obj).forEach(function(name) {
        Object.defineProperty(newObject, name,
                             Object.getOwnPropertyDescriptor(obj, name));
      });
      return newObject;
    };

  var identStart = '[\$_a-zA-Z]';
  var identPart = '[\$_a-zA-Z0-9]';
  var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

  function getPathCharType(char) {
    if (char === undefined)
      return 'eof';

    var code = char.charCodeAt(0);

    switch(code) {
      case 0x5B: // [
      case 0x5D: // ]
      case 0x2E: // .
      case 0x22: // "
      case 0x27: // '
      case 0x30: // 0
        return char;

      case 0x5F: // _
      case 0x24: // $
        return 'ident';

      case 0x20: // Space
      case 0x09: // Tab
      case 0x0A: // Newline
      case 0x0D: // Return
      case 0xA0:  // No-break space
      case 0xFEFF:  // Byte Order Mark
      case 0x2028:  // Line Separator
      case 0x2029:  // Paragraph Separator
        return 'ws';
    }

    // a-z, A-Z
    if ((0x61 <= code && code <= 0x7A) || (0x41 <= code && code <= 0x5A))
      return 'ident';

    // 1-9
    if (0x31 <= code && code <= 0x39)
      return 'number';

    return 'else';
  }

  var pathStateMachine = {
    'beforePath': {
      'ws': ['beforePath'],
      'ident': ['inIdent', 'append'],
      '[': ['beforeElement'],
      'eof': ['afterPath']
    },

    'inPath': {
      'ws': ['inPath'],
      '.': ['beforeIdent'],
      '[': ['beforeElement'],
      'eof': ['afterPath']
    },

    'beforeIdent': {
      'ws': ['beforeIdent'],
      'ident': ['inIdent', 'append']
    },

    'inIdent': {
      'ident': ['inIdent', 'append'],
      '0': ['inIdent', 'append'],
      'number': ['inIdent', 'append'],
      'ws': ['inPath', 'push'],
      '.': ['beforeIdent', 'push'],
      '[': ['beforeElement', 'push'],
      'eof': ['afterPath', 'push']
    },

    'beforeElement': {
      'ws': ['beforeElement'],
      '0': ['afterZero', 'append'],
      'number': ['inIndex', 'append'],
      "'": ['inSingleQuote', 'append', ''],
      '"': ['inDoubleQuote', 'append', '']
    },

    'afterZero': {
      'ws': ['afterElement', 'push'],
      ']': ['inPath', 'push']
    },

    'inIndex': {
      '0': ['inIndex', 'append'],
      'number': ['inIndex', 'append'],
      'ws': ['afterElement'],
      ']': ['inPath', 'push']
    },

    'inSingleQuote': {
      "'": ['afterElement'],
      'eof': ['error'],
      'else': ['inSingleQuote', 'append']
    },

    'inDoubleQuote': {
      '"': ['afterElement'],
      'eof': ['error'],
      'else': ['inDoubleQuote', 'append']
    },

    'afterElement': {
      'ws': ['afterElement'],
      ']': ['inPath', 'push']
    }
  }

  function noop() {}

  function parsePath(path) {
    var keys = [];
    var index = -1;
    var c, newChar, key, type, transition, action, typeMap, mode = 'beforePath';

    var actions = {
      push: function() {
        if (key === undefined)
          return;

        keys.push(key);
        key = undefined;
      },

      append: function() {
        if (key === undefined)
          key = newChar
        else
          key += newChar;
      }
    };

    function maybeUnescapeQuote() {
      if (index >= path.length)
        return;

      var nextChar = path[index + 1];
      if ((mode == 'inSingleQuote' && nextChar == "'") ||
          (mode == 'inDoubleQuote' && nextChar == '"')) {
        index++;
        newChar = nextChar;
        actions.append();
        return true;
      }
    }

    while (mode) {
      index++;
      c = path[index];

      if (c == '\\' && maybeUnescapeQuote(mode))
        continue;

      type = getPathCharType(c);
      typeMap = pathStateMachine[mode];
      transition = typeMap[type] || typeMap['else'] || 'error';

      if (transition == 'error')
        return; // parse error;

      mode = transition[0];
      action = actions[transition[1]] || noop;
      newChar = transition[2] === undefined ? c : transition[2];
      action();

      if (mode === 'afterPath') {
        return keys;
      }
    }

    return; // parse error
  }

  function isIdent(s) {
    return identRegExp.test(s);
  }

  var constructorIsPrivate = {};

  function Path(parts, privateToken) {
    if (privateToken !== constructorIsPrivate)
      throw Error('Use Path.get to retrieve path objects');

    for (var i = 0; i < parts.length; i++) {
      this.push(String(parts[i]));
    }

    if (hasEval && this.length) {
      this.getValueFrom = this.compiledGetValueFromFn();
    }
  }

  // TODO(rafaelw): Make simple LRU cache
  var pathCache = {};

  function getPath(pathString) {
    if (pathString instanceof Path)
      return pathString;

    if (pathString == null || pathString.length == 0)
      pathString = '';

    if (typeof pathString != 'string') {
      if (isIndex(pathString.length)) {
        // Constructed with array-like (pre-parsed) keys
        return new Path(pathString, constructorIsPrivate);
      }

      pathString = String(pathString);
    }

    var path = pathCache[pathString];
    if (path)
      return path;

    var parts = parsePath(pathString);
    if (!parts)
      return invalidPath;

    var path = new Path(parts, constructorIsPrivate);
    pathCache[pathString] = path;
    return path;
  }

  Path.get = getPath;

  function formatAccessor(key) {
    if (isIndex(key)) {
      return '[' + key + ']';
    } else {
      return '["' + key.replace(/"/g, '\\"') + '"]';
    }
  }

  Path.prototype = createObject({
    __proto__: [],
    valid: true,

    toString: function() {
      var pathString = '';
      for (var i = 0; i < this.length; i++) {
        var key = this[i];
        if (isIdent(key)) {
          pathString += i ? '.' + key : key;
        } else {
          pathString += formatAccessor(key);
        }
      }

      return pathString;
    },

    getValueFrom: function(obj, directObserver) {
      for (var i = 0; i < this.length; i++) {
        if (obj == null)
          return;
        obj = obj[this[i]];
      }
      return obj;
    },

    iterateObjects: function(obj, observe) {
      for (var i = 0; i < this.length; i++) {
        if (i)
          obj = obj[this[i - 1]];
        if (!isObject(obj))
          return;
        observe(obj, this[0]);
      }
    },

    compiledGetValueFromFn: function() {
      var str = '';
      var pathString = 'obj';
      str += 'if (obj != null';
      var i = 0;
      var key;
      for (; i < (this.length - 1); i++) {
        key = this[i];
        pathString += isIdent(key) ? '.' + key : formatAccessor(key);
        str += ' &&\n     ' + pathString + ' != null';
      }
      str += ')\n';

      var key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);

      str += '  return ' + pathString + ';\nelse\n  return undefined;';
      return new Function('obj', str);
    },

    setValueFrom: function(obj, value) {
      if (!this.length)
        return false;

      for (var i = 0; i < this.length - 1; i++) {
        if (!isObject(obj))
          return false;
        obj = obj[this[i]];
      }

      if (!isObject(obj))
        return false;

      obj[this[i]] = value;
      return true;
    }
  });

  var invalidPath = new Path('', constructorIsPrivate);
  invalidPath.valid = false;
  invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};

  var MAX_DIRTY_CHECK_CYCLES = 1000;

  function dirtyCheck(observer) {
    var cycles = 0;
    while (cycles < MAX_DIRTY_CHECK_CYCLES && observer.check_()) {
      cycles++;
    }
    if (testingExposeCycleCount)
      global.dirtyCheckCycleCount = cycles;

    return cycles > 0;
  }

  function objectIsEmpty(object) {
    for (var prop in object)
      return false;
    return true;
  }

  function diffIsEmpty(diff) {
    return objectIsEmpty(diff.added) &&
           objectIsEmpty(diff.removed) &&
           objectIsEmpty(diff.changed);
  }

  function diffObjectFromOldObject(object, oldObject) {
    var added = {};
    var removed = {};
    var changed = {};

    for (var prop in oldObject) {
      var newValue = object[prop];

      if (newValue !== undefined && newValue === oldObject[prop])
        continue;

      if (!(prop in object)) {
        removed[prop] = undefined;
        continue;
      }

      if (newValue !== oldObject[prop])
        changed[prop] = newValue;
    }

    for (var prop in object) {
      if (prop in oldObject)
        continue;

      added[prop] = object[prop];
    }

    if (Array.isArray(object) && object.length !== oldObject.length)
      changed.length = object.length;

    return {
      added: added,
      removed: removed,
      changed: changed
    };
  }

  var eomTasks = [];
  function runEOMTasks() {
    if (!eomTasks.length)
      return false;

    for (var i = 0; i < eomTasks.length; i++) {
      eomTasks[i]();
    }
    eomTasks.length = 0;
    return true;
  }

  var runEOM = hasObserve ? (function(){
    var eomObj = { pingPong: true };
    var eomRunScheduled = false;

    Object.observe(eomObj, function() {
      runEOMTasks();
      eomRunScheduled = false;
    });

    return function(fn) {
      eomTasks.push(fn);
      if (!eomRunScheduled) {
        eomRunScheduled = true;
        eomObj.pingPong = !eomObj.pingPong;
      }
    };
  })() :
  (function() {
    return function(fn) {
      eomTasks.push(fn);
    };
  })();

  var observedObjectCache = [];

  function newObservedObject() {
    var observer;
    var object;
    var discardRecords = false;
    var first = true;

    function callback(records) {
      if (observer && observer.state_ === OPENED && !discardRecords)
        observer.check_(records);
    }

    return {
      open: function(obs) {
        if (observer)
          throw Error('ObservedObject in use');

        if (!first)
          Object.deliverChangeRecords(callback);

        observer = obs;
        first = false;
      },
      observe: function(obj, arrayObserve) {
        object = obj;
        if (arrayObserve)
          Array.observe(object, callback);
        else
          Object.observe(object, callback);
      },
      deliver: function(discard) {
        discardRecords = discard;
        Object.deliverChangeRecords(callback);
        discardRecords = false;
      },
      close: function() {
        observer = undefined;
        Object.unobserve(object, callback);
        observedObjectCache.push(this);
      }
    };
  }

  /*
   * The observedSet abstraction is a perf optimization which reduces the total
   * number of Object.observe observations of a set of objects. The idea is that
   * groups of Observers will have some object dependencies in common and this
   * observed set ensures that each object in the transitive closure of
   * dependencies is only observed once. The observedSet acts as a write barrier
   * such that whenever any change comes through, all Observers are checked for
   * changed values.
   *
   * Note that this optimization is explicitly moving work from setup-time to
   * change-time.
   *
   * TODO(rafaelw): Implement "garbage collection". In order to move work off
   * the critical path, when Observers are closed, their observed objects are
   * not Object.unobserve(d). As a result, it'siesta possible that if the observedSet
   * is kept open, but some Observers have been closed, it could cause "leaks"
   * (prevent otherwise collectable objects from being collected). At some
   * point, we should implement incremental "gc" which keeps a list of
   * observedSets which may need clean-up and does small amounts of cleanup on a
   * timeout until all is clean.
   */

  function getObservedObject(observer, object, arrayObserve) {
    var dir = observedObjectCache.pop() || newObservedObject();
    dir.open(observer);
    dir.observe(object, arrayObserve);
    return dir;
  }

  var observedSetCache = [];

  function newObservedSet() {
    var observerCount = 0;
    var observers = [];
    var objects = [];
    var rootObj;
    var rootObjProps;

    function observe(obj, prop) {
      if (!obj)
        return;

      if (obj === rootObj)
        rootObjProps[prop] = true;

      if (objects.indexOf(obj) < 0) {
        objects.push(obj);
        Object.observe(obj, callback);
      }

      observe(Object.getPrototypeOf(obj), prop);
    }

    function allRootObjNonObservedProps(recs) {
      for (var i = 0; i < recs.length; i++) {
        var rec = recs[i];
        if (rec.object !== rootObj ||
            rootObjProps[rec.name] ||
            rec.type === 'setPrototype') {
          return false;
        }
      }
      return true;
    }

    function callback(recs) {
      if (allRootObjNonObservedProps(recs))
        return;

      var observer;
      for (var i = 0; i < observers.length; i++) {
        observer = observers[i];
        if (observer.state_ == OPENED) {
          observer.iterateObjects_(observe);
        }
      }

      for (var i = 0; i < observers.length; i++) {
        observer = observers[i];
        if (observer.state_ == OPENED) {
          observer.check_();
        }
      }
    }

    var record = {
      object: undefined,
      objects: objects,
      open: function(obs, object) {
        if (!rootObj) {
          rootObj = object;
          rootObjProps = {};
        }

        observers.push(obs);
        observerCount++;
        obs.iterateObjects_(observe);
      },
      close: function(obs) {
        observerCount--;
        if (observerCount > 0) {
          return;
        }

        for (var i = 0; i < objects.length; i++) {
          Object.unobserve(objects[i], callback);
          Observer.unobservedCount++;
        }

        observers.length = 0;
        objects.length = 0;
        rootObj = undefined;
        rootObjProps = undefined;
        observedSetCache.push(this);
      }
    };

    return record;
  }

  var lastObservedSet;

  function getObservedSet(observer, obj) {
    if (!lastObservedSet || lastObservedSet.object !== obj) {
      lastObservedSet = observedSetCache.pop() || newObservedSet();
      lastObservedSet.object = obj;
    }
    lastObservedSet.open(observer, obj);
    return lastObservedSet;
  }

  var UNOPENED = 0;
  var OPENED = 1;
  var CLOSED = 2;
  var RESETTING = 3;

  var nextObserverId = 1;

  function Observer() {
    this.state_ = UNOPENED;
    this.callback_ = undefined;
    this.target_ = undefined; // TODO(rafaelw): Should be WeakRef
    this.directObserver_ = undefined;
    this.value_ = undefined;
    this.id_ = nextObserverId++;
  }

  Observer.prototype = {
    open: function(callback, target) {
      if (this.state_ != UNOPENED)
        throw Error('Observer has already been opened.');

      addToAll(this);
      this.callback_ = callback;
      this.target_ = target;
      this.connect_();
      this.state_ = OPENED;
      return this.value_;
    },

    close: function() {
      if (this.state_ != OPENED)
        return;

      removeFromAll(this);
      this.disconnect_();
      this.value_ = undefined;
      this.callback_ = undefined;
      this.target_ = undefined;
      this.state_ = CLOSED;
    },

    deliver: function() {
      if (this.state_ != OPENED)
        return;

      dirtyCheck(this);
    },

    report_: function(changes) {
      try {
        this.callback_.apply(this.target_, changes);
      } catch (ex) {
        Observer._errorThrownDuringCallback = true;
        console.error('Exception caught during observer callback: ' +
                       (ex.stack || ex));
      }
    },

    discardChanges: function() {
      this.check_(undefined, true);
      return this.value_;
    }
  }

  var collectObservers = !hasObserve;
  var allObservers;
  Observer._allObserversCount = 0;

  if (collectObservers) {
    allObservers = [];
  }

  function addToAll(observer) {
    Observer._allObserversCount++;
    if (!collectObservers)
      return;

    allObservers.push(observer);
  }

  function removeFromAll(observer) {
    Observer._allObserversCount--;
  }

  var runningMicrotaskCheckpoint = false;

  var hasDebugForceFullDelivery = hasObserve && hasEval && (function() {
    try {
      eval('%RunMicrotasks()');
      return true;
    } catch (ex) {
      return false;
    }
  })();

  global.Platform = global.Platform || {};

  global.Platform.performMicrotaskCheckpoint = function() {
    if (runningMicrotaskCheckpoint)
      return;

    if (hasDebugForceFullDelivery) {
      eval('%RunMicrotasks()');
      return;
    }

    if (!collectObservers)
      return;

    runningMicrotaskCheckpoint = true;

    var cycles = 0;
    var anyChanged, toCheck;

    do {
      cycles++;
      toCheck = allObservers;
      allObservers = [];
      anyChanged = false;

      for (var i = 0; i < toCheck.length; i++) {
        var observer = toCheck[i];
        if (observer.state_ != OPENED)
          continue;

        if (observer.check_())
          anyChanged = true;

        allObservers.push(observer);
      }
      if (runEOMTasks())
        anyChanged = true;
    } while (cycles < MAX_DIRTY_CHECK_CYCLES && anyChanged);

    if (testingExposeCycleCount)
      global.dirtyCheckCycleCount = cycles;

    runningMicrotaskCheckpoint = false;
  };

  if (collectObservers) {
    global.Platform.clearObservers = function() {
      allObservers = [];
    };
  }

  function ObjectObserver(object) {
    Observer.call(this);
    this.value_ = object;
    this.oldObject_ = undefined;
  }

  ObjectObserver.prototype = createObject({
    __proto__: Observer.prototype,

    arrayObserve: false,

    connect_: function(callback, target) {
      if (hasObserve) {
        this.directObserver_ = getObservedObject(this, this.value_,
                                                 this.arrayObserve);
      } else {
        this.oldObject_ = this.copyObject(this.value_);
      }

    },

    copyObject: function(object) {
      var copy = Array.isArray(object) ? [] : {};
      for (var prop in object) {
        copy[prop] = object[prop];
      };
      if (Array.isArray(object))
        copy.length = object.length;
      return copy;
    },

    check_: function(changeRecords, skipChanges) {
      var diff;
      var oldValues;
      if (hasObserve) {
        if (!changeRecords)
          return false;

        oldValues = {};
        diff = diffObjectFromChangeRecords(this.value_, changeRecords,
                                           oldValues);
      } else {
        oldValues = this.oldObject_;
        diff = diffObjectFromOldObject(this.value_, this.oldObject_);
      }

      if (diffIsEmpty(diff))
        return false;

      if (!hasObserve)
        this.oldObject_ = this.copyObject(this.value_);

      this.report_([
        diff.added || {},
        diff.removed || {},
        diff.changed || {},
        function(property) {
          return oldValues[property];
        }
      ]);

      return true;
    },

    disconnect_: function() {
      if (hasObserve) {
        this.directObserver_.close();
        this.directObserver_ = undefined;
      } else {
        this.oldObject_ = undefined;
      }
    },

    deliver: function() {
      if (this.state_ != OPENED)
        return;

      if (hasObserve)
        this.directObserver_.deliver(false);
      else
        dirtyCheck(this);
    },

    discardChanges: function() {
      if (this.directObserver_)
        this.directObserver_.deliver(true);
      else
        this.oldObject_ = this.copyObject(this.value_);

      return this.value_;
    }
  });

  function ArrayObserver(array) {
    if (!Array.isArray(array))
      throw Error('Provided object is not an Array');
    ObjectObserver.call(this, array);
  }

  ArrayObserver.prototype = createObject({

    __proto__: ObjectObserver.prototype,

    arrayObserve: true,

    copyObject: function(arr) {
      return arr.slice();
    },

    check_: function(changeRecords) {
      var splices;
      if (hasObserve) {
        if (!changeRecords)
          return false;
        splices = projectArraySplices(this.value_, changeRecords);
      } else {
        splices = calcSplices(this.value_, 0, this.value_.length,
                              this.oldObject_, 0, this.oldObject_.length);
      }

      if (!splices || !splices.length)
        return false;

      if (!hasObserve)
        this.oldObject_ = this.copyObject(this.value_);

      this.report_([splices]);
      return true;
    }
  });

  ArrayObserver.applySplices = function(previous, current, splices) {
    splices.forEach(function(splice) {
      var spliceArgs = [splice.index, splice.removed.length];
      var addIndex = splice.index;
      while (addIndex < splice.index + splice.addedCount) {
        spliceArgs.push(current[addIndex]);
        addIndex++;
      }

      Array.prototype.splice.apply(previous, spliceArgs);
    });
  };

  function PathObserver(object, path) {
    Observer.call(this);

    this.object_ = object;
    this.path_ = getPath(path);
    this.directObserver_ = undefined;
  }

  PathObserver.prototype = createObject({
    __proto__: Observer.prototype,

    get path() {
      return this.path_;
    },

    connect_: function() {
      if (hasObserve)
        this.directObserver_ = getObservedSet(this, this.object_);

      this.check_(undefined, true);
    },

    disconnect_: function() {
      this.value_ = undefined;

      if (this.directObserver_) {
        this.directObserver_.close(this);
        this.directObserver_ = undefined;
      }
    },

    iterateObjects_: function(observe) {
      this.path_.iterateObjects(this.object_, observe);
    },

    check_: function(changeRecords, skipChanges) {
      var oldValue = this.value_;
      this.value_ = this.path_.getValueFrom(this.object_);
      if (skipChanges || areSameValue(this.value_, oldValue))
        return false;

      this.report_([this.value_, oldValue, this]);
      return true;
    },

    setValue: function(newValue) {
      if (this.path_)
        this.path_.setValueFrom(this.object_, newValue);
    }
  });

  function CompoundObserver(reportChangesOnOpen) {
    Observer.call(this);

    this.reportChangesOnOpen_ = reportChangesOnOpen;
    this.value_ = [];
    this.directObserver_ = undefined;
    this.observed_ = [];
  }

  var observerSentinel = {};

  CompoundObserver.prototype = createObject({
    __proto__: Observer.prototype,

    connect_: function() {
      if (hasObserve) {
        var object;
        var needsDirectObserver = false;
        for (var i = 0; i < this.observed_.length; i += 2) {
          object = this.observed_[i]
          if (object !== observerSentinel) {
            needsDirectObserver = true;
            break;
          }
        }

        if (needsDirectObserver)
          this.directObserver_ = getObservedSet(this, object);
      }

      this.check_(undefined, !this.reportChangesOnOpen_);
    },

    disconnect_: function() {
      for (var i = 0; i < this.observed_.length; i += 2) {
        if (this.observed_[i] === observerSentinel)
          this.observed_[i + 1].close();
      }
      this.observed_.length = 0;
      this.value_.length = 0;

      if (this.directObserver_) {
        this.directObserver_.close(this);
        this.directObserver_ = undefined;
      }
    },

    addPath: function(object, path) {
      if (this.state_ != UNOPENED && this.state_ != RESETTING)
        throw Error('Cannot add paths once started.');

      var path = getPath(path);
      this.observed_.push(object, path);
      if (!this.reportChangesOnOpen_)
        return;
      var index = this.observed_.length / 2 - 1;
      this.value_[index] = path.getValueFrom(object);
    },

    addObserver: function(observer) {
      if (this.state_ != UNOPENED && this.state_ != RESETTING)
        throw Error('Cannot add observers once started.');

      this.observed_.push(observerSentinel, observer);
      if (!this.reportChangesOnOpen_)
        return;
      var index = this.observed_.length / 2 - 1;
      this.value_[index] = observer.open(this.deliver, this);
    },

    startReset: function() {
      if (this.state_ != OPENED)
        throw Error('Can only reset while open');

      this.state_ = RESETTING;
      this.disconnect_();
    },

    finishReset: function() {
      if (this.state_ != RESETTING)
        throw Error('Can only finishReset after startReset');
      this.state_ = OPENED;
      this.connect_();

      return this.value_;
    },

    iterateObjects_: function(observe) {
      var object;
      for (var i = 0; i < this.observed_.length; i += 2) {
        object = this.observed_[i]
        if (object !== observerSentinel)
          this.observed_[i + 1].iterateObjects(object, observe)
      }
    },

    check_: function(changeRecords, skipChanges) {
      var oldValues;
      for (var i = 0; i < this.observed_.length; i += 2) {
        var object = this.observed_[i];
        var path = this.observed_[i+1];
        var value;
        if (object === observerSentinel) {
          var observable = path;
          value = this.state_ === UNOPENED ?
              observable.open(this.deliver, this) :
              observable.discardChanges();
        } else {
          value = path.getValueFrom(object);
        }

        if (skipChanges) {
          this.value_[i / 2] = value;
          continue;
        }

        if (areSameValue(value, this.value_[i / 2]))
          continue;

        oldValues = oldValues || [];
        oldValues[i / 2] = this.value_[i / 2];
        this.value_[i / 2] = value;
      }

      if (!oldValues)
        return false;

      // TODO(rafaelw): Having observed_ as the third callback arg here is
      // pretty lame API. Fix.
      this.report_([this.value_, oldValues, this.observed_]);
      return true;
    }
  });

  function identFn(value) { return value; }

  function ObserverTransform(observable, getValueFn, setValueFn,
                             dontPassThroughSet) {
    this.callback_ = undefined;
    this.target_ = undefined;
    this.value_ = undefined;
    this.observable_ = observable;
    this.getValueFn_ = getValueFn || identFn;
    this.setValueFn_ = setValueFn || identFn;
    // TODO(rafaelw): This is a temporary hack. PolymerExpressions needs this
    // at the moment because of a bug in it'siesta dependency tracking.
    this.dontPassThroughSet_ = dontPassThroughSet;
  }

  ObserverTransform.prototype = {
    open: function(callback, target) {
      this.callback_ = callback;
      this.target_ = target;
      this.value_ =
          this.getValueFn_(this.observable_.open(this.observedCallback_, this));
      return this.value_;
    },

    observedCallback_: function(value) {
      value = this.getValueFn_(value);
      if (areSameValue(value, this.value_))
        return;
      var oldValue = this.value_;
      this.value_ = value;
      this.callback_.call(this.target_, this.value_, oldValue);
    },

    discardChanges: function() {
      this.value_ = this.getValueFn_(this.observable_.discardChanges());
      return this.value_;
    },

    deliver: function() {
      return this.observable_.deliver();
    },

    setValue: function(value) {
      value = this.setValueFn_(value);
      if (!this.dontPassThroughSet_ && this.observable_.setValue)
        return this.observable_.setValue(value);
    },

    close: function() {
      if (this.observable_)
        this.observable_.close();
      this.callback_ = undefined;
      this.target_ = undefined;
      this.observable_ = undefined;
      this.value_ = undefined;
      this.getValueFn_ = undefined;
      this.setValueFn_ = undefined;
    }
  }

  var expectedRecordTypes = {
    add: true,
    update: true,
    delete: true
  };

  function diffObjectFromChangeRecords(object, changeRecords, oldValues) {
    var added = {};
    var removed = {};

    for (var i = 0; i < changeRecords.length; i++) {
      var record = changeRecords[i];
      if (!expectedRecordTypes[record.type]) {
        console.error('Unknown changeRecord type: ' + record.type);
        console.error(record);
        continue;
      }

      if (!(record.name in oldValues))
        oldValues[record.name] = record.oldValue;

      if (record.type == 'update')
        continue;

      if (record.type == 'add') {
        if (record.name in removed)
          delete removed[record.name];
        else
          added[record.name] = true;

        continue;
      }

      // type = 'delete'
      if (record.name in added) {
        delete added[record.name];
        delete oldValues[record.name];
      } else {
        removed[record.name] = true;
      }
    }

    for (var prop in added)
      added[prop] = object[prop];

    for (var prop in removed)
      removed[prop] = undefined;

    var changed = {};
    for (var prop in oldValues) {
      if (prop in added || prop in removed)
        continue;

      var newValue = object[prop];
      if (oldValues[prop] !== newValue)
        changed[prop] = newValue;
    }

    return {
      added: added,
      removed: removed,
      changed: changed
    };
  }

  function newSplice(index, removed, addedCount) {
    return {
      index: index,
      removed: removed,
      addedCount: addedCount
    };
  }

  var EDIT_LEAVE = 0;
  var EDIT_UPDATE = 1;
  var EDIT_ADD = 2;
  var EDIT_DELETE = 3;

  function ArraySplice() {}

  ArraySplice.prototype = {

    // Note: This function is *based* on the computation of the Levenshtein
    // "edit" distance. The one change is that "updates" are treated as two
    // edits - not one. With Array splices, an update is really a delete
    // followed by an add. By retaining this, we optimize for "keeping" the
    // maximum array items in the original array. For example:
    //
    //   'xxxx123' -> '123yyyy'
    //
    // With 1-edit updates, the shortest path would be just to update all seven
    // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
    // leaves the substring '123' intact.
    calcEditDistances: function(current, currentStart, currentEnd,
                                old, oldStart, oldEnd) {
      // "Deletion" columns
      var rowCount = oldEnd - oldStart + 1;
      var columnCount = currentEnd - currentStart + 1;
      var distances = new Array(rowCount);

      // "Addition" rows. Initialize null column.
      for (var i = 0; i < rowCount; i++) {
        distances[i] = new Array(columnCount);
        distances[i][0] = i;
      }

      // Initialize null row
      for (var j = 0; j < columnCount; j++)
        distances[0][j] = j;

      for (var i = 1; i < rowCount; i++) {
        for (var j = 1; j < columnCount; j++) {
          if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))
            distances[i][j] = distances[i - 1][j - 1];
          else {
            var north = distances[i - 1][j] + 1;
            var west = distances[i][j - 1] + 1;
            distances[i][j] = north < west ? north : west;
          }
        }
      }

      return distances;
    },

    // This starts at the final weight, and walks "backward" by finding
    // the minimum previous weight recursively until the origin of the weight
    // matrix.
    spliceOperationsFromEditDistances: function(distances) {
      var i = distances.length - 1;
      var j = distances[0].length - 1;
      var current = distances[i][j];
      var edits = [];
      while (i > 0 || j > 0) {
        if (i == 0) {
          edits.push(EDIT_ADD);
          j--;
          continue;
        }
        if (j == 0) {
          edits.push(EDIT_DELETE);
          i--;
          continue;
        }
        var northWest = distances[i - 1][j - 1];
        var west = distances[i - 1][j];
        var north = distances[i][j - 1];

        var min;
        if (west < north)
          min = west < northWest ? west : northWest;
        else
          min = north < northWest ? north : northWest;

        if (min == northWest) {
          if (northWest == current) {
            edits.push(EDIT_LEAVE);
          } else {
            edits.push(EDIT_UPDATE);
            current = northWest;
          }
          i--;
          j--;
        } else if (min == west) {
          edits.push(EDIT_DELETE);
          i--;
          current = west;
        } else {
          edits.push(EDIT_ADD);
          j--;
          current = north;
        }
      }

      edits.reverse();
      return edits;
    },

    /**
     * Splice Projection functions:
     *
     * A splice map is a representation of how a previous array of items
     * was transformed into a new array of items. Conceptually it is a list of
     * tuples of
     *
     *   <index, removed, addedCount>
     *
     * which are kept in ascending index order of. The tuple represents that at
     * the |index|, |removed| sequence of items were removed, and counting forward
     * from |index|, |addedCount| items were added.
     */

    /**
     * Lacking individual splice mutation information, the minimal set of
     * splices can be synthesized given the previous state and final state of an
     * array. The basic approach is to calculate the edit distance matrix and
     * choose the shortest path through it.
     *
     * Complexity: O(l * p)
     *   l: The length of the current array
     *   p: The length of the old array
     */
    calcSplices: function(current, currentStart, currentEnd,
                          old, oldStart, oldEnd) {
      var prefixCount = 0;
      var suffixCount = 0;

      var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
      if (currentStart == 0 && oldStart == 0)
        prefixCount = this.sharedPrefix(current, old, minLength);

      if (currentEnd == current.length && oldEnd == old.length)
        suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);

      currentStart += prefixCount;
      oldStart += prefixCount;
      currentEnd -= suffixCount;
      oldEnd -= suffixCount;

      if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)
        return [];

      if (currentStart == currentEnd) {
        var splice = newSplice(currentStart, [], 0);
        while (oldStart < oldEnd)
          splice.removed.push(old[oldStart++]);

        return [ splice ];
      } else if (oldStart == oldEnd)
        return [ newSplice(currentStart, [], currentEnd - currentStart) ];

      var ops = this.spliceOperationsFromEditDistances(
          this.calcEditDistances(current, currentStart, currentEnd,
                                 old, oldStart, oldEnd));

      var splice = undefined;
      var splices = [];
      var index = currentStart;
      var oldIndex = oldStart;
      for (var i = 0; i < ops.length; i++) {
        switch(ops[i]) {
          case EDIT_LEAVE:
            if (splice) {
              splices.push(splice);
              splice = undefined;
            }

            index++;
            oldIndex++;
            break;
          case EDIT_UPDATE:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.addedCount++;
            index++;

            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
          case EDIT_ADD:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.addedCount++;
            index++;
            break;
          case EDIT_DELETE:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
        }
      }

      if (splice) {
        splices.push(splice);
      }
      return splices;
    },

    sharedPrefix: function(current, old, searchLength) {
      for (var i = 0; i < searchLength; i++)
        if (!this.equals(current[i], old[i]))
          return i;
      return searchLength;
    },

    sharedSuffix: function(current, old, searchLength) {
      var index1 = current.length;
      var index2 = old.length;
      var count = 0;
      while (count < searchLength && this.equals(current[--index1], old[--index2]))
        count++;

      return count;
    },

    calculateSplices: function(current, previous) {
      return this.calcSplices(current, 0, current.length, previous, 0,
                              previous.length);
    },

    equals: function(currentValue, previousValue) {
      return currentValue === previousValue;
    }
  };

  var arraySplice = new ArraySplice();

  function calcSplices(current, currentStart, currentEnd,
                       old, oldStart, oldEnd) {
    return arraySplice.calcSplices(current, currentStart, currentEnd,
                                   old, oldStart, oldEnd);
  }

  function intersect(start1, end1, start2, end2) {
    // Disjoint
    if (end1 < start2 || end2 < start1)
      return -1;

    // Adjacent
    if (end1 == start2 || end2 == start1)
      return 0;

    // Non-zero intersect, span1 first
    if (start1 < start2) {
      if (end1 < end2)
        return end1 - start2; // Overlap
      else
        return end2 - start2; // Contained
    } else {
      // Non-zero intersect, span2 first
      if (end2 < end1)
        return end2 - start1; // Overlap
      else
        return end1 - start1; // Contained
    }
  }

  function mergeSplice(splices, index, removed, addedCount) {

    var splice = newSplice(index, removed, addedCount);

    var inserted = false;
    var insertionOffset = 0;

    for (var i = 0; i < splices.length; i++) {
      var current = splices[i];
      current.index += insertionOffset;

      if (inserted)
        continue;

      var intersectCount = intersect(splice.index,
                                     splice.index + splice.removed.length,
                                     current.index,
                                     current.index + current.addedCount);

      if (intersectCount >= 0) {
        // Merge the two splices

        splices.splice(i, 1);
        i--;

        insertionOffset -= current.addedCount - current.removed.length;

        splice.addedCount += current.addedCount - intersectCount;
        var deleteCount = splice.removed.length +
                          current.removed.length - intersectCount;

        if (!splice.addedCount && !deleteCount) {
          // merged splice is a noop. discard.
          inserted = true;
        } else {
          var removed = current.removed;

          if (splice.index < current.index) {
            // some prefix of splice.removed is prepended to current.removed.
            var prepend = splice.removed.slice(0, current.index - splice.index);
            Array.prototype.push.apply(prepend, removed);
            removed = prepend;
          }

          if (splice.index + splice.removed.length > current.index + current.addedCount) {
            // some suffix of splice.removed is appended to current.removed.
            var append = splice.removed.slice(current.index + current.addedCount - splice.index);
            Array.prototype.push.apply(removed, append);
          }

          splice.removed = removed;
          if (current.index < splice.index) {
            splice.index = current.index;
          }
        }
      } else if (splice.index < current.index) {
        // Insert splice here.

        inserted = true;

        splices.splice(i, 0, splice);
        i++;

        var offset = splice.addedCount - splice.removed.length
        current.index += offset;
        insertionOffset += offset;
      }
    }

    if (!inserted)
      splices.push(splice);
  }

  function createInitialSplices(array, changeRecords) {
    var splices = [];

    for (var i = 0; i < changeRecords.length; i++) {
      var record = changeRecords[i];
      switch(record.type) {
        case 'splice':
          mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
          break;
        case 'add':
        case 'update':
        case 'delete':
          if (!isIndex(record.name))
            continue;
          var index = toNumber(record.name);
          if (index < 0)
            continue;
          mergeSplice(splices, index, [record.oldValue], 1);
          break;
        default:
          console.error('Unexpected record type: ' + JSON.stringify(record));
          break;
      }
    }

    return splices;
  }

  function projectArraySplices(array, changeRecords) {
    var splices = [];

    createInitialSplices(array, changeRecords).forEach(function(splice) {
      if (splice.addedCount == 1 && splice.removed.length == 1) {
        if (splice.removed[0] !== array[splice.index])
          splices.push(splice);

        return
      };

      splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount,
                                           splice.removed, 0, splice.removed.length));
    });

    return splices;
  }

 // Export the observe-js object for **Node.js**, with
// backwards-compatibility for the old `require()` API. If we're in
// the browser, export as a global object.
var expose = global;
if (typeof exports !== 'undefined') {
if (typeof module !== 'undefined' && module.exports) {
expose = exports = module.exports;
}
expose = exports;
}
expose.Observer = Observer;
expose.Observer.runEOM_ = runEOM;
expose.Observer.observerSentinel_ = observerSentinel; // for testing.
expose.Observer.hasObjectObserve = hasObserve;
expose.ArrayObserver = ArrayObserver;
expose.ArrayObserver.calculateSplices = function(current, previous) {
return arraySplice.calculateSplices(current, previous);
};
expose.Platform = global.Platform;
expose.ArraySplice = ArraySplice;
expose.ObjectObserver = ObjectObserver;
expose.PathObserver = PathObserver;
expose.CompoundObserver = CompoundObserver;
expose.Path = Path;
expose.ObserverTransform = ObserverTransform;
})(typeof global !== 'undefined' && global && typeof module !== 'undefined' && module ? global : this || window);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],107:[function(require,module,exports){
function Logger (name) {
    if (!this) return new Logger(name);
    this.name = name;

    this.trace = constructPerformer(this, _.bind(console.debug ? console.debug : console.log, console), Logger.Level.trace);
    this.debug = constructPerformer(this, _.bind(console.debug ? console.debug  : console.log, console), Logger.Level.debug);
    this.info = constructPerformer(this, _.bind(console.info ? console.info : console.log, console), Logger.Level.info);
    this.log = constructPerformer(this, _.bind(console.log ? console.log : console.log, console), Logger.Level.info);
    this.warn = constructPerformer(this, _.bind(console.warn ? console.warn : console.log, console), Logger.Level.warning);
    this.error = constructPerformer(this, _.bind(console.error ? console.error : console.log, console), Logger.Level.error);
    this.fatal = constructPerformer(this, _.bind(console.error ? console.error : console.log, console), Logger.Level.fatal);

}

var logLevels = {};

function constructPerformer (logger, f, level) {
    var performer = function (message) {
        logger.performLog(f, level, message, arguments);
    };
    Object.defineProperty(performer, 'isEnabled', {
        get: function () {
            var currentLevel = logger.currentLevel();
            return level >= currentLevel;
        },
        enumerable: true,
        configurable: true
    });
    performer.f = f;
    performer.logger = logger;
    performer.level = level;
    return performer;
}

Logger.Level = {
    trace: 0,
    debug: 1,
    info: 2,
    warning: 3,
    warn: 3,
    error: 4,
    fatal: 5
};

Logger.LevelText = {};
Logger.LevelText [Logger.Level.trace] = 'TRACE';
Logger.LevelText [Logger.Level.debug] = 'DEBUG';
Logger.LevelText [Logger.Level.info] = 'INFO ';
Logger.LevelText [Logger.Level.warning] = 'WARN ';
Logger.LevelText [Logger.Level.error] = 'ERROR';

Logger.levelAsText = function (level) {
    return this.LevelText[level];
};

Logger.loggerWithName = function (name) {
    return new Logger(name);
};

Logger.prototype.currentLevel = function () {
    var logLevel = logLevels[this.name];
    return  logLevel ? logLevel : Logger.Level.trace;
};

Logger.prototype.setLevel = function (level) {
    logLevels[this.name] = level;
};

Logger.prototype.override = function (level, override, message) {
    var levelAsText = Logger.levelAsText(level);
    var performer = this[levelAsText.trim().toLowerCase()];
    var f = performer.f;
    var otherArguments = Array.prototype.slice.call(arguments, 3, arguments.length);
    this.performLog(f, level, message, otherArguments, override);
};

Logger.prototype.performLog = function (logFunc, level, message, otherArguments, override) {
    var self = this;
    var currentLevel = override !== undefined ? override : this.currentLevel();
    if (currentLevel <= level) {
        logFunc = _.partial(logFunc, Logger.levelAsText(level) + ' [' + self.name + ']: ' + message);
        var args = [];
        for (var i=0; i<otherArguments.length; i++) {
            args[i] = otherArguments[i];
        }
        args.splice(0, 1);
        logFunc.apply(logFunc, args);
    }
};

module.exports = Logger;

},{}],108:[function(require,module,exports){
var log = require('./log');
var Logger = log.loggerWithName('Operation');

function Operation() {
    if (!this) {
        return new (Function.prototype.bind.apply(Operation, arguments));
    }
    var self = this;
    if (arguments.length) {
        if (typeof(arguments[0]) == 'string') {
            this.name = arguments[0];
            this.work = arguments[1];
            this.completion = arguments[2];
        }
        else if (typeof(arguments[0]) == 'function' ||
            Object.prototype.toString.call(arguments[0]) === '[object Array]' ||
            arguments[0] instanceof Operation) {
            this.work = arguments[0];
            this.completion = arguments[1];
        }
    }
    this.error = null;
    this.completed = false;
    this.result = null;
    this.running = false;
    this.cancelled = false;
    this.dependencies = [];
    this._mustSucceed = [];
    this._onCompletion = [];
    this.logLevel = null; // Override.

    Object.defineProperty(this, 'failed', {
        get: function () {
            return  !!self.error || self.failedDueToDependency;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'composite', {
        get: function () {
            return self.work instanceof Operation ||
                Object.prototype.toString.call(self.work) === '[object Array]'
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'numOperationsRemaining', {
        get: function () {
            if (self.work instanceof Operation) {
                return self.work.completed ? 0 : 1
            }
            else if (Object.prototype.toString.call(self.work) === '[object Array]') {
                return _.reduce(self.work, function (memo, op) {
                    if (!op.completed) {
                        return memo + 1;
                    }
                    return memo;
                }, 0);
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'canRun', {
        get: function () {
            if (self.dependencies.length) {
                return _.reduce(self.dependencies, function (memo, dep) {
                    var mustSucceed = self._mustSucceed.indexOf(dep) > -1;
                    var canRun = memo && dep.completed;
                    if (mustSucceed && canRun) {
                        canRun = canRun && !(dep.failed || dep.cancelled);
                    }
                    return canRun;
                }, true);
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'failedDueToDependency', {
        get: function () {
            if (self.dependencies.length) {
                var failedDeps = _.reduce(self.dependencies, function (memo, dep) {
                    var mustSucceed = self._mustSucceed.indexOf(dep) > -1;
                    var failed = ((dep.failed || dep.cancelled) && mustSucceed);
                    if (failed) {
                        memo.push(dep);
                    }
                    return memo;
                }, []);
                return failedDeps.length ? failedDeps : false;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'failedDueToCancellationOfDependency', {
        get: function () {
            if (self.dependencies.length) {
                var cancelled = _.reduce(self.dependencies, function (memo, dep) {
                    var mustSucceed = self._mustSucceed.indexOf(dep) > -1;
                    if (mustSucceed) {
                        if (dep.cancelled) memo.push(dep);
                    }
                    return memo;
                }, []);
                return cancelled.length ? cancelled : false;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(this, 'loggingOveridden', {
        get: function () {
            if (self.logLevel) {
                return self.logLevel <= log.Level.info;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    })


}

Operation.running = [];

Operation.prototype._startSingle = function () {
    var self = this;
    this.work(function (err, payload) {
        self.result = payload;
        self.error = err;
        self.completed = true;
        self.running = false;
        self._complete();
    });
};

Operation.prototype._startComposite = function () {
    var self = this;
    var operations = self.work instanceof Operation ? [self.work] : self.work;
    _.each(operations, function (op) {
        op.onCompletion(function () {
            var numOperationsRemaining = self.numOperationsRemaining;
            var name = self.name || 'Unnamed';
            Logger.debug(name + ' has ' + numOperationsRemaining.toString() + ' operations remaining');
            if (!numOperationsRemaining) {
                var errors = _.pluck(operations, 'error');
                var results = _.pluck(operations, 'result');
                self.result = _.some(results) ? results : null;
                self.error = _.some(errors) ? errors : null;
                self.completed = true;
                self.running = false;
                self._complete();
            }
        });
        op.start();
    });
};

Operation.prototype._logCompletion = function () {
    var logFunc = this._getLogFunc();
    if (Logger.info.isEnabled || this.loggingOveridden) {
        var name = this.name || 'Unnamed';
        var failedDependencies = this.failedDueToDependency;
        if (failedDependencies) {
            logFunc('"' + name + '" failed due to failure/cancellation of dependencies: ' + _.pluck(failedDependencies, 'name').join(', '));
        }
        else if (this.failed) {
            var err = this.error;
            // Remove null errors.
            if (Object.prototype.toString.call(err) === '[object Array]') {
                err = _.filter(err, function (e) {return e });
            }
            else {
                err = [this.error];
            }
            logFunc('"' + name + '" failed due to errors:', err);
        }
        else if (this.cancelled) {
            logFunc('"' + name + '" has been cancelled.');
        }
        else {
            logFunc('"' + name + '" has succeeded.');
        }
    }
};

Operation.prototype._getLogFunc = function () {
    if (this.logLevel) {
        return _.bind(Logger.override, Logger, log.Level.info, this.logLevel);
    }
    return Logger.info;
};

Operation.prototype._logStart = function () {
    if (Logger.info.isEnabled || this.loggingOveridden) {
        var name = this.name || 'Unnamed';
        var logFunc = this._getLogFunc();
        logFunc('"' + name + '" has started.');
    }
};


Operation.prototype._complete = function () {
    var self = this;
    this.completed = true;
    var idx = Operation.running.indexOf(this);
    Operation.running.splice(idx, 1);
    if (this.completion) {
        _.bind(this.completion, this)();
    }
    this._logCompletion();
    _.each(this._onCompletion, function (o) {
        _.bind(o, self)();
    });
};

Operation.prototype.__start = function () {
    this._logStart();
    if (this.work) {
        if (this.composite) {
            this._startComposite();
        }
        else {
            this._startSingle();
        }
        Operation.running.push(this);
    }
    else {
        this.result = null;
        this.error = null;
        this.running = false;
        this._complete();
    }
};

Operation.prototype.start = function () {
    var self = this;
    var neverStarted = !this.running && !this.completed;
    var neverStartedAndFailed = neverStarted && this.failed;
    // A dependency failed or was cancelled before this operation started.
    if (neverStartedAndFailed) {
        this._complete();
    }
    else if (neverStarted) {
        this.running = true;
        if (this.canRun) {
            this.__start();
        }
        else {
            _.each(this.dependencies, function (dep) {
                dep.onCompletion(function () {
                    if (self.canRun) {
                        self.__start();
                    }
                })
            });
        }
    }
};


Operation.prototype.addDependency = function () {
    var self = this;
    if (arguments.length == 1) {
        this.dependencies.push(arguments[0]);
    }
    else if (arguments.length) {
        var args = arguments;
        var lastArg = args[args.length - 1];
        var mustSucceed = false;
        if (typeof(lastArg) == 'boolean') {
            args = Array.prototype.slice.call(args, 0, args.length - 1);
            mustSucceed = lastArg;
        }
        _.each(args, function (arg) {
            self.dependencies.push(arg);
        });
        if (mustSucceed) {
            _.each(args, function (arg) {
                self._mustSucceed.push(arg);
            })
        }
    }
};

Operation.prototype.onCompletion = function (o) {
    if (!this.completed) {
        this._onCompletion.push(o);
    }
    else {
        _.bind(o, this)();
    }
};

Operation.prototype.cancel = function (callback) {
    if (!this.cancelled) {
        this.cancelled = true;
        Logger.debug('Cancelling ' + this.name, this);
        if (this.composite) {
            _.each(this.work, function (subop) {
                subop.cancel();
            });
        }
        this.onCompletion(function () {
            this.running = false;
            if (callback) callback();
        });
    }
};

Object.defineProperty(Operation, 'logLevel', {
    get: function () {
        return Logger.currentLevel();
    },
    set: function (v) {
        Logger.setLevel(v);
    },
    configurable: true,
    enumerable: true
});

module.exports.Operation = Operation;

},{"./log":107}],109:[function(require,module,exports){

var log = require('./log');
var Logger = log.loggerWithName('OperationQueue');


function OperationQueue() {

    if (!this) {
        return new (Function.prototype.bind.apply(OperationQueue, arguments));
    }
    var self = this;

    if (arguments.length) {
        if (typeof(arguments[0]) == 'number') {
            this.maxConcurrentOperations = arguments[0];
        }
        else {
            this.name = arguments[0];
            this.maxConcurrentOperations = arguments[1];
        }
    }

    this._queuedOperations = [];
    this._runningOperations = [];
    this._running = false;
    this._onStart = [];
    this._onStop = [];
    this.logLevel = null;

    Object.defineProperty(this, 'numRunningOperations', {
        get: function () {
            return self._runningOperations.length;
        },
        configurable: true,
        enumerable: true
    });

    Object.defineProperty(this, 'loggingOveridden', {
        get: function () {
            if (self.logLevel) {
                return self.logLevel <= log.Level.info;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    })
}

OperationQueue.prototype._nextOperations = function () {
    var self = this;
    while ((self._runningOperations.length < self.maxConcurrentOperations) && self._queuedOperations.length) {
        var op = self._queuedOperations[0];
        self._queuedOperations.splice(0, 1);
        self._runOperation(op);
    }
};


OperationQueue.prototype._runOperation = function (op) {
    var self = this;
    for (var i = 0; i < this._queuedOperations.length; i++) {
        if (this._queuedOperations[i] == op) {
            this._queuedOperations.splice(i, 1);
            break;
        }
    }
    this._runningOperations.push(op);
    op.completion = function () {
        var idx = self._runningOperations.indexOf(op);
        self._runningOperations.splice(idx, 1);
        if (self._running) {
            self._nextOperations();
        }
        self._logStatus();
    };
    op.start();
    this._logStatus();
};

OperationQueue.prototype._logStatus = function () {
    var logFunc = this._getLogFunc();
    if (Logger.info.isEnabled || this.loggingOveridden) {
        var numRunning = this.numRunningOperations;
        var numQueued = this._queuedOperations.length;
        var name = this.name || "Unnamed Queue";
        if (numRunning && numQueued) {
            logFunc('"' + name + '" now has ' + numRunning.toString() + ' operations running and ' + numQueued.toString() + ' operations queued');
        }
        else if (numRunning) {
            logFunc('"' + name + '" now has ' + numRunning.toString() + ' operations running');
        }
        else if (numQueued) {
            logFunc('"' + name + '" now has ' + numQueued.toString() + ' operations queued');
        }
        else {
            logFunc('"' + name + '" has no operations running or queued');
        }
    }
};

OperationQueue.prototype._logStart = function () {
    var logFunc = this._getLogFunc();
    if (Logger.info.isEnabled || this.loggingOveridden) {
        var name = this.name || "Unnamed Queue";
        logFunc('"' + name + '" is now running');
    }
};

OperationQueue.prototype._getLogFunc = function () {
    if (this.logLevel) {
        return _.bind(Logger.override, Logger, log.Level.info, this.logLevel);
    }
    return Logger.info;
};


OperationQueue.prototype._logStop = function () {
    var logFunc = this._getLogFunc();
    if (Logger.info.isEnabled || this.loggingOveridden) {
        var name = this.name || "Unnamed Queue";
        logFunc('"' + name + '" is no longer running');
    }
};

OperationQueue.prototype._addOperation = function (op) {
    if (this.numRunningOperations < this.maxConcurrentOperations && this._running) {
        this._runOperation(op);
    }
    else {
        this._queuedOperations.push(op);
    }
    this._logStatus();
};

OperationQueue.prototype.addOperation = function (operationOrOperations) {
    var self = this;
    if (Object.prototype.toString.call(operationOrOperations) === '[object Array]') {
        _.each(operationOrOperations, function (op) {self._addOperation(op)});
    }
    else {
        this._addOperation(operationOrOperations);
    }
};

OperationQueue.prototype.start = function () {
    var self = this;
    var wasRunning = this._running;
    this._running = true;
    if (!wasRunning) {
        _.each(self._onStart, function (c) {
            _.bind(c, self)();
        });
        self._nextOperations();
        self._logStart();
    }
};

OperationQueue.prototype.stop = function (cancel) {
    var self = this;
    var wasRunning = this._running;
    this._running = false;
    if (wasRunning) {
        if (cancel) {
            var operations = this._runningOperations.slice(0); // Clone so not fighting callbacks.
            _.each(operations, function (o) {
                o.cancel();
            });
        }
        self._logStop();
        _.each(self._onStop, function (c) {
            _.bind(c, self)();
        });
    }
};

OperationQueue.prototype.onStart = function (o) {
    this._onStart.push(o);
};
OperationQueue.prototype.onStop = function (o) {
    this._onStop.push(o);
};

Object.defineProperty(OperationQueue, 'logLevel', {
    get: function () {
        return Logger.currentLevel();
    },
    set: function (v) {
        Logger.setLevel(v);
    },
    configurable: true,
    enumerable: true
});


module.exports.OperationQueue = OperationQueue;

},{"./log":107}]},{},[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105])
//# sourceMappingURL=data:application/json;base64,
